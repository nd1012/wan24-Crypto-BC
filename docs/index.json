{
  "api/index.html": {
    "href": "api/index.html",
    "title": "API reference | wan24-Crypto-BC",
    "keywords": "API reference Choose a type from the left to start browsing."
  },
  "api/wan24.Crypto.BC.AsymmetricBcEcDiffieHellmanAlgorithm.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricBcEcDiffieHellmanAlgorithm.html",
    "title": "Class AsymmetricBcEcDiffieHellmanAlgorithm | wan24-Crypto-BC",
    "keywords": "Class AsymmetricBcEcDiffieHellmanAlgorithm EC Diffie Hellman asymmetric algorithm (may be used as replacement, if the .NET algorithm isn't available on the current platform) Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey> BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanAlgorithm> BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey, ECKeyPairGenerator, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanAlgorithm> AsymmetricBcEcDiffieHellmanAlgorithm Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanAlgorithm>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey, ECKeyPairGenerator, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanAlgorithm>> IEquatable<AsymmetricBcEcDiffieHellmanAlgorithm> Inherited Members BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey, ECKeyPairGenerator, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanAlgorithm>.CreateKeyPair(CryptoOptions) BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanAlgorithm>.Instance BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanAlgorithm>.Usages BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanAlgorithm>.IsEllipticCurveAlgorithm BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanAlgorithm>.AllowedKeySizes BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanAlgorithm>.IsPostQuantum BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanAlgorithm>.DeserializePrivateKeyV1(byte[]) BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanAlgorithm>.Register() AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.EnsureDefaultOptions(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.EnsureAllowed(in bool) AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.CreateKeyPair(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.CreateKeyPairAsync(CryptoOptions, CancellationToken) AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.DeserializePublicKey(byte[]) AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.DeserializePrivateKey(byte[]) AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.DeserializePrivateKeyV1(byte[]) AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.DeriveKey(byte[], CryptoOptions) AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.CanHandleNetAlgorithm(AsymmetricAlgorithm) AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.ToString() AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.GetHashCode() AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.Equals(object) AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.Equals(CryptoAlgorithmBase) AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.Equals(AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>) AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.<Clone>$() AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.PrivateKeyType AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.PublicKeyType AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.DefaultOptions AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.DefaultAlgorithmOptions AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.Usages AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.CanExchangeKey AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.CanSign AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.IsEllipticCurveAlgorithm AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.IsPublicKeyStandardFormat AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.AllowedKeySizes AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.DefaultKeySize AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.IsDenied AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.KeyPool AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.GetHashCode() CryptoAlgorithmBase.Equals(object) CryptoAlgorithmBase.Equals(CryptoAlgorithmBase) CryptoAlgorithmBase.<Clone>$() CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.State object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricBcEcDiffieHellmanAlgorithm : BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey, ECKeyPairGenerator, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanAlgorithm>, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanAlgorithm>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey, ECKeyPairGenerator, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanAlgorithm>>, IEquatable<AsymmetricBcEcDiffieHellmanAlgorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"ECDH\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 0 Field Value Type Description int | Edit this page View Source DEFAULT_KEY_SIZE Default key size in bits Declaration public const int DEFAULT_KEY_SIZE = 521 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"EC Diffie Hellman\" Field Value Type Description string | Edit this page View Source USAGES Algorithm usages Declaration public const AsymmetricAlgorithmUsages USAGES = KeyExchange Field Value Type Description AsymmetricAlgorithmUsages Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPublicKeyStandardFormat Is the public key exported in a standard format? Declaration public override bool IsPublicKeyStandardFormat { get; } Property Value Type Description bool Overrides wan24.Crypto.AsymmetricAlgorithmBase<wan24.Crypto.BC.AsymmetricBcEcDiffieHellmanPublicKey, wan24.Crypto.BC.AsymmetricBcEcDiffieHellmanPrivateKey>.IsPublicKeyStandardFormat Methods | Edit this page View Source CreateKeyGenParameters(SecureRandom, ECDomainParameters, CryptoOptions) Create key generator parameters Declaration protected override ECKeyGenerationParameters CreateKeyGenParameters(SecureRandom random, ECDomainParameters parameters, CryptoOptions options) Parameters Type Name Description SecureRandom random Random ECDomainParameters parameters Engine parameters CryptoOptions options Options Returns Type Description ECKeyGenerationParameters Key generator parameters Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanAlgorithm>.CreateKeyGenParameters(SecureRandom, ECDomainParameters, CryptoOptions) | Edit this page View Source GetEngineParameters(CryptoOptions) Get the cipher engine parameters Declaration protected override ECDomainParameters GetEngineParameters(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description ECDomainParameters Parameters Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanAlgorithm>.GetEngineParameters(CryptoOptions) Implements IEquatable<T> wan24.Crypto.IAsymmetricAlgorithm wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricBcEcDiffieHellmanPrivateKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricBcEcDiffieHellmanPrivateKey.html",
    "title": "Class AsymmetricBcEcDiffieHellmanPrivateKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricBcEcDiffieHellmanPrivateKey EC Diffie Hellman asymmetric private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey> BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanPrivateKey> BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanPrivateKey> AsymmetricBcEcDiffieHellmanPrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanPrivateKey>> IEquatable<BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanPrivateKey>> IKeyExchangePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IKeyExchange IEquatable<AsymmetricBcEcDiffieHellmanPrivateKey> Inherited Members BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanPrivateKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanPrivateKey>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanPrivateKey>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanPrivateKey>.Bits BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanPrivateKey>.ExportBc() BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanPrivateKey>.ImportBc(in byte[]) AsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.GetCopy() AsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.ToString() AsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.GetHashCode() AsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.Equals(object) AsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.Equals(AsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>) AsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.<Clone>$() AsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.PublicKey AsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricBcEcDiffieHellmanPrivateKey : BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanPrivateKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanPrivateKey>>, IEquatable<BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanPrivateKey>>, IKeyExchangePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IKeyExchange, IEquatable<AsymmetricBcEcDiffieHellmanPrivateKey> Constructors | Edit this page View Source AsymmetricBcEcDiffieHellmanPrivateKey() Constructor Declaration public AsymmetricBcEcDiffieHellmanPrivateKey() | Edit this page View Source AsymmetricBcEcDiffieHellmanPrivateKey(AsymmetricCipherKeyPair) Constructor Declaration public AsymmetricBcEcDiffieHellmanPrivateKey(AsymmetricCipherKeyPair keys) Parameters Type Name Description AsymmetricCipherKeyPair keys Keys | Edit this page View Source AsymmetricBcEcDiffieHellmanPrivateKey(ECPrivateKeyParameters) Constructor Declaration public AsymmetricBcEcDiffieHellmanPrivateKey(ECPrivateKeyParameters privateKey) Parameters Type Name Description ECPrivateKeyParameters privateKey Private key | Edit this page View Source AsymmetricBcEcDiffieHellmanPrivateKey(byte[]) Constructor Declaration public AsymmetricBcEcDiffieHellmanPrivateKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Methods | Edit this page View Source DeriveKey(byte[]) Declaration public override byte[] DeriveKey(byte[] keyExchangeData) Parameters Type Name Description byte[] keyExchangeData Returns Type Description byte[] Overrides AsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.DeriveKey(byte[]) | Edit this page View Source DeriveKey(IAsymmetricPublicKey) Declaration public override byte[] DeriveKey(IAsymmetricPublicKey publicKey) Parameters Type Name Description IAsymmetricPublicKey publicKey Returns Type Description byte[] Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricBcEcDiffieHellmanPublicKey, wan24.Crypto.BC.AsymmetricBcEcDiffieHellmanPrivateKey>.DeriveKey(wan24.Crypto.IAsymmetricPublicKey) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanPrivateKey>.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricBcEcDiffieHellmanPublicKey, wan24.Crypto.BC.AsymmetricBcEcDiffieHellmanPrivateKey>.DisposeCore() | Edit this page View Source GetKeyExchangeData(IAsymmetricPublicKey?, CryptoOptions?) Declaration public override (byte[] Key, byte[] KeyExchangeData) GetKeyExchangeData(IAsymmetricPublicKey? publicKey = null, CryptoOptions? options = null) Parameters Type Name Description IAsymmetricPublicKey publicKey CryptoOptions options Returns Type Description (byte[] Key, byte[] KeyExchangeData) Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricBcEcDiffieHellmanPublicKey, wan24.Crypto.BC.AsymmetricBcEcDiffieHellmanPrivateKey>.GetKeyExchangeData(wan24.Crypto.IAsymmetricPublicKey, wan24.Crypto.CryptoOptions) | Edit this page View Source GetPublicKey(ECPrivateKeyParameters) Get the public key from a private key Declaration protected override ECPublicKeyParameters GetPublicKey(ECPrivateKeyParameters privateKey) Parameters Type Name Description ECPrivateKeyParameters privateKey Private key Returns Type Description ECPublicKeyParameters Public key Overrides BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBcEcDiffieHellmanPublicKey, AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDiffieHellmanPrivateKey>.GetPublicKey(ECPrivateKeyParameters) Operators | Edit this page View Source explicit operator AsymmetricBcEcDiffieHellmanPrivateKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricBcEcDiffieHellmanPrivateKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricBcEcDiffieHellmanPrivateKey | Edit this page View Source implicit operator AsymmetricBcEcDiffieHellmanPublicKey(AsymmetricBcEcDiffieHellmanPrivateKey) Cast to public key Declaration public static implicit operator AsymmetricBcEcDiffieHellmanPublicKey(AsymmetricBcEcDiffieHellmanPrivateKey privateKey) Parameters Type Name Description AsymmetricBcEcDiffieHellmanPrivateKey privateKey Private key Returns Type Description AsymmetricBcEcDiffieHellmanPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.IKeyExchangePrivateKey wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider wan24.Crypto.IKeyExchange IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricBcEcDiffieHellmanPublicKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricBcEcDiffieHellmanPublicKey.html",
    "title": "Class AsymmetricBcEcDiffieHellmanPublicKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricBcEcDiffieHellmanPublicKey EC Diffie Hellman asymmetric public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDiffieHellmanPublicKey> BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDiffieHellmanPublicKey> AsymmetricBcEcDiffieHellmanPublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDiffieHellmanPublicKey>> IEquatable<BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDiffieHellmanPublicKey>> IEquatable<AsymmetricBcEcDiffieHellmanPublicKey> Inherited Members BouncyCastleAsymmetricPublicKeyBase<AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDiffieHellmanPublicKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPublicKeyBase<AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDiffieHellmanPublicKey>.PublicKey BouncyCastleAsymmetricPublicKeyBase<AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDiffieHellmanPublicKey>.ExportBc() BouncyCastleAsymmetricPublicKeyBase<AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDiffieHellmanPublicKey>.GetCopy() BouncyCastleAsymmetricPublicKeyBase<AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDiffieHellmanPublicKey>.ImportBc(in byte[]) AsymmetricPublicKeyBase.GetCopy() AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricBcEcDiffieHellmanPublicKey : BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDiffieHellmanPublicKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDiffieHellmanPublicKey>>, IEquatable<BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricBcEcDiffieHellmanAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDiffieHellmanPublicKey>>, IEquatable<AsymmetricBcEcDiffieHellmanPublicKey> Constructors | Edit this page View Source AsymmetricBcEcDiffieHellmanPublicKey() Constructor Declaration public AsymmetricBcEcDiffieHellmanPublicKey() | Edit this page View Source AsymmetricBcEcDiffieHellmanPublicKey(ECPublicKeyParameters) Constructor Declaration public AsymmetricBcEcDiffieHellmanPublicKey(ECPublicKeyParameters publicKey) Parameters Type Name Description ECPublicKeyParameters publicKey Public key | Edit this page View Source AsymmetricBcEcDiffieHellmanPublicKey(byte[]) Constructor Declaration public AsymmetricBcEcDiffieHellmanPublicKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides wan24.Crypto.AsymmetricKeyBase.Bits Operators | Edit this page View Source explicit operator AsymmetricBcEcDiffieHellmanPublicKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricBcEcDiffieHellmanPublicKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricBcEcDiffieHellmanPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricBcEcDsaAlgorithm.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricBcEcDsaAlgorithm.html",
    "title": "Class AsymmetricBcEcDsaAlgorithm | wan24-Crypto-BC",
    "keywords": "Class AsymmetricBcEcDsaAlgorithm EC DSA asymmetric algorithm (may be used as replacement, if the .NET algorithm isn't available on the current platform) Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey> BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaAlgorithm> BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey, ECKeyPairGenerator, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaAlgorithm> AsymmetricBcEcDsaAlgorithm Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaAlgorithm>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey, ECKeyPairGenerator, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaAlgorithm>> IEquatable<AsymmetricBcEcDsaAlgorithm> Inherited Members BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey, ECKeyPairGenerator, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaAlgorithm>.CreateKeyPair(CryptoOptions) BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaAlgorithm>.Instance BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaAlgorithm>.Usages BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaAlgorithm>.IsEllipticCurveAlgorithm BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaAlgorithm>.AllowedKeySizes BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaAlgorithm>.IsPostQuantum BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaAlgorithm>.DeserializePrivateKeyV1(byte[]) BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaAlgorithm>.Register() AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.EnsureDefaultOptions(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.EnsureAllowed(in bool) AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.CreateKeyPair(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.CreateKeyPairAsync(CryptoOptions, CancellationToken) AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.DeserializePublicKey(byte[]) AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.DeserializePrivateKey(byte[]) AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.DeserializePrivateKeyV1(byte[]) AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.DeriveKey(byte[], CryptoOptions) AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.CanHandleNetAlgorithm(AsymmetricAlgorithm) AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.ToString() AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.GetHashCode() AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.Equals(object) AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.Equals(CryptoAlgorithmBase) AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.Equals(AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>) AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.<Clone>$() AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.PrivateKeyType AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.PublicKeyType AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.DefaultOptions AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.DefaultAlgorithmOptions AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.Usages AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.CanExchangeKey AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.CanSign AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.IsEllipticCurveAlgorithm AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.IsPublicKeyStandardFormat AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.AllowedKeySizes AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.DefaultKeySize AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.IsDenied AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.KeyPool AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.GetHashCode() CryptoAlgorithmBase.Equals(object) CryptoAlgorithmBase.Equals(CryptoAlgorithmBase) CryptoAlgorithmBase.<Clone>$() CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.State object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricBcEcDsaAlgorithm : BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey, ECKeyPairGenerator, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaAlgorithm>, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaAlgorithm>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey, ECKeyPairGenerator, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaAlgorithm>>, IEquatable<AsymmetricBcEcDsaAlgorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"ECDSA\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 1 Field Value Type Description int | Edit this page View Source DEFAULT_KEY_SIZE Default key size in bits Declaration public const int DEFAULT_KEY_SIZE = 521 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"EC DSA\" Field Value Type Description string | Edit this page View Source USAGES Algorithm usages Declaration public const AsymmetricAlgorithmUsages USAGES = Signature Field Value Type Description AsymmetricAlgorithmUsages Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPublicKeyStandardFormat Is the public key exported in a standard format? Declaration public override bool IsPublicKeyStandardFormat { get; } Property Value Type Description bool Overrides wan24.Crypto.AsymmetricAlgorithmBase<wan24.Crypto.BC.AsymmetricBcEcDsaPublicKey, wan24.Crypto.BC.AsymmetricBcEcDsaPrivateKey>.IsPublicKeyStandardFormat Methods | Edit this page View Source CreateKeyGenParameters(SecureRandom, ECDomainParameters, CryptoOptions) Create key generator parameters Declaration protected override ECKeyGenerationParameters CreateKeyGenParameters(SecureRandom random, ECDomainParameters parameters, CryptoOptions options) Parameters Type Name Description SecureRandom random Random ECDomainParameters parameters Engine parameters CryptoOptions options Options Returns Type Description ECKeyGenerationParameters Key generator parameters Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaAlgorithm>.CreateKeyGenParameters(SecureRandom, ECDomainParameters, CryptoOptions) | Edit this page View Source GetEngineParameters(CryptoOptions) Get the cipher engine parameters Declaration protected override ECDomainParameters GetEngineParameters(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description ECDomainParameters Parameters Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey, ECKeyGenerationParameters, ECDomainParameters, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaAlgorithm>.GetEngineParameters(CryptoOptions) Implements IEquatable<T> wan24.Crypto.IAsymmetricAlgorithm wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricBcEcDsaPrivateKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricBcEcDsaPrivateKey.html",
    "title": "Class AsymmetricBcEcDsaPrivateKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricBcEcDsaPrivateKey Asymmetric EC DSA private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey> BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaPrivateKey> BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaPrivateKey> AsymmetricBcEcDsaPrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaPrivateKey>> IEquatable<BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaPrivateKey>> ISignaturePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricBcEcDsaPrivateKey> Inherited Members BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaPrivateKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaPrivateKey>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaPrivateKey>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaPrivateKey>.Bits BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaPrivateKey>.ExportBc() BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaPrivateKey>.ImportBc(in byte[]) AsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.GetCopy() AsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.ToString() AsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.GetHashCode() AsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.Equals(object) AsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.Equals(AsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>) AsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.<Clone>$() AsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.PublicKey AsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricBcEcDsaPrivateKey : BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaPrivateKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaPrivateKey>>, IEquatable<BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaPrivateKey>>, ISignaturePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricBcEcDsaPrivateKey> Constructors | Edit this page View Source AsymmetricBcEcDsaPrivateKey() Constructor Declaration public AsymmetricBcEcDsaPrivateKey() | Edit this page View Source AsymmetricBcEcDsaPrivateKey(AsymmetricCipherKeyPair) Constructor Declaration public AsymmetricBcEcDsaPrivateKey(AsymmetricCipherKeyPair keys) Parameters Type Name Description AsymmetricCipherKeyPair keys Keys | Edit this page View Source AsymmetricBcEcDsaPrivateKey(ECPrivateKeyParameters) Constructor Declaration public AsymmetricBcEcDsaPrivateKey(ECPrivateKeyParameters privateKey) Parameters Type Name Description ECPrivateKeyParameters privateKey Private key | Edit this page View Source AsymmetricBcEcDsaPrivateKey(byte[]) Constructor Declaration public AsymmetricBcEcDsaPrivateKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricBcEcDsaPublicKey, wan24.Crypto.BC.AsymmetricBcEcDsaPrivateKey>.DisposeCore() | Edit this page View Source GetPublicKey(ECPrivateKeyParameters) Get the public key from a private key Declaration protected override ECPublicKeyParameters GetPublicKey(ECPrivateKeyParameters privateKey) Parameters Type Name Description ECPrivateKeyParameters privateKey Private key Returns Type Description ECPublicKeyParameters Public key Overrides BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, ECPrivateKeyParameters, AsymmetricBcEcDsaPrivateKey>.GetPublicKey(ECPrivateKeyParameters) | Edit this page View Source SignHashRaw(byte[]) Declaration public override byte[] SignHashRaw(byte[] hash) Parameters Type Name Description byte[] hash Returns Type Description byte[] Overrides AsymmetricPrivateKeyBase<AsymmetricBcEcDsaPublicKey, AsymmetricBcEcDsaPrivateKey>.SignHashRaw(byte[]) Operators | Edit this page View Source explicit operator AsymmetricBcEcDsaPrivateKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricBcEcDsaPrivateKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricBcEcDsaPrivateKey | Edit this page View Source implicit operator AsymmetricBcEcDsaPublicKey(AsymmetricBcEcDsaPrivateKey) Cast to public key Declaration public static implicit operator AsymmetricBcEcDsaPublicKey(AsymmetricBcEcDsaPrivateKey privateKey) Parameters Type Name Description AsymmetricBcEcDsaPrivateKey privateKey Private key Returns Type Description AsymmetricBcEcDsaPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePrivateKey wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricBcEcDsaPublicKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricBcEcDsaPublicKey.html",
    "title": "Class AsymmetricBcEcDsaPublicKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricBcEcDsaPublicKey Asymmetric EC DSA public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDsaPublicKey> BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDsaPublicKey> AsymmetricBcEcDsaPublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDsaPublicKey>> IEquatable<BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDsaPublicKey>> ISignaturePublicKey IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricBcEcDsaPublicKey> Inherited Members BouncyCastleAsymmetricPublicKeyBase<AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDsaPublicKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPublicKeyBase<AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDsaPublicKey>.PublicKey BouncyCastleAsymmetricPublicKeyBase<AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDsaPublicKey>.ExportBc() BouncyCastleAsymmetricPublicKeyBase<AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDsaPublicKey>.GetCopy() BouncyCastleAsymmetricPublicKeyBase<AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDsaPublicKey>.ImportBc(in byte[]) AsymmetricPublicKeyBase.GetCopy() AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricBcEcDsaPublicKey : BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDsaPublicKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDsaPublicKey>>, IEquatable<BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricBcEcDsaAlgorithm, ECPublicKeyParameters, AsymmetricBcEcDsaPublicKey>>, ISignaturePublicKey, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricBcEcDsaPublicKey> Constructors | Edit this page View Source AsymmetricBcEcDsaPublicKey() Constructor Declaration public AsymmetricBcEcDsaPublicKey() | Edit this page View Source AsymmetricBcEcDsaPublicKey(ECPublicKeyParameters) Constructor Declaration public AsymmetricBcEcDsaPublicKey(ECPublicKeyParameters publicKey) Parameters Type Name Description ECPublicKeyParameters publicKey Public key | Edit this page View Source AsymmetricBcEcDsaPublicKey(byte[]) Constructor Declaration public AsymmetricBcEcDsaPublicKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides wan24.Crypto.AsymmetricKeyBase.Bits Methods | Edit this page View Source ValidateSignatureInt(SignatureContainer, bool) Validate a signature which was created using the private key Declaration protected override bool ValidateSignatureInt(SignatureContainer signature, bool throwOnError = true) Parameters Type Name Description SignatureContainer signature Signature bool throwOnError Throw an exception on validation error? Returns Type Description bool If the signature is valid Overrides AsymmetricPublicKeyBase.ValidateSignatureInt(SignatureContainer, bool) | Edit this page View Source ValidateSignatureRaw(byte[], byte[], bool) Declaration public override bool ValidateSignatureRaw(byte[] signature, byte[] signedHash, bool throwOnError = true) Parameters Type Name Description byte[] signature byte[] signedHash bool throwOnError Returns Type Description bool Overrides AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) Operators | Edit this page View Source explicit operator AsymmetricBcEcDsaPublicKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricBcEcDsaPublicKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricBcEcDsaPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePublicKey wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricBikeAlgorithm.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricBikeAlgorithm.html",
    "title": "Class AsymmetricBikeAlgorithm | wan24-Crypto-BC",
    "keywords": "Class AsymmetricBikeAlgorithm BIKE asymmetric algorithm Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey> BouncyCastleAsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey, BikeKeyGenerationParameters, BikeParameters, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikeAlgorithm> BouncyCastleAsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey, BikeKeyPairGenerator, BikeKeyGenerationParameters, BikeParameters, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikeAlgorithm> AsymmetricBikeAlgorithm Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey, BikeKeyGenerationParameters, BikeParameters, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikeAlgorithm>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey, BikeKeyPairGenerator, BikeKeyGenerationParameters, BikeParameters, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikeAlgorithm>> IEquatable<AsymmetricBikeAlgorithm> Inherited Members BouncyCastleAsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey, BikeKeyPairGenerator, BikeKeyGenerationParameters, BikeParameters, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikeAlgorithm>.CreateKeyPair(CryptoOptions) BouncyCastleAsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey, BikeKeyGenerationParameters, BikeParameters, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikeAlgorithm>.Instance BouncyCastleAsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey, BikeKeyGenerationParameters, BikeParameters, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikeAlgorithm>.Usages BouncyCastleAsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey, BikeKeyGenerationParameters, BikeParameters, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikeAlgorithm>.IsEllipticCurveAlgorithm BouncyCastleAsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey, BikeKeyGenerationParameters, BikeParameters, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikeAlgorithm>.AllowedKeySizes BouncyCastleAsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey, BikeKeyGenerationParameters, BikeParameters, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikeAlgorithm>.IsPostQuantum BouncyCastleAsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey, BikeKeyGenerationParameters, BikeParameters, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikeAlgorithm>.DeserializePrivateKeyV1(byte[]) BouncyCastleAsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey, BikeKeyGenerationParameters, BikeParameters, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikeAlgorithm>.Register() AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.EnsureDefaultOptions(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.EnsureAllowed(in bool) AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.CreateKeyPair(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.CreateKeyPairAsync(CryptoOptions, CancellationToken) AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.DeserializePublicKey(byte[]) AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.DeserializePrivateKey(byte[]) AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.DeserializePrivateKeyV1(byte[]) AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.DeriveKey(byte[], CryptoOptions) AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.CanHandleNetAlgorithm(AsymmetricAlgorithm) AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.ToString() AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.GetHashCode() AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.Equals(object) AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.Equals(CryptoAlgorithmBase) AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.Equals(AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>) AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.<Clone>$() AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.PrivateKeyType AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.PublicKeyType AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.DefaultOptions AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.DefaultAlgorithmOptions AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.Usages AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.CanExchangeKey AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.CanSign AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.IsEllipticCurveAlgorithm AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.IsPublicKeyStandardFormat AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.AllowedKeySizes AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.DefaultKeySize AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.IsDenied AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.KeyPool AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.GetHashCode() CryptoAlgorithmBase.Equals(object) CryptoAlgorithmBase.Equals(CryptoAlgorithmBase) CryptoAlgorithmBase.<Clone>$() CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.State object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricBikeAlgorithm : BouncyCastleAsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey, BikeKeyPairGenerator, BikeKeyGenerationParameters, BikeParameters, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikeAlgorithm>, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey, BikeKeyGenerationParameters, BikeParameters, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikeAlgorithm>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey, BikeKeyPairGenerator, BikeKeyGenerationParameters, BikeParameters, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikeAlgorithm>>, IEquatable<AsymmetricBikeAlgorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"BIKE\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 15 Field Value Type Description int | Edit this page View Source DEFAULT_KEY_SIZE Default key size in bits Declaration public const int DEFAULT_KEY_SIZE = 256 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"BIKE\" Field Value Type Description string | Edit this page View Source USAGES Algorithm usages Declaration public const AsymmetricAlgorithmUsages USAGES = KeyExchange Field Value Type Description AsymmetricAlgorithmUsages Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPublicKeyStandardFormat Is the public key exported in a standard format? Declaration public override bool IsPublicKeyStandardFormat { get; } Property Value Type Description bool Overrides wan24.Crypto.AsymmetricAlgorithmBase<wan24.Crypto.BC.AsymmetricBikePublicKey, wan24.Crypto.BC.AsymmetricBikePrivateKey>.IsPublicKeyStandardFormat Methods | Edit this page View Source GetEngineParameters(CryptoOptions) Get the cipher engine parameters Declaration protected override BikeParameters GetEngineParameters(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description BikeParameters Parameters Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey, BikeKeyGenerationParameters, BikeParameters, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikeAlgorithm>.GetEngineParameters(CryptoOptions) Implements IEquatable<T> wan24.Crypto.IAsymmetricAlgorithm wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricBikeHelper.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricBikeHelper.html",
    "title": "Class AsymmetricBikeHelper | wan24-Crypto-BC",
    "keywords": "Class AsymmetricBikeHelper BIKE asymmetric algorithm helper Inheritance object AsymmetricBikeHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public static class AsymmetricBikeHelper Methods | Edit this page View Source GetKeySize(BikeParameters) Get the key size in bits Declaration public static int GetKeySize(this BikeParameters param) Parameters Type Name Description BikeParameters param Parameters Returns Type Description int Key size in bits | Edit this page View Source GetParameters(int) Get the BIKE parameters Declaration public static BikeParameters GetParameters(int keySize) Parameters Type Name Description int keySize Key size in bits Returns Type Description BikeParameters Parameters"
  },
  "api/wan24.Crypto.BC.AsymmetricBikePrivateKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricBikePrivateKey.html",
    "title": "Class AsymmetricBikePrivateKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricBikePrivateKey BIKE asymmetric private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey> BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikeAlgorithm, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikePrivateKey> BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikeAlgorithm, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikePrivateKey> BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricBikePublicKey, AsymmetricBikeAlgorithm, BikePublicKeyParameters, BikePrivateKeyParameters, BikeKemGenerator, BikeKemExtractor, AsymmetricBikePrivateKey> AsymmetricBikePrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikeAlgorithm, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikePrivateKey>> IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikeAlgorithm, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikePrivateKey>> IKeyExchangePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IKeyExchange IEquatable<BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricBikePublicKey, AsymmetricBikeAlgorithm, BikePublicKeyParameters, BikePrivateKeyParameters, BikeKemGenerator, BikeKemExtractor, AsymmetricBikePrivateKey>> IEquatable<AsymmetricBikePrivateKey> Inherited Members BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricBikePublicKey, AsymmetricBikeAlgorithm, BikePublicKeyParameters, BikePrivateKeyParameters, BikeKemGenerator, BikeKemExtractor, AsymmetricBikePrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricBikePublicKey, AsymmetricBikeAlgorithm, BikePublicKeyParameters, BikePrivateKeyParameters, BikeKemGenerator, BikeKemExtractor, AsymmetricBikePrivateKey>.DeriveKey(byte[]) BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricBikePublicKey, AsymmetricBikeAlgorithm, BikePublicKeyParameters, BikePrivateKeyParameters, BikeKemGenerator, BikeKemExtractor, AsymmetricBikePrivateKey>.DeriveKey(IAsymmetricPublicKey) BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikeAlgorithm, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikePrivateKey>.ExportBc() BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikeAlgorithm, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikePrivateKey>.ImportBc(in byte[]) BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikeAlgorithm, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikePrivateKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikeAlgorithm, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikePrivateKey>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikeAlgorithm, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikePrivateKey>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikeAlgorithm, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikePrivateKey>.Bits AsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.GetCopy() AsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.ToString() AsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.GetHashCode() AsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.Equals(object) AsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.Equals(AsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>) AsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.<Clone>$() AsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.PublicKey AsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricBikePrivateKey : BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricBikePublicKey, AsymmetricBikeAlgorithm, BikePublicKeyParameters, BikePrivateKeyParameters, BikeKemGenerator, BikeKemExtractor, AsymmetricBikePrivateKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikeAlgorithm, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikePrivateKey>>, IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikeAlgorithm, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikePrivateKey>>, IKeyExchangePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IKeyExchange, IEquatable<BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricBikePublicKey, AsymmetricBikeAlgorithm, BikePublicKeyParameters, BikePrivateKeyParameters, BikeKemGenerator, BikeKemExtractor, AsymmetricBikePrivateKey>>, IEquatable<AsymmetricBikePrivateKey> Constructors | Edit this page View Source AsymmetricBikePrivateKey() Constructor Declaration public AsymmetricBikePrivateKey() | Edit this page View Source AsymmetricBikePrivateKey(AsymmetricCipherKeyPair) Constructor Declaration public AsymmetricBikePrivateKey(AsymmetricCipherKeyPair keys) Parameters Type Name Description AsymmetricCipherKeyPair keys Keys | Edit this page View Source AsymmetricBikePrivateKey(byte[]) Constructor Declaration public AsymmetricBikePrivateKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source IsBcImportExportImplemented Declaration public static bool IsBcImportExportImplemented { get; } Property Value Type Description bool Methods | Edit this page View Source DeserializeKeyData() Deserialize the key data Declaration protected override void DeserializeKeyData() Overrides BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikeAlgorithm, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikePrivateKey>.DeserializeKeyData() | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikePrivateKey>.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricBikePublicKey, wan24.Crypto.BC.AsymmetricBikePrivateKey>.DisposeCore() | Edit this page View Source GetPublicKey(BikePrivateKeyParameters) Get the public key from a private key Declaration protected override BikePublicKeyParameters GetPublicKey(BikePrivateKeyParameters privateKey) Parameters Type Name Description BikePrivateKeyParameters privateKey Private key Returns Type Description BikePublicKeyParameters Public key Overrides BouncyCastleAsymmetricPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikeAlgorithm, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikePrivateKey>.GetPublicKey(BikePrivateKeyParameters) | Edit this page View Source SerializeKeyData() Serialize the key data Declaration protected override byte[] SerializeKeyData() Returns Type Description byte[] Serialized key data Overrides BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricBikePublicKey, AsymmetricBikeAlgorithm, BikePublicKeyParameters, BikePrivateKeyParameters, AsymmetricBikePrivateKey>.SerializeKeyData() Operators | Edit this page View Source explicit operator AsymmetricBikePrivateKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricBikePrivateKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricBikePrivateKey | Edit this page View Source implicit operator AsymmetricBikePublicKey(AsymmetricBikePrivateKey) Cast to public key Declaration public static implicit operator AsymmetricBikePublicKey(AsymmetricBikePrivateKey privateKey) Parameters Type Name Description AsymmetricBikePrivateKey privateKey Private key Returns Type Description AsymmetricBikePublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.IKeyExchangePrivateKey wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider wan24.Crypto.IKeyExchange IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricBikePublicKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricBikePublicKey.html",
    "title": "Class AsymmetricBikePublicKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricBikePublicKey BIKE asymmetric public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<AsymmetricBikeAlgorithm, BikePublicKeyParameters, AsymmetricBikePublicKey> BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricBikeAlgorithm, BikePublicKeyParameters, AsymmetricBikePublicKey> AsymmetricBikePublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricBikeAlgorithm, BikePublicKeyParameters, AsymmetricBikePublicKey>> IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricBikeAlgorithm, BikePublicKeyParameters, AsymmetricBikePublicKey>> IEquatable<AsymmetricBikePublicKey> Inherited Members BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricBikeAlgorithm, BikePublicKeyParameters, AsymmetricBikePublicKey>.ExportBc() BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricBikeAlgorithm, BikePublicKeyParameters, AsymmetricBikePublicKey>.ImportBc(in byte[]) BouncyCastleAsymmetricPublicKeyBase<AsymmetricBikeAlgorithm, BikePublicKeyParameters, AsymmetricBikePublicKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPublicKeyBase<AsymmetricBikeAlgorithm, BikePublicKeyParameters, AsymmetricBikePublicKey>.PublicKey BouncyCastleAsymmetricPublicKeyBase<AsymmetricBikeAlgorithm, BikePublicKeyParameters, AsymmetricBikePublicKey>.GetCopy() AsymmetricPublicKeyBase.GetCopy() AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricBikePublicKey : BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricBikeAlgorithm, BikePublicKeyParameters, AsymmetricBikePublicKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricBikeAlgorithm, BikePublicKeyParameters, AsymmetricBikePublicKey>>, IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricBikeAlgorithm, BikePublicKeyParameters, AsymmetricBikePublicKey>>, IEquatable<AsymmetricBikePublicKey> Constructors | Edit this page View Source AsymmetricBikePublicKey() Constructor Declaration public AsymmetricBikePublicKey() | Edit this page View Source AsymmetricBikePublicKey(BikePublicKeyParameters) Constructor Declaration public AsymmetricBikePublicKey(BikePublicKeyParameters publicKey) Parameters Type Name Description BikePublicKeyParameters publicKey Public key | Edit this page View Source AsymmetricBikePublicKey(byte[]) Constructor Declaration public AsymmetricBikePublicKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides wan24.Crypto.AsymmetricKeyBase.Bits | Edit this page View Source IsBcImportExportImplemented Declaration public static bool IsBcImportExportImplemented { get; } Property Value Type Description bool Operators | Edit this page View Source explicit operator AsymmetricBikePublicKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricBikePublicKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricBikePublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricDilithiumAlgorithm.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricDilithiumAlgorithm.html",
    "title": "Class AsymmetricDilithiumAlgorithm | wan24-Crypto-BC",
    "keywords": "Class AsymmetricDilithiumAlgorithm CRYSTALS-Dilithium asymmetric algorithm Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey> BouncyCastleAsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey, DilithiumKeyGenerationParameters, DilithiumParameters, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumAlgorithm> BouncyCastleAsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey, DilithiumKeyPairGenerator, DilithiumKeyGenerationParameters, DilithiumParameters, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumAlgorithm> AsymmetricDilithiumAlgorithm Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey, DilithiumKeyGenerationParameters, DilithiumParameters, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumAlgorithm>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey, DilithiumKeyPairGenerator, DilithiumKeyGenerationParameters, DilithiumParameters, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumAlgorithm>> IEquatable<AsymmetricDilithiumAlgorithm> Inherited Members BouncyCastleAsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey, DilithiumKeyPairGenerator, DilithiumKeyGenerationParameters, DilithiumParameters, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumAlgorithm>.CreateKeyPair(CryptoOptions) BouncyCastleAsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey, DilithiumKeyGenerationParameters, DilithiumParameters, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumAlgorithm>.Instance BouncyCastleAsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey, DilithiumKeyGenerationParameters, DilithiumParameters, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumAlgorithm>.Usages BouncyCastleAsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey, DilithiumKeyGenerationParameters, DilithiumParameters, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumAlgorithm>.IsEllipticCurveAlgorithm BouncyCastleAsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey, DilithiumKeyGenerationParameters, DilithiumParameters, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumAlgorithm>.AllowedKeySizes BouncyCastleAsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey, DilithiumKeyGenerationParameters, DilithiumParameters, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumAlgorithm>.IsPostQuantum BouncyCastleAsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey, DilithiumKeyGenerationParameters, DilithiumParameters, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumAlgorithm>.DeserializePrivateKeyV1(byte[]) BouncyCastleAsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey, DilithiumKeyGenerationParameters, DilithiumParameters, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumAlgorithm>.Register() AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.EnsureDefaultOptions(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.EnsureAllowed(in bool) AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.CreateKeyPair(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.CreateKeyPairAsync(CryptoOptions, CancellationToken) AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.DeserializePublicKey(byte[]) AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.DeserializePrivateKey(byte[]) AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.DeserializePrivateKeyV1(byte[]) AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.DeriveKey(byte[], CryptoOptions) AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.CanHandleNetAlgorithm(AsymmetricAlgorithm) AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.ToString() AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.GetHashCode() AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.Equals(object) AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.Equals(CryptoAlgorithmBase) AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.Equals(AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>) AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.<Clone>$() AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.PrivateKeyType AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.PublicKeyType AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.DefaultOptions AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.DefaultAlgorithmOptions AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.Usages AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.CanExchangeKey AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.CanSign AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.IsEllipticCurveAlgorithm AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.IsPublicKeyStandardFormat AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.AllowedKeySizes AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.DefaultKeySize AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.IsDenied AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.KeyPool AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.GetHashCode() CryptoAlgorithmBase.Equals(object) CryptoAlgorithmBase.Equals(CryptoAlgorithmBase) CryptoAlgorithmBase.<Clone>$() CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.State object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricDilithiumAlgorithm : BouncyCastleAsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey, DilithiumKeyPairGenerator, DilithiumKeyGenerationParameters, DilithiumParameters, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumAlgorithm>, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey, DilithiumKeyGenerationParameters, DilithiumParameters, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumAlgorithm>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey, DilithiumKeyPairGenerator, DilithiumKeyGenerationParameters, DilithiumParameters, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumAlgorithm>>, IEquatable<AsymmetricDilithiumAlgorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"CRYSTALSDILITHIUM\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 3 Field Value Type Description int | Edit this page View Source DEFAULT_KEY_SIZE Default key size in bits Declaration public const int DEFAULT_KEY_SIZE = 1024 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"CRYSTALS-Dilithium\" Field Value Type Description string | Edit this page View Source USAGES Algorithm usages Declaration public const AsymmetricAlgorithmUsages USAGES = Signature Field Value Type Description AsymmetricAlgorithmUsages Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPublicKeyStandardFormat Is the public key exported in a standard format? Declaration public override bool IsPublicKeyStandardFormat { get; } Property Value Type Description bool Overrides wan24.Crypto.AsymmetricAlgorithmBase<wan24.Crypto.BC.AsymmetricDilithiumPublicKey, wan24.Crypto.BC.AsymmetricDilithiumPrivateKey>.IsPublicKeyStandardFormat Methods | Edit this page View Source GetEngineParameters(CryptoOptions) Get the cipher engine parameters Declaration protected override DilithiumParameters GetEngineParameters(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description DilithiumParameters Parameters Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey, DilithiumKeyGenerationParameters, DilithiumParameters, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumAlgorithm>.GetEngineParameters(CryptoOptions) Implements IEquatable<T> wan24.Crypto.IAsymmetricAlgorithm wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricDilithiumHelper.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricDilithiumHelper.html",
    "title": "Class AsymmetricDilithiumHelper | wan24-Crypto-BC",
    "keywords": "Class AsymmetricDilithiumHelper CRYSTALS-Dilithium helper Inheritance object AsymmetricDilithiumHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public static class AsymmetricDilithiumHelper Methods | Edit this page View Source GetKeySize(DilithiumParameters) Get the key size in bits Declaration public static int GetKeySize(this DilithiumParameters param) Parameters Type Name Description DilithiumParameters param Parameters Returns Type Description int Key size in bits | Edit this page View Source GetParameters(int) Get the CRYSTALS-Dilithium parameters Declaration public static DilithiumParameters GetParameters(int keySize) Parameters Type Name Description int keySize Key size in bits Returns Type Description DilithiumParameters Parameters"
  },
  "api/wan24.Crypto.BC.AsymmetricDilithiumPrivateKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricDilithiumPrivateKey.html",
    "title": "Class AsymmetricDilithiumPrivateKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricDilithiumPrivateKey CRYSTALS-Dilithium asymmetric private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey> BouncyCastleAsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumPrivateKey> BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumPrivateKey> BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, DilithiumSigner, AsymmetricDilithiumPrivateKey> AsymmetricDilithiumPrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumPrivateKey>> IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumPrivateKey>> ISignaturePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, DilithiumSigner, AsymmetricDilithiumPrivateKey>> IEquatable<AsymmetricDilithiumPrivateKey> Inherited Members BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, DilithiumSigner, AsymmetricDilithiumPrivateKey>.SignHashRaw(byte[]) BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumPrivateKey>.ExportBc() BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumPrivateKey>.ImportBc(in byte[]) BouncyCastleAsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumPrivateKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumPrivateKey>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumPrivateKey>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumPrivateKey>.Bits AsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.GetCopy() AsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.ToString() AsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.GetHashCode() AsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.Equals(object) AsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.Equals(AsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>) AsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.<Clone>$() AsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.PublicKey AsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricDilithiumPrivateKey : BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, DilithiumSigner, AsymmetricDilithiumPrivateKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumPrivateKey>>, IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumPrivateKey>>, ISignaturePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, DilithiumSigner, AsymmetricDilithiumPrivateKey>>, IEquatable<AsymmetricDilithiumPrivateKey> Constructors | Edit this page View Source AsymmetricDilithiumPrivateKey() Constructor Declaration public AsymmetricDilithiumPrivateKey() | Edit this page View Source AsymmetricDilithiumPrivateKey(AsymmetricCipherKeyPair) Constructor Declaration public AsymmetricDilithiumPrivateKey(AsymmetricCipherKeyPair keys) Parameters Type Name Description AsymmetricCipherKeyPair keys Keys | Edit this page View Source AsymmetricDilithiumPrivateKey(DilithiumPrivateKeyParameters) Constructor Declaration public AsymmetricDilithiumPrivateKey(DilithiumPrivateKeyParameters privateKey) Parameters Type Name Description DilithiumPrivateKeyParameters privateKey Private key | Edit this page View Source AsymmetricDilithiumPrivateKey(byte[]) Constructor Declaration public AsymmetricDilithiumPrivateKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumPrivateKey>.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricDilithiumPublicKey, wan24.Crypto.BC.AsymmetricDilithiumPrivateKey>.DisposeCore() | Edit this page View Source GetPublicKey(DilithiumPrivateKeyParameters) Get the public key from a private key Declaration protected override DilithiumPublicKeyParameters GetPublicKey(DilithiumPrivateKeyParameters privateKey) Parameters Type Name Description DilithiumPrivateKeyParameters privateKey Private key Returns Type Description DilithiumPublicKeyParameters Public key Overrides BouncyCastleAsymmetricPrivateKeyBase<AsymmetricDilithiumPublicKey, AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, DilithiumPrivateKeyParameters, AsymmetricDilithiumPrivateKey>.GetPublicKey(DilithiumPrivateKeyParameters) Operators | Edit this page View Source explicit operator AsymmetricDilithiumPrivateKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricDilithiumPrivateKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricDilithiumPrivateKey | Edit this page View Source implicit operator AsymmetricDilithiumPublicKey(AsymmetricDilithiumPrivateKey) Cast to public key Declaration public static implicit operator AsymmetricDilithiumPublicKey(AsymmetricDilithiumPrivateKey privateKey) Parameters Type Name Description AsymmetricDilithiumPrivateKey privateKey Private key Returns Type Description AsymmetricDilithiumPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePrivateKey wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricDilithiumPublicKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricDilithiumPublicKey.html",
    "title": "Class AsymmetricDilithiumPublicKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricDilithiumPublicKey CRYSTALS-Dilithium asymmetric public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, AsymmetricDilithiumPublicKey> BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, AsymmetricDilithiumPublicKey> BouncyCastleAsymmetricPqcPublicSignatureKeyBase<AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, DilithiumSigner, AsymmetricDilithiumPublicKey> AsymmetricDilithiumPublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, AsymmetricDilithiumPublicKey>> IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, AsymmetricDilithiumPublicKey>> ISignaturePublicKey IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<BouncyCastleAsymmetricPqcPublicSignatureKeyBase<AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, DilithiumSigner, AsymmetricDilithiumPublicKey>> IEquatable<AsymmetricDilithiumPublicKey> Inherited Members BouncyCastleAsymmetricPqcPublicSignatureKeyBase<AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, DilithiumSigner, AsymmetricDilithiumPublicKey>.ValidateSignatureRaw(byte[], byte[], bool) BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, AsymmetricDilithiumPublicKey>.ExportBc() BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, AsymmetricDilithiumPublicKey>.ImportBc(in byte[]) BouncyCastleAsymmetricPublicKeyBase<AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, AsymmetricDilithiumPublicKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPublicKeyBase<AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, AsymmetricDilithiumPublicKey>.PublicKey BouncyCastleAsymmetricPublicKeyBase<AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, AsymmetricDilithiumPublicKey>.GetCopy() AsymmetricPublicKeyBase.GetCopy() AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricDilithiumPublicKey : BouncyCastleAsymmetricPqcPublicSignatureKeyBase<AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, DilithiumSigner, AsymmetricDilithiumPublicKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, AsymmetricDilithiumPublicKey>>, IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, AsymmetricDilithiumPublicKey>>, ISignaturePublicKey, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<BouncyCastleAsymmetricPqcPublicSignatureKeyBase<AsymmetricDilithiumAlgorithm, DilithiumPublicKeyParameters, DilithiumSigner, AsymmetricDilithiumPublicKey>>, IEquatable<AsymmetricDilithiumPublicKey> Constructors | Edit this page View Source AsymmetricDilithiumPublicKey() Constructor Declaration public AsymmetricDilithiumPublicKey() | Edit this page View Source AsymmetricDilithiumPublicKey(DilithiumPublicKeyParameters) Constructor Declaration public AsymmetricDilithiumPublicKey(DilithiumPublicKeyParameters publicKey) Parameters Type Name Description DilithiumPublicKeyParameters publicKey Public key | Edit this page View Source AsymmetricDilithiumPublicKey(byte[]) Constructor Declaration public AsymmetricDilithiumPublicKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides wan24.Crypto.AsymmetricKeyBase.Bits Operators | Edit this page View Source explicit operator AsymmetricDilithiumPublicKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricDilithiumPublicKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricDilithiumPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePublicKey wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricEd25519Algorithm.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricEd25519Algorithm.html",
    "title": "Class AsymmetricEd25519Algorithm | wan24-Crypto-BC",
    "keywords": "Class AsymmetricEd25519Algorithm Ed25519 asymmetric algorithm (128 bit security) Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey> BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519Algorithm> BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey, Ed25519KeyPairGenerator, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519Algorithm> AsymmetricEd25519Algorithm Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519Algorithm>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey, Ed25519KeyPairGenerator, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519Algorithm>> IEquatable<AsymmetricEd25519Algorithm> Inherited Members BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey, Ed25519KeyPairGenerator, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519Algorithm>.CreateKeyPair(CryptoOptions) BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519Algorithm>.Instance BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519Algorithm>.Usages BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519Algorithm>.IsEllipticCurveAlgorithm BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519Algorithm>.AllowedKeySizes BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519Algorithm>.IsPostQuantum BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519Algorithm>.DeserializePrivateKeyV1(byte[]) BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519Algorithm>.Register() AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.EnsureDefaultOptions(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.EnsureAllowed(in bool) AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.CreateKeyPair(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.CreateKeyPairAsync(CryptoOptions, CancellationToken) AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.DeserializePublicKey(byte[]) AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.DeserializePrivateKey(byte[]) AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.DeserializePrivateKeyV1(byte[]) AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.DeriveKey(byte[], CryptoOptions) AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.CanHandleNetAlgorithm(AsymmetricAlgorithm) AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.ToString() AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.GetHashCode() AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.Equals(object) AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.Equals(CryptoAlgorithmBase) AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.Equals(AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>) AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.<Clone>$() AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.PrivateKeyType AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.PublicKeyType AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.DefaultOptions AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.DefaultAlgorithmOptions AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.Usages AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.CanExchangeKey AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.CanSign AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.IsEllipticCurveAlgorithm AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.IsPublicKeyStandardFormat AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.AllowedKeySizes AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.DefaultKeySize AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.IsDenied AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.KeyPool AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.GetHashCode() CryptoAlgorithmBase.Equals(object) CryptoAlgorithmBase.Equals(CryptoAlgorithmBase) CryptoAlgorithmBase.<Clone>$() CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.State object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricEd25519Algorithm : BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey, Ed25519KeyPairGenerator, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519Algorithm>, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519Algorithm>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey, Ed25519KeyPairGenerator, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519Algorithm>>, IEquatable<AsymmetricEd25519Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"ED25519\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 8 Field Value Type Description int | Edit this page View Source DEFAULT_KEY_SIZE Default key size in bits Declaration public const int DEFAULT_KEY_SIZE = 256 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"Ed25519\" Field Value Type Description string | Edit this page View Source USAGES Algorithm usages Declaration public const AsymmetricAlgorithmUsages USAGES = Signature Field Value Type Description AsymmetricAlgorithmUsages Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPublicKeyStandardFormat Is the public key exported in a standard format? Declaration public override bool IsPublicKeyStandardFormat { get; } Property Value Type Description bool Overrides wan24.Crypto.AsymmetricAlgorithmBase<wan24.Crypto.BC.AsymmetricEd25519PublicKey, wan24.Crypto.BC.AsymmetricEd25519PrivateKey>.IsPublicKeyStandardFormat Methods | Edit this page View Source CreateKeyPair(CryptoOptions?) Declaration public override AsymmetricEd25519PrivateKey CreateKeyPair(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Returns Type Description AsymmetricEd25519PrivateKey Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey, Ed25519KeyPairGenerator, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519Algorithm>.CreateKeyPair(CryptoOptions) | Edit this page View Source GetEngineParameters(CryptoOptions) Get the cipher engine parameters Declaration protected override AsymmetricKeyParameter GetEngineParameters(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description AsymmetricKeyParameter Parameters Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519Algorithm>.GetEngineParameters(CryptoOptions) Implements IEquatable<T> wan24.Crypto.IAsymmetricAlgorithm wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricEd25519PrivateKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricEd25519PrivateKey.html",
    "title": "Class AsymmetricEd25519PrivateKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricEd25519PrivateKey Ed25519 asymmetric private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey> BouncyCastleAsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519PrivateKey> BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519PrivateKey> BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, Ed25519Signer, AsymmetricEd25519PrivateKey> AsymmetricEd25519PrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519PrivateKey>> IEquatable<BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519PrivateKey>> ISignaturePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, Ed25519Signer, AsymmetricEd25519PrivateKey>> IEquatable<AsymmetricEd25519PrivateKey> Inherited Members BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, Ed25519Signer, AsymmetricEd25519PrivateKey>.SignHashRaw(byte[]) BouncyCastleAsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519PrivateKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519PrivateKey>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519PrivateKey>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519PrivateKey>.Bits BouncyCastleAsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519PrivateKey>.ExportBc() BouncyCastleAsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519PrivateKey>.ImportBc(in byte[]) AsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.GetCopy() AsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.ToString() AsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.GetHashCode() AsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.Equals(object) AsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.Equals(AsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>) AsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.<Clone>$() AsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.PublicKey AsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricEd25519PrivateKey : BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, Ed25519Signer, AsymmetricEd25519PrivateKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519PrivateKey>>, IEquatable<BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519PrivateKey>>, ISignaturePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, Ed25519Signer, AsymmetricEd25519PrivateKey>>, IEquatable<AsymmetricEd25519PrivateKey> Constructors | Edit this page View Source AsymmetricEd25519PrivateKey() Constructor Declaration public AsymmetricEd25519PrivateKey() | Edit this page View Source AsymmetricEd25519PrivateKey(AsymmetricCipherKeyPair) Constructor Declaration public AsymmetricEd25519PrivateKey(AsymmetricCipherKeyPair keys) Parameters Type Name Description AsymmetricCipherKeyPair keys Keys | Edit this page View Source AsymmetricEd25519PrivateKey(Ed25519PrivateKeyParameters) Constructor Declaration public AsymmetricEd25519PrivateKey(Ed25519PrivateKeyParameters privateKey) Parameters Type Name Description Ed25519PrivateKeyParameters privateKey Private key | Edit this page View Source AsymmetricEd25519PrivateKey(byte[]) Constructor Declaration public AsymmetricEd25519PrivateKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Methods | Edit this page View Source CreateXEd25519PrivateKey() Create a XEd25519 private key instance Declaration public AsymmetricXEd25519PrivateKey CreateXEd25519PrivateKey() Returns Type Description AsymmetricXEd25519PrivateKey XEd25519 private key (don't forget to dispose!) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519PrivateKey>.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricEd25519PublicKey, wan24.Crypto.BC.AsymmetricEd25519PrivateKey>.DisposeCore() | Edit this page View Source GetPublicKey(Ed25519PrivateKeyParameters) Get the public key from a private key Declaration protected override Ed25519PublicKeyParameters GetPublicKey(Ed25519PrivateKeyParameters privateKey) Parameters Type Name Description Ed25519PrivateKeyParameters privateKey Private key Returns Type Description Ed25519PublicKeyParameters Public key Overrides BouncyCastleAsymmetricPrivateKeyBase<AsymmetricEd25519PublicKey, AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricEd25519PrivateKey>.GetPublicKey(Ed25519PrivateKeyParameters) Operators | Edit this page View Source explicit operator AsymmetricEd25519PrivateKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricEd25519PrivateKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricEd25519PrivateKey | Edit this page View Source implicit operator AsymmetricEd25519PublicKey(AsymmetricEd25519PrivateKey) Cast to public key Declaration public static implicit operator AsymmetricEd25519PublicKey(AsymmetricEd25519PrivateKey privateKey) Parameters Type Name Description AsymmetricEd25519PrivateKey privateKey Private key Returns Type Description AsymmetricEd25519PublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePrivateKey wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricEd25519PublicKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricEd25519PublicKey.html",
    "title": "Class AsymmetricEd25519PublicKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricEd25519PublicKey Ed25519 asymmetric public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricEd25519PublicKey> BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricEd25519PublicKey> BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase<AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519Signer, AsymmetricEd25519PublicKey> AsymmetricEd25519PublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricEd25519PublicKey>> IEquatable<BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricEd25519PublicKey>> ISignaturePublicKey IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase<AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519Signer, AsymmetricEd25519PublicKey>> IEquatable<AsymmetricEd25519PublicKey> Inherited Members BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase<AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519Signer, AsymmetricEd25519PublicKey>.ValidateSignatureRaw(byte[], byte[], bool) BouncyCastleAsymmetricPublicKeyBase<AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricEd25519PublicKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPublicKeyBase<AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricEd25519PublicKey>.PublicKey BouncyCastleAsymmetricPublicKeyBase<AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricEd25519PublicKey>.ExportBc() BouncyCastleAsymmetricPublicKeyBase<AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricEd25519PublicKey>.GetCopy() BouncyCastleAsymmetricPublicKeyBase<AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricEd25519PublicKey>.ImportBc(in byte[]) AsymmetricPublicKeyBase.GetCopy() AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricEd25519PublicKey : BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase<AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519Signer, AsymmetricEd25519PublicKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricEd25519PublicKey>>, IEquatable<BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricEd25519PublicKey>>, ISignaturePublicKey, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase<AsymmetricEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519Signer, AsymmetricEd25519PublicKey>>, IEquatable<AsymmetricEd25519PublicKey> Constructors | Edit this page View Source AsymmetricEd25519PublicKey() Constructor Declaration public AsymmetricEd25519PublicKey() | Edit this page View Source AsymmetricEd25519PublicKey(Ed25519PublicKeyParameters) Constructor Declaration public AsymmetricEd25519PublicKey(Ed25519PublicKeyParameters publicKey) Parameters Type Name Description Ed25519PublicKeyParameters publicKey Public key | Edit this page View Source AsymmetricEd25519PublicKey(byte[]) Constructor Declaration public AsymmetricEd25519PublicKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides wan24.Crypto.AsymmetricKeyBase.Bits Operators | Edit this page View Source explicit operator AsymmetricEd25519PublicKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricEd25519PublicKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricEd25519PublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePublicKey wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricEd448Algorithm.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricEd448Algorithm.html",
    "title": "Class AsymmetricEd448Algorithm | wan24-Crypto-BC",
    "keywords": "Class AsymmetricEd448Algorithm Ed448 asymmetric algorithm (224 bit security) Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey> BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448Algorithm> BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey, Ed448KeyPairGenerator, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448Algorithm> AsymmetricEd448Algorithm Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448Algorithm>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey, Ed448KeyPairGenerator, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448Algorithm>> IEquatable<AsymmetricEd448Algorithm> Inherited Members BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey, Ed448KeyPairGenerator, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448Algorithm>.CreateKeyPair(CryptoOptions) BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448Algorithm>.Instance BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448Algorithm>.Usages BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448Algorithm>.IsEllipticCurveAlgorithm BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448Algorithm>.AllowedKeySizes BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448Algorithm>.IsPostQuantum BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448Algorithm>.DeserializePrivateKeyV1(byte[]) BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448Algorithm>.Register() AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.EnsureDefaultOptions(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.EnsureAllowed(in bool) AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.CreateKeyPair(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.CreateKeyPairAsync(CryptoOptions, CancellationToken) AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.DeserializePublicKey(byte[]) AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.DeserializePrivateKey(byte[]) AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.DeserializePrivateKeyV1(byte[]) AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.DeriveKey(byte[], CryptoOptions) AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.CanHandleNetAlgorithm(AsymmetricAlgorithm) AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.ToString() AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.GetHashCode() AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.Equals(object) AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.Equals(CryptoAlgorithmBase) AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.Equals(AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>) AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.<Clone>$() AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.PrivateKeyType AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.PublicKeyType AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.DefaultOptions AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.DefaultAlgorithmOptions AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.Usages AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.CanExchangeKey AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.CanSign AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.IsEllipticCurveAlgorithm AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.IsPublicKeyStandardFormat AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.AllowedKeySizes AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.DefaultKeySize AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.IsDenied AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.KeyPool AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.GetHashCode() CryptoAlgorithmBase.Equals(object) CryptoAlgorithmBase.Equals(CryptoAlgorithmBase) CryptoAlgorithmBase.<Clone>$() CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.State object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricEd448Algorithm : BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey, Ed448KeyPairGenerator, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448Algorithm>, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448Algorithm>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey, Ed448KeyPairGenerator, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448Algorithm>>, IEquatable<AsymmetricEd448Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"ED448\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 9 Field Value Type Description int | Edit this page View Source DEFAULT_KEY_SIZE Default key size in bits Declaration public const int DEFAULT_KEY_SIZE = 456 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"edwards448-Goldilocks\" Field Value Type Description string | Edit this page View Source USAGES Algorithm usages Declaration public const AsymmetricAlgorithmUsages USAGES = Signature Field Value Type Description AsymmetricAlgorithmUsages Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPublicKeyStandardFormat Is the public key exported in a standard format? Declaration public override bool IsPublicKeyStandardFormat { get; } Property Value Type Description bool Overrides wan24.Crypto.AsymmetricAlgorithmBase<wan24.Crypto.BC.AsymmetricEd448PublicKey, wan24.Crypto.BC.AsymmetricEd448PrivateKey>.IsPublicKeyStandardFormat Methods | Edit this page View Source CreateKeyPair(CryptoOptions?) Declaration public override AsymmetricEd448PrivateKey CreateKeyPair(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Returns Type Description AsymmetricEd448PrivateKey Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey, Ed448KeyPairGenerator, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448Algorithm>.CreateKeyPair(CryptoOptions) | Edit this page View Source GetEngineParameters(CryptoOptions) Get the cipher engine parameters Declaration protected override AsymmetricKeyParameter GetEngineParameters(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description AsymmetricKeyParameter Parameters Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448Algorithm>.GetEngineParameters(CryptoOptions) Implements IEquatable<T> wan24.Crypto.IAsymmetricAlgorithm wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricEd448PrivateKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricEd448PrivateKey.html",
    "title": "Class AsymmetricEd448PrivateKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricEd448PrivateKey Ed448 asymmetric private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey> BouncyCastleAsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448PrivateKey> BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448PrivateKey> BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2<AsymmetricEd448PublicKey, AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, Ed448Signer, AsymmetricEd448PrivateKey> AsymmetricEd448PrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448PrivateKey>> IEquatable<BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448PrivateKey>> ISignaturePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2<AsymmetricEd448PublicKey, AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, Ed448Signer, AsymmetricEd448PrivateKey>> IEquatable<AsymmetricEd448PrivateKey> Inherited Members BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2<AsymmetricEd448PublicKey, AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, Ed448Signer, AsymmetricEd448PrivateKey>.SignHashRaw(byte[]) BouncyCastleAsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448PrivateKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448PrivateKey>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448PrivateKey>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448PrivateKey>.Bits BouncyCastleAsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448PrivateKey>.ExportBc() BouncyCastleAsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448PrivateKey>.ImportBc(in byte[]) AsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.GetCopy() AsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.ToString() AsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.GetHashCode() AsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.Equals(object) AsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.Equals(AsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>) AsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.<Clone>$() AsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.PublicKey AsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricEd448PrivateKey : BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2<AsymmetricEd448PublicKey, AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, Ed448Signer, AsymmetricEd448PrivateKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448PrivateKey>>, IEquatable<BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448PrivateKey>>, ISignaturePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2<AsymmetricEd448PublicKey, AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, Ed448Signer, AsymmetricEd448PrivateKey>>, IEquatable<AsymmetricEd448PrivateKey> Constructors | Edit this page View Source AsymmetricEd448PrivateKey() Constructor Declaration public AsymmetricEd448PrivateKey() | Edit this page View Source AsymmetricEd448PrivateKey(AsymmetricCipherKeyPair) Constructor Declaration public AsymmetricEd448PrivateKey(AsymmetricCipherKeyPair keys) Parameters Type Name Description AsymmetricCipherKeyPair keys Keys | Edit this page View Source AsymmetricEd448PrivateKey(Ed448PrivateKeyParameters) Constructor Declaration public AsymmetricEd448PrivateKey(Ed448PrivateKeyParameters privateKey) Parameters Type Name Description Ed448PrivateKeyParameters privateKey Private key | Edit this page View Source AsymmetricEd448PrivateKey(byte[]) Constructor Declaration public AsymmetricEd448PrivateKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides BouncyCastleAsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448PrivateKey>.Bits Methods | Edit this page View Source CreateXEd448PrivateKey() Create a XEd448 private key instance Declaration public AsymmetricXEd448PrivateKey CreateXEd448PrivateKey() Returns Type Description AsymmetricXEd448PrivateKey XEd448 private key (don't forget to dispose!) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448PrivateKey>.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricEd448PublicKey, wan24.Crypto.BC.AsymmetricEd448PrivateKey>.DisposeCore() | Edit this page View Source GetPublicKey(Ed448PrivateKeyParameters) Get the public key from a private key Declaration protected override Ed448PublicKeyParameters GetPublicKey(Ed448PrivateKeyParameters privateKey) Parameters Type Name Description Ed448PrivateKeyParameters privateKey Private key Returns Type Description Ed448PublicKeyParameters Public key Overrides BouncyCastleAsymmetricPrivateKeyBase<AsymmetricEd448PublicKey, AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricEd448PrivateKey>.GetPublicKey(Ed448PrivateKeyParameters) Operators | Edit this page View Source explicit operator AsymmetricEd448PrivateKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricEd448PrivateKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricEd448PrivateKey | Edit this page View Source implicit operator AsymmetricEd448PublicKey(AsymmetricEd448PrivateKey) Cast to public key Declaration public static implicit operator AsymmetricEd448PublicKey(AsymmetricEd448PrivateKey privateKey) Parameters Type Name Description AsymmetricEd448PrivateKey privateKey Private key Returns Type Description AsymmetricEd448PublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePrivateKey wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricEd448PublicKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricEd448PublicKey.html",
    "title": "Class AsymmetricEd448PublicKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricEd448PublicKey Ed448 asymmetric public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<AsymmetricEd448Algorithm, Ed448PublicKeyParameters, AsymmetricEd448PublicKey> BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricEd448Algorithm, Ed448PublicKeyParameters, AsymmetricEd448PublicKey> BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2<AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448Signer, AsymmetricEd448PublicKey> AsymmetricEd448PublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricEd448Algorithm, Ed448PublicKeyParameters, AsymmetricEd448PublicKey>> IEquatable<BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricEd448Algorithm, Ed448PublicKeyParameters, AsymmetricEd448PublicKey>> ISignaturePublicKey IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2<AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448Signer, AsymmetricEd448PublicKey>> IEquatable<AsymmetricEd448PublicKey> Inherited Members BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2<AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448Signer, AsymmetricEd448PublicKey>.ValidateSignatureRaw(byte[], byte[], bool) BouncyCastleAsymmetricPublicKeyBase<AsymmetricEd448Algorithm, Ed448PublicKeyParameters, AsymmetricEd448PublicKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPublicKeyBase<AsymmetricEd448Algorithm, Ed448PublicKeyParameters, AsymmetricEd448PublicKey>.PublicKey BouncyCastleAsymmetricPublicKeyBase<AsymmetricEd448Algorithm, Ed448PublicKeyParameters, AsymmetricEd448PublicKey>.ExportBc() BouncyCastleAsymmetricPublicKeyBase<AsymmetricEd448Algorithm, Ed448PublicKeyParameters, AsymmetricEd448PublicKey>.GetCopy() BouncyCastleAsymmetricPublicKeyBase<AsymmetricEd448Algorithm, Ed448PublicKeyParameters, AsymmetricEd448PublicKey>.ImportBc(in byte[]) AsymmetricPublicKeyBase.GetCopy() AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricEd448PublicKey : BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2<AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448Signer, AsymmetricEd448PublicKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricEd448Algorithm, Ed448PublicKeyParameters, AsymmetricEd448PublicKey>>, IEquatable<BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricEd448Algorithm, Ed448PublicKeyParameters, AsymmetricEd448PublicKey>>, ISignaturePublicKey, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2<AsymmetricEd448Algorithm, Ed448PublicKeyParameters, Ed448Signer, AsymmetricEd448PublicKey>>, IEquatable<AsymmetricEd448PublicKey> Constructors | Edit this page View Source AsymmetricEd448PublicKey() Constructor Declaration public AsymmetricEd448PublicKey() | Edit this page View Source AsymmetricEd448PublicKey(Ed448PublicKeyParameters) Constructor Declaration public AsymmetricEd448PublicKey(Ed448PublicKeyParameters publicKey) Parameters Type Name Description Ed448PublicKeyParameters publicKey Public key | Edit this page View Source AsymmetricEd448PublicKey(byte[]) Constructor Declaration public AsymmetricEd448PublicKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides wan24.Crypto.AsymmetricKeyBase.Bits Operators | Edit this page View Source explicit operator AsymmetricEd448PublicKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricEd448PublicKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricEd448PublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePublicKey wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricFalconAlgorithm.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricFalconAlgorithm.html",
    "title": "Class AsymmetricFalconAlgorithm | wan24-Crypto-BC",
    "keywords": "Class AsymmetricFalconAlgorithm FALCON asymmetric algorithm Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey> BouncyCastleAsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey, FalconKeyGenerationParameters, FalconParameters, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconAlgorithm> BouncyCastleAsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey, FalconKeyPairGenerator, FalconKeyGenerationParameters, FalconParameters, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconAlgorithm> AsymmetricFalconAlgorithm Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey, FalconKeyGenerationParameters, FalconParameters, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconAlgorithm>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey, FalconKeyPairGenerator, FalconKeyGenerationParameters, FalconParameters, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconAlgorithm>> IEquatable<AsymmetricFalconAlgorithm> Inherited Members BouncyCastleAsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey, FalconKeyPairGenerator, FalconKeyGenerationParameters, FalconParameters, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconAlgorithm>.CreateKeyPair(CryptoOptions) BouncyCastleAsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey, FalconKeyGenerationParameters, FalconParameters, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconAlgorithm>.Instance BouncyCastleAsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey, FalconKeyGenerationParameters, FalconParameters, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconAlgorithm>.Usages BouncyCastleAsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey, FalconKeyGenerationParameters, FalconParameters, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconAlgorithm>.IsEllipticCurveAlgorithm BouncyCastleAsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey, FalconKeyGenerationParameters, FalconParameters, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconAlgorithm>.AllowedKeySizes BouncyCastleAsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey, FalconKeyGenerationParameters, FalconParameters, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconAlgorithm>.IsPostQuantum BouncyCastleAsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey, FalconKeyGenerationParameters, FalconParameters, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconAlgorithm>.DeserializePrivateKeyV1(byte[]) BouncyCastleAsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey, FalconKeyGenerationParameters, FalconParameters, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconAlgorithm>.Register() AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.EnsureDefaultOptions(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.EnsureAllowed(in bool) AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.CreateKeyPair(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.CreateKeyPairAsync(CryptoOptions, CancellationToken) AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.DeserializePublicKey(byte[]) AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.DeserializePrivateKey(byte[]) AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.DeserializePrivateKeyV1(byte[]) AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.DeriveKey(byte[], CryptoOptions) AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.CanHandleNetAlgorithm(AsymmetricAlgorithm) AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.ToString() AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.GetHashCode() AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.Equals(object) AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.Equals(CryptoAlgorithmBase) AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.Equals(AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>) AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.<Clone>$() AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.PrivateKeyType AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.PublicKeyType AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.DefaultOptions AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.DefaultAlgorithmOptions AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.Usages AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.CanExchangeKey AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.CanSign AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.IsEllipticCurveAlgorithm AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.IsPublicKeyStandardFormat AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.AllowedKeySizes AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.DefaultKeySize AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.IsDenied AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.KeyPool AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.GetHashCode() CryptoAlgorithmBase.Equals(object) CryptoAlgorithmBase.Equals(CryptoAlgorithmBase) CryptoAlgorithmBase.<Clone>$() CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.State object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricFalconAlgorithm : BouncyCastleAsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey, FalconKeyPairGenerator, FalconKeyGenerationParameters, FalconParameters, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconAlgorithm>, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey, FalconKeyGenerationParameters, FalconParameters, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconAlgorithm>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey, FalconKeyPairGenerator, FalconKeyGenerationParameters, FalconParameters, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconAlgorithm>>, IEquatable<AsymmetricFalconAlgorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"FALCON\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 4 Field Value Type Description int | Edit this page View Source DEFAULT_KEY_SIZE Default key size in bits Declaration public const int DEFAULT_KEY_SIZE = 1024 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"FALCON\" Field Value Type Description string | Edit this page View Source USAGES Algorithm usages Declaration public const AsymmetricAlgorithmUsages USAGES = Signature Field Value Type Description AsymmetricAlgorithmUsages Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPublicKeyStandardFormat Is the public key exported in a standard format? Declaration public override bool IsPublicKeyStandardFormat { get; } Property Value Type Description bool Overrides wan24.Crypto.AsymmetricAlgorithmBase<wan24.Crypto.BC.AsymmetricFalconPublicKey, wan24.Crypto.BC.AsymmetricFalconPrivateKey>.IsPublicKeyStandardFormat Methods | Edit this page View Source GetEngineParameters(CryptoOptions) Get the cipher engine parameters Declaration protected override FalconParameters GetEngineParameters(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description FalconParameters Parameters Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey, FalconKeyGenerationParameters, FalconParameters, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconAlgorithm>.GetEngineParameters(CryptoOptions) Implements IEquatable<T> wan24.Crypto.IAsymmetricAlgorithm wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricFalconHelper.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricFalconHelper.html",
    "title": "Class AsymmetricFalconHelper | wan24-Crypto-BC",
    "keywords": "Class AsymmetricFalconHelper Asymmetric FALCON algorithm helper Inheritance object AsymmetricFalconHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public static class AsymmetricFalconHelper Methods | Edit this page View Source GetKeySize(FalconParameters) Get the key size in bits Declaration public static int GetKeySize(this FalconParameters param) Parameters Type Name Description FalconParameters param Parameters Returns Type Description int Key size in bits | Edit this page View Source GetParameters(int) Get the CRYSTALS-Kyber parameters Declaration public static FalconParameters GetParameters(int keySize) Parameters Type Name Description int keySize Key size in bits Returns Type Description FalconParameters Parameters"
  },
  "api/wan24.Crypto.BC.AsymmetricFalconPrivateKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricFalconPrivateKey.html",
    "title": "Class AsymmetricFalconPrivateKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricFalconPrivateKey Asymmetric FALCON private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey> BouncyCastleAsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconAlgorithm, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconPrivateKey> BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconAlgorithm, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconPrivateKey> BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconAlgorithm, FalconPublicKeyParameters, FalconPrivateKeyParameters, FalconSigner, AsymmetricFalconPrivateKey> AsymmetricFalconPrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconAlgorithm, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconPrivateKey>> IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconAlgorithm, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconPrivateKey>> ISignaturePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconAlgorithm, FalconPublicKeyParameters, FalconPrivateKeyParameters, FalconSigner, AsymmetricFalconPrivateKey>> IEquatable<AsymmetricFalconPrivateKey> Inherited Members BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconAlgorithm, FalconPublicKeyParameters, FalconPrivateKeyParameters, FalconSigner, AsymmetricFalconPrivateKey>.SignHashRaw(byte[]) BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconAlgorithm, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconPrivateKey>.ExportBc() BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconAlgorithm, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconPrivateKey>.ImportBc(in byte[]) BouncyCastleAsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconAlgorithm, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconPrivateKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconAlgorithm, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconPrivateKey>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconAlgorithm, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconPrivateKey>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconAlgorithm, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconPrivateKey>.Bits AsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.GetCopy() AsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.ToString() AsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.GetHashCode() AsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.Equals(object) AsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.Equals(AsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>) AsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.<Clone>$() AsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.PublicKey AsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricFalconPrivateKey : BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconAlgorithm, FalconPublicKeyParameters, FalconPrivateKeyParameters, FalconSigner, AsymmetricFalconPrivateKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconAlgorithm, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconPrivateKey>>, IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconAlgorithm, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconPrivateKey>>, ISignaturePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconAlgorithm, FalconPublicKeyParameters, FalconPrivateKeyParameters, FalconSigner, AsymmetricFalconPrivateKey>>, IEquatable<AsymmetricFalconPrivateKey> Constructors | Edit this page View Source AsymmetricFalconPrivateKey() Constructor Declaration public AsymmetricFalconPrivateKey() | Edit this page View Source AsymmetricFalconPrivateKey(AsymmetricCipherKeyPair) Constructor Declaration public AsymmetricFalconPrivateKey(AsymmetricCipherKeyPair keys) Parameters Type Name Description AsymmetricCipherKeyPair keys Keys | Edit this page View Source AsymmetricFalconPrivateKey(FalconPrivateKeyParameters) Constructor Declaration public AsymmetricFalconPrivateKey(FalconPrivateKeyParameters privateKey) Parameters Type Name Description FalconPrivateKeyParameters privateKey Private key | Edit this page View Source AsymmetricFalconPrivateKey(byte[]) Constructor Declaration public AsymmetricFalconPrivateKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconPrivateKey>.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricFalconPublicKey, wan24.Crypto.BC.AsymmetricFalconPrivateKey>.DisposeCore() | Edit this page View Source GetPublicKey(FalconPrivateKeyParameters) Get the public key from a private key Declaration protected override FalconPublicKeyParameters GetPublicKey(FalconPrivateKeyParameters privateKey) Parameters Type Name Description FalconPrivateKeyParameters privateKey Private key Returns Type Description FalconPublicKeyParameters Public key Overrides BouncyCastleAsymmetricPrivateKeyBase<AsymmetricFalconPublicKey, AsymmetricFalconAlgorithm, FalconPublicKeyParameters, FalconPrivateKeyParameters, AsymmetricFalconPrivateKey>.GetPublicKey(FalconPrivateKeyParameters) Operators | Edit this page View Source explicit operator AsymmetricFalconPrivateKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricFalconPrivateKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricFalconPrivateKey | Edit this page View Source implicit operator AsymmetricFalconPublicKey(AsymmetricFalconPrivateKey) Cast to public key Declaration public static implicit operator AsymmetricFalconPublicKey(AsymmetricFalconPrivateKey privateKey) Parameters Type Name Description AsymmetricFalconPrivateKey privateKey Private key Returns Type Description AsymmetricFalconPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePrivateKey wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricFalconPublicKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricFalconPublicKey.html",
    "title": "Class AsymmetricFalconPublicKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricFalconPublicKey Asymmetric FALCON public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<AsymmetricFalconAlgorithm, FalconPublicKeyParameters, AsymmetricFalconPublicKey> BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricFalconAlgorithm, FalconPublicKeyParameters, AsymmetricFalconPublicKey> BouncyCastleAsymmetricPqcPublicSignatureKeyBase<AsymmetricFalconAlgorithm, FalconPublicKeyParameters, FalconSigner, AsymmetricFalconPublicKey> AsymmetricFalconPublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricFalconAlgorithm, FalconPublicKeyParameters, AsymmetricFalconPublicKey>> IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricFalconAlgorithm, FalconPublicKeyParameters, AsymmetricFalconPublicKey>> ISignaturePublicKey IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<BouncyCastleAsymmetricPqcPublicSignatureKeyBase<AsymmetricFalconAlgorithm, FalconPublicKeyParameters, FalconSigner, AsymmetricFalconPublicKey>> IEquatable<AsymmetricFalconPublicKey> Inherited Members BouncyCastleAsymmetricPqcPublicSignatureKeyBase<AsymmetricFalconAlgorithm, FalconPublicKeyParameters, FalconSigner, AsymmetricFalconPublicKey>.ValidateSignatureRaw(byte[], byte[], bool) BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricFalconAlgorithm, FalconPublicKeyParameters, AsymmetricFalconPublicKey>.ExportBc() BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricFalconAlgorithm, FalconPublicKeyParameters, AsymmetricFalconPublicKey>.ImportBc(in byte[]) BouncyCastleAsymmetricPublicKeyBase<AsymmetricFalconAlgorithm, FalconPublicKeyParameters, AsymmetricFalconPublicKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPublicKeyBase<AsymmetricFalconAlgorithm, FalconPublicKeyParameters, AsymmetricFalconPublicKey>.PublicKey BouncyCastleAsymmetricPublicKeyBase<AsymmetricFalconAlgorithm, FalconPublicKeyParameters, AsymmetricFalconPublicKey>.GetCopy() AsymmetricPublicKeyBase.GetCopy() AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricFalconPublicKey : BouncyCastleAsymmetricPqcPublicSignatureKeyBase<AsymmetricFalconAlgorithm, FalconPublicKeyParameters, FalconSigner, AsymmetricFalconPublicKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricFalconAlgorithm, FalconPublicKeyParameters, AsymmetricFalconPublicKey>>, IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricFalconAlgorithm, FalconPublicKeyParameters, AsymmetricFalconPublicKey>>, ISignaturePublicKey, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<BouncyCastleAsymmetricPqcPublicSignatureKeyBase<AsymmetricFalconAlgorithm, FalconPublicKeyParameters, FalconSigner, AsymmetricFalconPublicKey>>, IEquatable<AsymmetricFalconPublicKey> Constructors | Edit this page View Source AsymmetricFalconPublicKey() Constructor Declaration public AsymmetricFalconPublicKey() | Edit this page View Source AsymmetricFalconPublicKey(FalconPublicKeyParameters) Constructor Declaration public AsymmetricFalconPublicKey(FalconPublicKeyParameters publicKey) Parameters Type Name Description FalconPublicKeyParameters publicKey Public key | Edit this page View Source AsymmetricFalconPublicKey(byte[]) Constructor Declaration public AsymmetricFalconPublicKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides wan24.Crypto.AsymmetricKeyBase.Bits Operators | Edit this page View Source explicit operator AsymmetricFalconPublicKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricFalconPublicKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricFalconPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePublicKey wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricFrodoKemAlgorithm.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricFrodoKemAlgorithm.html",
    "title": "Class AsymmetricFrodoKemAlgorithm | wan24-Crypto-BC",
    "keywords": "Class AsymmetricFrodoKemAlgorithm FrodoKEM asymmetric algorithm Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey> BouncyCastleAsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey, FrodoKeyGenerationParameters, FrodoParameters, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemAlgorithm> BouncyCastleAsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey, FrodoKeyPairGenerator, FrodoKeyGenerationParameters, FrodoParameters, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemAlgorithm> AsymmetricFrodoKemAlgorithm Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey, FrodoKeyGenerationParameters, FrodoParameters, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemAlgorithm>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey, FrodoKeyPairGenerator, FrodoKeyGenerationParameters, FrodoParameters, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemAlgorithm>> IEquatable<AsymmetricFrodoKemAlgorithm> Inherited Members BouncyCastleAsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey, FrodoKeyPairGenerator, FrodoKeyGenerationParameters, FrodoParameters, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemAlgorithm>.CreateKeyPair(CryptoOptions) BouncyCastleAsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey, FrodoKeyGenerationParameters, FrodoParameters, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemAlgorithm>.Instance BouncyCastleAsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey, FrodoKeyGenerationParameters, FrodoParameters, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemAlgorithm>.Usages BouncyCastleAsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey, FrodoKeyGenerationParameters, FrodoParameters, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemAlgorithm>.IsEllipticCurveAlgorithm BouncyCastleAsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey, FrodoKeyGenerationParameters, FrodoParameters, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemAlgorithm>.AllowedKeySizes BouncyCastleAsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey, FrodoKeyGenerationParameters, FrodoParameters, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemAlgorithm>.IsPostQuantum BouncyCastleAsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey, FrodoKeyGenerationParameters, FrodoParameters, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemAlgorithm>.DeserializePrivateKeyV1(byte[]) BouncyCastleAsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey, FrodoKeyGenerationParameters, FrodoParameters, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemAlgorithm>.Register() AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.EnsureDefaultOptions(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.EnsureAllowed(in bool) AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.CreateKeyPair(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.CreateKeyPairAsync(CryptoOptions, CancellationToken) AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.DeserializePublicKey(byte[]) AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.DeserializePrivateKey(byte[]) AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.DeserializePrivateKeyV1(byte[]) AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.DeriveKey(byte[], CryptoOptions) AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.CanHandleNetAlgorithm(AsymmetricAlgorithm) AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.ToString() AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.GetHashCode() AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.Equals(object) AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.Equals(CryptoAlgorithmBase) AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.Equals(AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>) AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.<Clone>$() AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.PrivateKeyType AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.PublicKeyType AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.DefaultOptions AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.DefaultAlgorithmOptions AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.Usages AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.CanExchangeKey AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.CanSign AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.IsEllipticCurveAlgorithm AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.IsPublicKeyStandardFormat AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.AllowedKeySizes AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.DefaultKeySize AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.IsDenied AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.KeyPool AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.GetHashCode() CryptoAlgorithmBase.Equals(object) CryptoAlgorithmBase.Equals(CryptoAlgorithmBase) CryptoAlgorithmBase.<Clone>$() CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.State object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricFrodoKemAlgorithm : BouncyCastleAsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey, FrodoKeyPairGenerator, FrodoKeyGenerationParameters, FrodoParameters, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemAlgorithm>, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey, FrodoKeyGenerationParameters, FrodoParameters, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemAlgorithm>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey, FrodoKeyPairGenerator, FrodoKeyGenerationParameters, FrodoParameters, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemAlgorithm>>, IEquatable<AsymmetricFrodoKemAlgorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"FRODOKEM\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 6 Field Value Type Description int | Edit this page View Source DEFAULT_KEY_SIZE Default key size in bits Declaration public const int DEFAULT_KEY_SIZE = 256 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"FrodoKEM\" Field Value Type Description string | Edit this page View Source USAGES Algorithm usages Declaration public const AsymmetricAlgorithmUsages USAGES = KeyExchange Field Value Type Description AsymmetricAlgorithmUsages Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPublicKeyStandardFormat Is the public key exported in a standard format? Declaration public override bool IsPublicKeyStandardFormat { get; } Property Value Type Description bool Overrides wan24.Crypto.AsymmetricAlgorithmBase<wan24.Crypto.BC.AsymmetricFrodoKemPublicKey, wan24.Crypto.BC.AsymmetricFrodoKemPrivateKey>.IsPublicKeyStandardFormat Methods | Edit this page View Source GetEngineParameters(CryptoOptions) Get the cipher engine parameters Declaration protected override FrodoParameters GetEngineParameters(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description FrodoParameters Parameters Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey, FrodoKeyGenerationParameters, FrodoParameters, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemAlgorithm>.GetEngineParameters(CryptoOptions) Implements IEquatable<T> wan24.Crypto.IAsymmetricAlgorithm wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricFrodoKemHelper.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricFrodoKemHelper.html",
    "title": "Class AsymmetricFrodoKemHelper | wan24-Crypto-BC",
    "keywords": "Class AsymmetricFrodoKemHelper FrodoKEM helper Inheritance object AsymmetricFrodoKemHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public static class AsymmetricFrodoKemHelper Methods | Edit this page View Source GetKeySize(FrodoParameters) Get the key size in bits Declaration public static int GetKeySize(this FrodoParameters param) Parameters Type Name Description FrodoParameters param Parameters Returns Type Description int Key size in bits | Edit this page View Source GetParameters(int) Get the FrodoKEM parameters Declaration public static FrodoParameters GetParameters(int keySize) Parameters Type Name Description int keySize Key size in bits Returns Type Description FrodoParameters Parameters"
  },
  "api/wan24.Crypto.BC.AsymmetricFrodoKemPrivateKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricFrodoKemPrivateKey.html",
    "title": "Class AsymmetricFrodoKemPrivateKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricFrodoKemPrivateKey FrodoKEM asymmetric private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey> BouncyCastleAsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemPrivateKey> BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemPrivateKey> BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, FrodoKEMGenerator, FrodoKEMExtractor, AsymmetricFrodoKemPrivateKey> AsymmetricFrodoKemPrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemPrivateKey>> IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemPrivateKey>> IKeyExchangePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IKeyExchange IEquatable<BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, FrodoKEMGenerator, FrodoKEMExtractor, AsymmetricFrodoKemPrivateKey>> IEquatable<AsymmetricFrodoKemPrivateKey> Inherited Members BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, FrodoKEMGenerator, FrodoKEMExtractor, AsymmetricFrodoKemPrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, FrodoKEMGenerator, FrodoKEMExtractor, AsymmetricFrodoKemPrivateKey>.DeriveKey(byte[]) BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, FrodoKEMGenerator, FrodoKEMExtractor, AsymmetricFrodoKemPrivateKey>.DeriveKey(IAsymmetricPublicKey) BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemPrivateKey>.ExportBc() BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemPrivateKey>.ImportBc(in byte[]) BouncyCastleAsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemPrivateKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemPrivateKey>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemPrivateKey>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemPrivateKey>.Bits AsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.GetCopy() AsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.ToString() AsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.GetHashCode() AsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.Equals(object) AsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.Equals(AsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>) AsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.<Clone>$() AsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.PublicKey AsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricFrodoKemPrivateKey : BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, FrodoKEMGenerator, FrodoKEMExtractor, AsymmetricFrodoKemPrivateKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemPrivateKey>>, IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemPrivateKey>>, IKeyExchangePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IKeyExchange, IEquatable<BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, FrodoKEMGenerator, FrodoKEMExtractor, AsymmetricFrodoKemPrivateKey>>, IEquatable<AsymmetricFrodoKemPrivateKey> Constructors | Edit this page View Source AsymmetricFrodoKemPrivateKey() Constructor Declaration public AsymmetricFrodoKemPrivateKey() | Edit this page View Source AsymmetricFrodoKemPrivateKey(AsymmetricCipherKeyPair) Constructor Declaration public AsymmetricFrodoKemPrivateKey(AsymmetricCipherKeyPair keys) Parameters Type Name Description AsymmetricCipherKeyPair keys Keys | Edit this page View Source AsymmetricFrodoKemPrivateKey(byte[]) Constructor Declaration public AsymmetricFrodoKemPrivateKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source IsBcImportExportImplemented Declaration public static bool IsBcImportExportImplemented { get; } Property Value Type Description bool Methods | Edit this page View Source DeserializeKeyData() Deserialize the key data Declaration protected override void DeserializeKeyData() Overrides BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemPrivateKey>.DeserializeKeyData() | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemPrivateKey>.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricFrodoKemPublicKey, wan24.Crypto.BC.AsymmetricFrodoKemPrivateKey>.DisposeCore() | Edit this page View Source GetPublicKey(FrodoPrivateKeyParameters) Get the public key from a private key Declaration protected override FrodoPublicKeyParameters GetPublicKey(FrodoPrivateKeyParameters privateKey) Parameters Type Name Description FrodoPrivateKeyParameters privateKey Private key Returns Type Description FrodoPublicKeyParameters Public key Overrides BouncyCastleAsymmetricPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemPrivateKey>.GetPublicKey(FrodoPrivateKeyParameters) | Edit this page View Source SerializeKeyData() Serialize the key data Declaration protected override byte[] SerializeKeyData() Returns Type Description byte[] Serialized key data Overrides BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricFrodoKemPublicKey, AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, FrodoPrivateKeyParameters, AsymmetricFrodoKemPrivateKey>.SerializeKeyData() Operators | Edit this page View Source explicit operator AsymmetricFrodoKemPrivateKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricFrodoKemPrivateKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricFrodoKemPrivateKey | Edit this page View Source implicit operator AsymmetricFrodoKemPublicKey(AsymmetricFrodoKemPrivateKey) Cast to public key Declaration public static implicit operator AsymmetricFrodoKemPublicKey(AsymmetricFrodoKemPrivateKey privateKey) Parameters Type Name Description AsymmetricFrodoKemPrivateKey privateKey Private key Returns Type Description AsymmetricFrodoKemPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.IKeyExchangePrivateKey wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider wan24.Crypto.IKeyExchange IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricFrodoKemPublicKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricFrodoKemPublicKey.html",
    "title": "Class AsymmetricFrodoKemPublicKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricFrodoKemPublicKey FrodoKEM asymmetric public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, AsymmetricFrodoKemPublicKey> BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, AsymmetricFrodoKemPublicKey> AsymmetricFrodoKemPublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, AsymmetricFrodoKemPublicKey>> IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, AsymmetricFrodoKemPublicKey>> IEquatable<AsymmetricFrodoKemPublicKey> Inherited Members BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, AsymmetricFrodoKemPublicKey>.ExportBc() BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, AsymmetricFrodoKemPublicKey>.ImportBc(in byte[]) BouncyCastleAsymmetricPublicKeyBase<AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, AsymmetricFrodoKemPublicKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPublicKeyBase<AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, AsymmetricFrodoKemPublicKey>.PublicKey BouncyCastleAsymmetricPublicKeyBase<AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, AsymmetricFrodoKemPublicKey>.GetCopy() AsymmetricPublicKeyBase.GetCopy() AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricFrodoKemPublicKey : BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, AsymmetricFrodoKemPublicKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, AsymmetricFrodoKemPublicKey>>, IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricFrodoKemAlgorithm, FrodoPublicKeyParameters, AsymmetricFrodoKemPublicKey>>, IEquatable<AsymmetricFrodoKemPublicKey> Constructors | Edit this page View Source AsymmetricFrodoKemPublicKey() Constructor Declaration public AsymmetricFrodoKemPublicKey() | Edit this page View Source AsymmetricFrodoKemPublicKey(FrodoPublicKeyParameters) Constructor Declaration public AsymmetricFrodoKemPublicKey(FrodoPublicKeyParameters publicKey) Parameters Type Name Description FrodoPublicKeyParameters publicKey Public key | Edit this page View Source AsymmetricFrodoKemPublicKey(byte[]) Constructor Declaration public AsymmetricFrodoKemPublicKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides wan24.Crypto.AsymmetricKeyBase.Bits | Edit this page View Source IsBcImportExportImplemented Declaration public static bool IsBcImportExportImplemented { get; } Property Value Type Description bool Operators | Edit this page View Source explicit operator AsymmetricFrodoKemPublicKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricFrodoKemPublicKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricFrodoKemPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricHqcAlgorithm.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricHqcAlgorithm.html",
    "title": "Class AsymmetricHqcAlgorithm | wan24-Crypto-BC",
    "keywords": "Class AsymmetricHqcAlgorithm HQC asymmetric algorithm Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey> BouncyCastleAsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey, HqcKeyGenerationParameters, HqcParameters, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcAlgorithm> BouncyCastleAsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey, HqcKeyPairGenerator, HqcKeyGenerationParameters, HqcParameters, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcAlgorithm> AsymmetricHqcAlgorithm Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey, HqcKeyGenerationParameters, HqcParameters, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcAlgorithm>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey, HqcKeyPairGenerator, HqcKeyGenerationParameters, HqcParameters, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcAlgorithm>> IEquatable<AsymmetricHqcAlgorithm> Inherited Members BouncyCastleAsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey, HqcKeyPairGenerator, HqcKeyGenerationParameters, HqcParameters, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcAlgorithm>.CreateKeyPair(CryptoOptions) BouncyCastleAsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey, HqcKeyGenerationParameters, HqcParameters, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcAlgorithm>.Instance BouncyCastleAsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey, HqcKeyGenerationParameters, HqcParameters, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcAlgorithm>.Usages BouncyCastleAsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey, HqcKeyGenerationParameters, HqcParameters, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcAlgorithm>.IsEllipticCurveAlgorithm BouncyCastleAsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey, HqcKeyGenerationParameters, HqcParameters, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcAlgorithm>.AllowedKeySizes BouncyCastleAsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey, HqcKeyGenerationParameters, HqcParameters, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcAlgorithm>.IsPostQuantum BouncyCastleAsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey, HqcKeyGenerationParameters, HqcParameters, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcAlgorithm>.DeserializePrivateKeyV1(byte[]) BouncyCastleAsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey, HqcKeyGenerationParameters, HqcParameters, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcAlgorithm>.Register() AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.EnsureDefaultOptions(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.EnsureAllowed(in bool) AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.CreateKeyPair(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.CreateKeyPairAsync(CryptoOptions, CancellationToken) AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.DeserializePublicKey(byte[]) AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.DeserializePrivateKey(byte[]) AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.DeserializePrivateKeyV1(byte[]) AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.DeriveKey(byte[], CryptoOptions) AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.CanHandleNetAlgorithm(AsymmetricAlgorithm) AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.ToString() AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.GetHashCode() AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.Equals(object) AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.Equals(CryptoAlgorithmBase) AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.Equals(AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>) AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.<Clone>$() AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.PrivateKeyType AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.PublicKeyType AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.DefaultOptions AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.DefaultAlgorithmOptions AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.Usages AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.CanExchangeKey AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.CanSign AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.IsEllipticCurveAlgorithm AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.IsPublicKeyStandardFormat AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.AllowedKeySizes AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.DefaultKeySize AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.IsDenied AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.KeyPool AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.GetHashCode() CryptoAlgorithmBase.Equals(object) CryptoAlgorithmBase.Equals(CryptoAlgorithmBase) CryptoAlgorithmBase.<Clone>$() CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.State object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricHqcAlgorithm : BouncyCastleAsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey, HqcKeyPairGenerator, HqcKeyGenerationParameters, HqcParameters, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcAlgorithm>, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey, HqcKeyGenerationParameters, HqcParameters, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcAlgorithm>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey, HqcKeyPairGenerator, HqcKeyGenerationParameters, HqcParameters, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcAlgorithm>>, IEquatable<AsymmetricHqcAlgorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"HQC\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 16 Field Value Type Description int | Edit this page View Source DEFAULT_KEY_SIZE Default key size in bits Declaration public const int DEFAULT_KEY_SIZE = 256 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"HQC\" Field Value Type Description string | Edit this page View Source USAGES Algorithm usages Declaration public const AsymmetricAlgorithmUsages USAGES = KeyExchange Field Value Type Description AsymmetricAlgorithmUsages Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPublicKeyStandardFormat Is the public key exported in a standard format? Declaration public override bool IsPublicKeyStandardFormat { get; } Property Value Type Description bool Overrides wan24.Crypto.AsymmetricAlgorithmBase<wan24.Crypto.BC.AsymmetricHqcPublicKey, wan24.Crypto.BC.AsymmetricHqcPrivateKey>.IsPublicKeyStandardFormat Methods | Edit this page View Source GetEngineParameters(CryptoOptions) Get the cipher engine parameters Declaration protected override HqcParameters GetEngineParameters(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description HqcParameters Parameters Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey, HqcKeyGenerationParameters, HqcParameters, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcAlgorithm>.GetEngineParameters(CryptoOptions) Implements IEquatable<T> wan24.Crypto.IAsymmetricAlgorithm wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricHqcHelper.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricHqcHelper.html",
    "title": "Class AsymmetricHqcHelper | wan24-Crypto-BC",
    "keywords": "Class AsymmetricHqcHelper HQC asymmetric algorithm helper Inheritance object AsymmetricHqcHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public static class AsymmetricHqcHelper Methods | Edit this page View Source GetKeySize(HqcParameters) Get the key size in bits Declaration public static int GetKeySize(this HqcParameters param) Parameters Type Name Description HqcParameters param Parameters Returns Type Description int Key size in bits | Edit this page View Source GetParameters(int) Get the HQC parameters Declaration public static HqcParameters GetParameters(int keySize) Parameters Type Name Description int keySize Key size in bits Returns Type Description HqcParameters Parameters"
  },
  "api/wan24.Crypto.BC.AsymmetricHqcPrivateKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricHqcPrivateKey.html",
    "title": "Class AsymmetricHqcPrivateKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricHqcPrivateKey HQC asymmetric private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey> BouncyCastleAsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcAlgorithm, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcPrivateKey> BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcAlgorithm, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcPrivateKey> BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcAlgorithm, HqcPublicKeyParameters, HqcPrivateKeyParameters, HqcKemGenerator, HqcKemExtractor, AsymmetricHqcPrivateKey> AsymmetricHqcPrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcAlgorithm, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcPrivateKey>> IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcAlgorithm, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcPrivateKey>> IKeyExchangePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IKeyExchange IEquatable<BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcAlgorithm, HqcPublicKeyParameters, HqcPrivateKeyParameters, HqcKemGenerator, HqcKemExtractor, AsymmetricHqcPrivateKey>> IEquatable<AsymmetricHqcPrivateKey> Inherited Members BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcAlgorithm, HqcPublicKeyParameters, HqcPrivateKeyParameters, HqcKemGenerator, HqcKemExtractor, AsymmetricHqcPrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcAlgorithm, HqcPublicKeyParameters, HqcPrivateKeyParameters, HqcKemGenerator, HqcKemExtractor, AsymmetricHqcPrivateKey>.DeriveKey(byte[]) BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcAlgorithm, HqcPublicKeyParameters, HqcPrivateKeyParameters, HqcKemGenerator, HqcKemExtractor, AsymmetricHqcPrivateKey>.DeriveKey(IAsymmetricPublicKey) BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcAlgorithm, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcPrivateKey>.ExportBc() BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcAlgorithm, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcPrivateKey>.ImportBc(in byte[]) BouncyCastleAsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcAlgorithm, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcPrivateKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcAlgorithm, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcPrivateKey>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcAlgorithm, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcPrivateKey>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcAlgorithm, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcPrivateKey>.Bits AsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.GetCopy() AsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.ToString() AsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.GetHashCode() AsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.Equals(object) AsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.Equals(AsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>) AsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.<Clone>$() AsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.PublicKey AsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricHqcPrivateKey : BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcAlgorithm, HqcPublicKeyParameters, HqcPrivateKeyParameters, HqcKemGenerator, HqcKemExtractor, AsymmetricHqcPrivateKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcAlgorithm, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcPrivateKey>>, IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcAlgorithm, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcPrivateKey>>, IKeyExchangePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IKeyExchange, IEquatable<BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcAlgorithm, HqcPublicKeyParameters, HqcPrivateKeyParameters, HqcKemGenerator, HqcKemExtractor, AsymmetricHqcPrivateKey>>, IEquatable<AsymmetricHqcPrivateKey> Constructors | Edit this page View Source AsymmetricHqcPrivateKey() Constructor Declaration public AsymmetricHqcPrivateKey() | Edit this page View Source AsymmetricHqcPrivateKey(AsymmetricCipherKeyPair) Constructor Declaration public AsymmetricHqcPrivateKey(AsymmetricCipherKeyPair keys) Parameters Type Name Description AsymmetricCipherKeyPair keys Keys | Edit this page View Source AsymmetricHqcPrivateKey(byte[]) Constructor Declaration public AsymmetricHqcPrivateKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source IsBcImportExportImplemented Declaration public static bool IsBcImportExportImplemented { get; } Property Value Type Description bool Methods | Edit this page View Source DeserializeKeyData() Deserialize the key data Declaration protected override void DeserializeKeyData() Overrides BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcAlgorithm, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcPrivateKey>.DeserializeKeyData() | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcPrivateKey>.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricHqcPublicKey, wan24.Crypto.BC.AsymmetricHqcPrivateKey>.DisposeCore() | Edit this page View Source GetPublicKey(HqcPrivateKeyParameters) Get the public key from a private key Declaration protected override HqcPublicKeyParameters GetPublicKey(HqcPrivateKeyParameters privateKey) Parameters Type Name Description HqcPrivateKeyParameters privateKey Private key Returns Type Description HqcPublicKeyParameters Public key Overrides BouncyCastleAsymmetricPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcAlgorithm, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcPrivateKey>.GetPublicKey(HqcPrivateKeyParameters) | Edit this page View Source SerializeKeyData() Serialize the key data Declaration protected override byte[] SerializeKeyData() Returns Type Description byte[] Serialized key data Overrides BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricHqcPublicKey, AsymmetricHqcAlgorithm, HqcPublicKeyParameters, HqcPrivateKeyParameters, AsymmetricHqcPrivateKey>.SerializeKeyData() Operators | Edit this page View Source explicit operator AsymmetricHqcPrivateKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricHqcPrivateKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricHqcPrivateKey | Edit this page View Source implicit operator AsymmetricHqcPublicKey(AsymmetricHqcPrivateKey) Cast to public key Declaration public static implicit operator AsymmetricHqcPublicKey(AsymmetricHqcPrivateKey privateKey) Parameters Type Name Description AsymmetricHqcPrivateKey privateKey Private key Returns Type Description AsymmetricHqcPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.IKeyExchangePrivateKey wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider wan24.Crypto.IKeyExchange IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricHqcPublicKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricHqcPublicKey.html",
    "title": "Class AsymmetricHqcPublicKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricHqcPublicKey HQC asymmetric public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<AsymmetricHqcAlgorithm, HqcPublicKeyParameters, AsymmetricHqcPublicKey> BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricHqcAlgorithm, HqcPublicKeyParameters, AsymmetricHqcPublicKey> AsymmetricHqcPublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricHqcAlgorithm, HqcPublicKeyParameters, AsymmetricHqcPublicKey>> IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricHqcAlgorithm, HqcPublicKeyParameters, AsymmetricHqcPublicKey>> IEquatable<AsymmetricHqcPublicKey> Inherited Members BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricHqcAlgorithm, HqcPublicKeyParameters, AsymmetricHqcPublicKey>.ExportBc() BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricHqcAlgorithm, HqcPublicKeyParameters, AsymmetricHqcPublicKey>.ImportBc(in byte[]) BouncyCastleAsymmetricPublicKeyBase<AsymmetricHqcAlgorithm, HqcPublicKeyParameters, AsymmetricHqcPublicKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPublicKeyBase<AsymmetricHqcAlgorithm, HqcPublicKeyParameters, AsymmetricHqcPublicKey>.PublicKey BouncyCastleAsymmetricPublicKeyBase<AsymmetricHqcAlgorithm, HqcPublicKeyParameters, AsymmetricHqcPublicKey>.GetCopy() AsymmetricPublicKeyBase.GetCopy() AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricHqcPublicKey : BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricHqcAlgorithm, HqcPublicKeyParameters, AsymmetricHqcPublicKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricHqcAlgorithm, HqcPublicKeyParameters, AsymmetricHqcPublicKey>>, IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricHqcAlgorithm, HqcPublicKeyParameters, AsymmetricHqcPublicKey>>, IEquatable<AsymmetricHqcPublicKey> Constructors | Edit this page View Source AsymmetricHqcPublicKey() Constructor Declaration public AsymmetricHqcPublicKey() | Edit this page View Source AsymmetricHqcPublicKey(HqcPublicKeyParameters) Constructor Declaration public AsymmetricHqcPublicKey(HqcPublicKeyParameters publicKey) Parameters Type Name Description HqcPublicKeyParameters publicKey Public key | Edit this page View Source AsymmetricHqcPublicKey(byte[]) Constructor Declaration public AsymmetricHqcPublicKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides wan24.Crypto.AsymmetricKeyBase.Bits | Edit this page View Source IsBcImportExportImplemented Declaration public static bool IsBcImportExportImplemented { get; } Property Value Type Description bool Operators | Edit this page View Source explicit operator AsymmetricHqcPublicKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricHqcPublicKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricHqcPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricKyberAlgorithm.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricKyberAlgorithm.html",
    "title": "Class AsymmetricKyberAlgorithm | wan24-Crypto-BC",
    "keywords": "Class AsymmetricKyberAlgorithm CRYSTALS-Kyber asymmetric algorithm Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey> BouncyCastleAsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey, KyberKeyGenerationParameters, KyberParameters, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberAlgorithm> BouncyCastleAsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey, KyberKeyPairGenerator, KyberKeyGenerationParameters, KyberParameters, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberAlgorithm> AsymmetricKyberAlgorithm Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey, KyberKeyGenerationParameters, KyberParameters, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberAlgorithm>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey, KyberKeyPairGenerator, KyberKeyGenerationParameters, KyberParameters, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberAlgorithm>> IEquatable<AsymmetricKyberAlgorithm> Inherited Members BouncyCastleAsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey, KyberKeyPairGenerator, KyberKeyGenerationParameters, KyberParameters, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberAlgorithm>.CreateKeyPair(CryptoOptions) BouncyCastleAsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey, KyberKeyGenerationParameters, KyberParameters, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberAlgorithm>.Instance BouncyCastleAsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey, KyberKeyGenerationParameters, KyberParameters, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberAlgorithm>.Usages BouncyCastleAsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey, KyberKeyGenerationParameters, KyberParameters, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberAlgorithm>.IsEllipticCurveAlgorithm BouncyCastleAsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey, KyberKeyGenerationParameters, KyberParameters, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberAlgorithm>.AllowedKeySizes BouncyCastleAsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey, KyberKeyGenerationParameters, KyberParameters, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberAlgorithm>.IsPostQuantum BouncyCastleAsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey, KyberKeyGenerationParameters, KyberParameters, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberAlgorithm>.DeserializePrivateKeyV1(byte[]) BouncyCastleAsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey, KyberKeyGenerationParameters, KyberParameters, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberAlgorithm>.Register() AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.EnsureDefaultOptions(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.EnsureAllowed(in bool) AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.CreateKeyPair(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.CreateKeyPairAsync(CryptoOptions, CancellationToken) AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.DeserializePublicKey(byte[]) AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.DeserializePrivateKey(byte[]) AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.DeserializePrivateKeyV1(byte[]) AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.DeriveKey(byte[], CryptoOptions) AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.CanHandleNetAlgorithm(AsymmetricAlgorithm) AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.ToString() AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.GetHashCode() AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.Equals(object) AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.Equals(CryptoAlgorithmBase) AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.Equals(AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>) AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.<Clone>$() AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.PrivateKeyType AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.PublicKeyType AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.DefaultOptions AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.DefaultAlgorithmOptions AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.Usages AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.CanExchangeKey AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.CanSign AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.IsEllipticCurveAlgorithm AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.IsPublicKeyStandardFormat AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.AllowedKeySizes AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.DefaultKeySize AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.IsDenied AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.KeyPool AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.GetHashCode() CryptoAlgorithmBase.Equals(object) CryptoAlgorithmBase.Equals(CryptoAlgorithmBase) CryptoAlgorithmBase.<Clone>$() CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.State object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricKyberAlgorithm : BouncyCastleAsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey, KyberKeyPairGenerator, KyberKeyGenerationParameters, KyberParameters, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberAlgorithm>, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey, KyberKeyGenerationParameters, KyberParameters, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberAlgorithm>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey, KyberKeyPairGenerator, KyberKeyGenerationParameters, KyberParameters, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberAlgorithm>>, IEquatable<AsymmetricKyberAlgorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"CRYSTALSKYBER\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 2 Field Value Type Description int | Edit this page View Source DEFAULT_KEY_SIZE Default key size in bits Declaration public const int DEFAULT_KEY_SIZE = 1024 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"CRYSTALS-Kyber\" Field Value Type Description string | Edit this page View Source USAGES Algorithm usages Declaration public const AsymmetricAlgorithmUsages USAGES = KeyExchange Field Value Type Description AsymmetricAlgorithmUsages Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPublicKeyStandardFormat Is the public key exported in a standard format? Declaration public override bool IsPublicKeyStandardFormat { get; } Property Value Type Description bool Overrides wan24.Crypto.AsymmetricAlgorithmBase<wan24.Crypto.BC.AsymmetricKyberPublicKey, wan24.Crypto.BC.AsymmetricKyberPrivateKey>.IsPublicKeyStandardFormat Methods | Edit this page View Source GetEngineParameters(CryptoOptions) Get the cipher engine parameters Declaration protected override KyberParameters GetEngineParameters(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description KyberParameters Parameters Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey, KyberKeyGenerationParameters, KyberParameters, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberAlgorithm>.GetEngineParameters(CryptoOptions) Implements IEquatable<T> wan24.Crypto.IAsymmetricAlgorithm wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricKyberHelper.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricKyberHelper.html",
    "title": "Class AsymmetricKyberHelper | wan24-Crypto-BC",
    "keywords": "Class AsymmetricKyberHelper CRYSTALS-Kyber asymmetric algorithm helper Inheritance object AsymmetricKyberHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public static class AsymmetricKyberHelper Methods | Edit this page View Source GetKeySize(KyberParameters) Get the key size in bits Declaration public static int GetKeySize(this KyberParameters param) Parameters Type Name Description KyberParameters param Parameters Returns Type Description int Key size in bits | Edit this page View Source GetParameters(int) Get the CRYSTALS-Kyber parameters Declaration public static KyberParameters GetParameters(int keySize) Parameters Type Name Description int keySize Key size in bits Returns Type Description KyberParameters Parameters"
  },
  "api/wan24.Crypto.BC.AsymmetricKyberPrivateKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricKyberPrivateKey.html",
    "title": "Class AsymmetricKyberPrivateKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricKyberPrivateKey CRYSTALS-Kyber asymmetric private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey> BouncyCastleAsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberAlgorithm, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberPrivateKey> BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberAlgorithm, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberPrivateKey> BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberAlgorithm, KyberPublicKeyParameters, KyberPrivateKeyParameters, KyberKemGenerator, KyberKemExtractor, AsymmetricKyberPrivateKey> AsymmetricKyberPrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberAlgorithm, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberPrivateKey>> IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberAlgorithm, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberPrivateKey>> IKeyExchangePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IKeyExchange IEquatable<BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberAlgorithm, KyberPublicKeyParameters, KyberPrivateKeyParameters, KyberKemGenerator, KyberKemExtractor, AsymmetricKyberPrivateKey>> IEquatable<AsymmetricKyberPrivateKey> Inherited Members BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberAlgorithm, KyberPublicKeyParameters, KyberPrivateKeyParameters, KyberKemGenerator, KyberKemExtractor, AsymmetricKyberPrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberAlgorithm, KyberPublicKeyParameters, KyberPrivateKeyParameters, KyberKemGenerator, KyberKemExtractor, AsymmetricKyberPrivateKey>.DeriveKey(byte[]) BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberAlgorithm, KyberPublicKeyParameters, KyberPrivateKeyParameters, KyberKemGenerator, KyberKemExtractor, AsymmetricKyberPrivateKey>.DeriveKey(IAsymmetricPublicKey) BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberAlgorithm, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberPrivateKey>.ExportBc() BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberAlgorithm, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberPrivateKey>.ImportBc(in byte[]) BouncyCastleAsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberAlgorithm, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberPrivateKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberAlgorithm, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberPrivateKey>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberAlgorithm, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberPrivateKey>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberAlgorithm, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberPrivateKey>.Bits AsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.GetCopy() AsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.ToString() AsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.GetHashCode() AsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.Equals(object) AsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.Equals(AsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>) AsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.<Clone>$() AsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.PublicKey AsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricKyberPrivateKey : BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberAlgorithm, KyberPublicKeyParameters, KyberPrivateKeyParameters, KyberKemGenerator, KyberKemExtractor, AsymmetricKyberPrivateKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberAlgorithm, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberPrivateKey>>, IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberAlgorithm, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberPrivateKey>>, IKeyExchangePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IKeyExchange, IEquatable<BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberAlgorithm, KyberPublicKeyParameters, KyberPrivateKeyParameters, KyberKemGenerator, KyberKemExtractor, AsymmetricKyberPrivateKey>>, IEquatable<AsymmetricKyberPrivateKey> Constructors | Edit this page View Source AsymmetricKyberPrivateKey() Constructor Declaration public AsymmetricKyberPrivateKey() | Edit this page View Source AsymmetricKyberPrivateKey(AsymmetricCipherKeyPair) Constructor Declaration public AsymmetricKyberPrivateKey(AsymmetricCipherKeyPair keys) Parameters Type Name Description AsymmetricCipherKeyPair keys Keys | Edit this page View Source AsymmetricKyberPrivateKey(byte[]) Constructor Declaration public AsymmetricKyberPrivateKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source IsBcImportExportImplemented Declaration public static bool IsBcImportExportImplemented { get; } Property Value Type Description bool Methods | Edit this page View Source DeserializeKeyData() Deserialize the key data Declaration protected override void DeserializeKeyData() Overrides BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberAlgorithm, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberPrivateKey>.DeserializeKeyData() | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberPrivateKey>.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricKyberPublicKey, wan24.Crypto.BC.AsymmetricKyberPrivateKey>.DisposeCore() | Edit this page View Source GetPublicKey(KyberPrivateKeyParameters) Get the public key from a private key Declaration protected override KyberPublicKeyParameters GetPublicKey(KyberPrivateKeyParameters privateKey) Parameters Type Name Description KyberPrivateKeyParameters privateKey Private key Returns Type Description KyberPublicKeyParameters Public key Overrides BouncyCastleAsymmetricPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberAlgorithm, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberPrivateKey>.GetPublicKey(KyberPrivateKeyParameters) | Edit this page View Source SerializeKeyData() Serialize the key data Declaration protected override byte[] SerializeKeyData() Returns Type Description byte[] Serialized key data Overrides BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricKyberPublicKey, AsymmetricKyberAlgorithm, KyberPublicKeyParameters, KyberPrivateKeyParameters, AsymmetricKyberPrivateKey>.SerializeKeyData() Operators | Edit this page View Source explicit operator AsymmetricKyberPrivateKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricKyberPrivateKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricKyberPrivateKey | Edit this page View Source implicit operator AsymmetricKyberPublicKey(AsymmetricKyberPrivateKey) Cast to public key Declaration public static implicit operator AsymmetricKyberPublicKey(AsymmetricKyberPrivateKey privateKey) Parameters Type Name Description AsymmetricKyberPrivateKey privateKey Private key Returns Type Description AsymmetricKyberPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.IKeyExchangePrivateKey wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider wan24.Crypto.IKeyExchange IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricKyberPublicKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricKyberPublicKey.html",
    "title": "Class AsymmetricKyberPublicKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricKyberPublicKey CRYSTALS-Kyber asymmetric public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<AsymmetricKyberAlgorithm, KyberPublicKeyParameters, AsymmetricKyberPublicKey> BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricKyberAlgorithm, KyberPublicKeyParameters, AsymmetricKyberPublicKey> AsymmetricKyberPublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricKyberAlgorithm, KyberPublicKeyParameters, AsymmetricKyberPublicKey>> IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricKyberAlgorithm, KyberPublicKeyParameters, AsymmetricKyberPublicKey>> IEquatable<AsymmetricKyberPublicKey> Inherited Members BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricKyberAlgorithm, KyberPublicKeyParameters, AsymmetricKyberPublicKey>.ExportBc() BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricKyberAlgorithm, KyberPublicKeyParameters, AsymmetricKyberPublicKey>.ImportBc(in byte[]) BouncyCastleAsymmetricPublicKeyBase<AsymmetricKyberAlgorithm, KyberPublicKeyParameters, AsymmetricKyberPublicKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPublicKeyBase<AsymmetricKyberAlgorithm, KyberPublicKeyParameters, AsymmetricKyberPublicKey>.PublicKey BouncyCastleAsymmetricPublicKeyBase<AsymmetricKyberAlgorithm, KyberPublicKeyParameters, AsymmetricKyberPublicKey>.GetCopy() AsymmetricPublicKeyBase.GetCopy() AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricKyberPublicKey : BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricKyberAlgorithm, KyberPublicKeyParameters, AsymmetricKyberPublicKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricKyberAlgorithm, KyberPublicKeyParameters, AsymmetricKyberPublicKey>>, IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricKyberAlgorithm, KyberPublicKeyParameters, AsymmetricKyberPublicKey>>, IEquatable<AsymmetricKyberPublicKey> Constructors | Edit this page View Source AsymmetricKyberPublicKey() Constructor Declaration public AsymmetricKyberPublicKey() | Edit this page View Source AsymmetricKyberPublicKey(KyberPublicKeyParameters) Constructor Declaration public AsymmetricKyberPublicKey(KyberPublicKeyParameters publicKey) Parameters Type Name Description KyberPublicKeyParameters publicKey Public key | Edit this page View Source AsymmetricKyberPublicKey(byte[]) Constructor Declaration public AsymmetricKyberPublicKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides wan24.Crypto.AsymmetricKeyBase.Bits | Edit this page View Source IsBcImportExportImplemented Declaration public static bool IsBcImportExportImplemented { get; } Property Value Type Description bool Operators | Edit this page View Source explicit operator AsymmetricKyberPublicKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricKyberPublicKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricKyberPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricNtruEncryptAlgorithm.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricNtruEncryptAlgorithm.html",
    "title": "Class AsymmetricNtruEncryptAlgorithm | wan24-Crypto-BC",
    "keywords": "Class AsymmetricNtruEncryptAlgorithm NTRUEncrypt asymmetric algorithm Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey> BouncyCastleAsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey, NtruKeyGenerationParameters, NtruParameters, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptAlgorithm> BouncyCastleAsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey, NtruKeyPairGenerator, NtruKeyGenerationParameters, NtruParameters, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptAlgorithm> AsymmetricNtruEncryptAlgorithm Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey, NtruKeyGenerationParameters, NtruParameters, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptAlgorithm>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey, NtruKeyPairGenerator, NtruKeyGenerationParameters, NtruParameters, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptAlgorithm>> IEquatable<AsymmetricNtruEncryptAlgorithm> Inherited Members BouncyCastleAsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey, NtruKeyPairGenerator, NtruKeyGenerationParameters, NtruParameters, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptAlgorithm>.CreateKeyPair(CryptoOptions) BouncyCastleAsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey, NtruKeyGenerationParameters, NtruParameters, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptAlgorithm>.Instance BouncyCastleAsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey, NtruKeyGenerationParameters, NtruParameters, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptAlgorithm>.Usages BouncyCastleAsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey, NtruKeyGenerationParameters, NtruParameters, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptAlgorithm>.IsEllipticCurveAlgorithm BouncyCastleAsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey, NtruKeyGenerationParameters, NtruParameters, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptAlgorithm>.AllowedKeySizes BouncyCastleAsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey, NtruKeyGenerationParameters, NtruParameters, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptAlgorithm>.IsPostQuantum BouncyCastleAsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey, NtruKeyGenerationParameters, NtruParameters, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptAlgorithm>.DeserializePrivateKeyV1(byte[]) BouncyCastleAsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey, NtruKeyGenerationParameters, NtruParameters, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptAlgorithm>.Register() AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.EnsureDefaultOptions(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.EnsureAllowed(in bool) AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.CreateKeyPair(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.CreateKeyPairAsync(CryptoOptions, CancellationToken) AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.DeserializePublicKey(byte[]) AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.DeserializePrivateKey(byte[]) AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.DeserializePrivateKeyV1(byte[]) AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.DeriveKey(byte[], CryptoOptions) AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.CanHandleNetAlgorithm(AsymmetricAlgorithm) AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.ToString() AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.GetHashCode() AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.Equals(object) AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.Equals(CryptoAlgorithmBase) AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.Equals(AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>) AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.<Clone>$() AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.PrivateKeyType AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.PublicKeyType AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.DefaultOptions AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.DefaultAlgorithmOptions AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.Usages AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.CanExchangeKey AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.CanSign AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.IsEllipticCurveAlgorithm AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.IsPublicKeyStandardFormat AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.AllowedKeySizes AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.DefaultKeySize AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.IsDenied AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.KeyPool AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.GetHashCode() CryptoAlgorithmBase.Equals(object) CryptoAlgorithmBase.Equals(CryptoAlgorithmBase) CryptoAlgorithmBase.<Clone>$() CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.State object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricNtruEncryptAlgorithm : BouncyCastleAsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey, NtruKeyPairGenerator, NtruKeyGenerationParameters, NtruParameters, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptAlgorithm>, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey, NtruKeyGenerationParameters, NtruParameters, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptAlgorithm>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey, NtruKeyPairGenerator, NtruKeyGenerationParameters, NtruParameters, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptAlgorithm>>, IEquatable<AsymmetricNtruEncryptAlgorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"NTRUENCRYPT\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 7 Field Value Type Description int | Edit this page View Source DEFAULT_KEY_SIZE Default key size in bits Declaration public const int DEFAULT_KEY_SIZE = 701 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"NTRUEncrypt\" Field Value Type Description string | Edit this page View Source USAGES Algorithm usages Declaration public const AsymmetricAlgorithmUsages USAGES = KeyExchange Field Value Type Description AsymmetricAlgorithmUsages Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPublicKeyStandardFormat Is the public key exported in a standard format? Declaration public override bool IsPublicKeyStandardFormat { get; } Property Value Type Description bool Overrides wan24.Crypto.AsymmetricAlgorithmBase<wan24.Crypto.BC.AsymmetricNtruEncryptPublicKey, wan24.Crypto.BC.AsymmetricNtruEncryptPrivateKey>.IsPublicKeyStandardFormat Methods | Edit this page View Source GetEngineParameters(CryptoOptions) Get the cipher engine parameters Declaration protected override NtruParameters GetEngineParameters(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description NtruParameters Parameters Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey, NtruKeyGenerationParameters, NtruParameters, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptAlgorithm>.GetEngineParameters(CryptoOptions) Implements IEquatable<T> wan24.Crypto.IAsymmetricAlgorithm wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricNtruEncryptPrivateKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricNtruEncryptPrivateKey.html",
    "title": "Class AsymmetricNtruEncryptPrivateKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricNtruEncryptPrivateKey NTRUEncrypt asymmetric private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey> BouncyCastleAsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptPrivateKey> BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptPrivateKey> BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, NtruPrivateKeyParameters, NtruKemGenerator, NtruKemExtractor, AsymmetricNtruEncryptPrivateKey> AsymmetricNtruEncryptPrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptPrivateKey>> IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptPrivateKey>> IKeyExchangePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IKeyExchange IEquatable<BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, NtruPrivateKeyParameters, NtruKemGenerator, NtruKemExtractor, AsymmetricNtruEncryptPrivateKey>> IEquatable<AsymmetricNtruEncryptPrivateKey> Inherited Members BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, NtruPrivateKeyParameters, NtruKemGenerator, NtruKemExtractor, AsymmetricNtruEncryptPrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, NtruPrivateKeyParameters, NtruKemGenerator, NtruKemExtractor, AsymmetricNtruEncryptPrivateKey>.DeriveKey(byte[]) BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, NtruPrivateKeyParameters, NtruKemGenerator, NtruKemExtractor, AsymmetricNtruEncryptPrivateKey>.DeriveKey(IAsymmetricPublicKey) BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptPrivateKey>.ExportBc() BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptPrivateKey>.ImportBc(in byte[]) BouncyCastleAsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptPrivateKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptPrivateKey>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptPrivateKey>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptPrivateKey>.Bits AsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.GetCopy() AsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.ToString() AsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.GetHashCode() AsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.Equals(object) AsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.Equals(AsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>) AsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.<Clone>$() AsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.PublicKey AsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricNtruEncryptPrivateKey : BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, NtruPrivateKeyParameters, NtruKemGenerator, NtruKemExtractor, AsymmetricNtruEncryptPrivateKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptPrivateKey>>, IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptPrivateKey>>, IKeyExchangePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IKeyExchange, IEquatable<BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, NtruPrivateKeyParameters, NtruKemGenerator, NtruKemExtractor, AsymmetricNtruEncryptPrivateKey>>, IEquatable<AsymmetricNtruEncryptPrivateKey> Constructors | Edit this page View Source AsymmetricNtruEncryptPrivateKey() Constructor Declaration public AsymmetricNtruEncryptPrivateKey() | Edit this page View Source AsymmetricNtruEncryptPrivateKey(AsymmetricCipherKeyPair) Constructor Declaration public AsymmetricNtruEncryptPrivateKey(AsymmetricCipherKeyPair keys) Parameters Type Name Description AsymmetricCipherKeyPair keys Keys | Edit this page View Source AsymmetricNtruEncryptPrivateKey(byte[]) Constructor Declaration public AsymmetricNtruEncryptPrivateKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source IsBcImportExportImplemented Declaration public static bool IsBcImportExportImplemented { get; } Property Value Type Description bool Methods | Edit this page View Source DeserializeKeyData() Deserialize the key data Declaration protected override void DeserializeKeyData() Overrides BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptPrivateKey>.DeserializeKeyData() | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptPrivateKey>.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricNtruEncryptPublicKey, wan24.Crypto.BC.AsymmetricNtruEncryptPrivateKey>.DisposeCore() | Edit this page View Source GetPublicKey(NtruPrivateKeyParameters) Get the public key from a private key Declaration protected override NtruPublicKeyParameters GetPublicKey(NtruPrivateKeyParameters privateKey) Parameters Type Name Description NtruPrivateKeyParameters privateKey Private key Returns Type Description NtruPublicKeyParameters Public key Overrides BouncyCastleAsymmetricPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptPrivateKey>.GetPublicKey(NtruPrivateKeyParameters) | Edit this page View Source SerializeKeyData() Serialize the key data Declaration protected override byte[] SerializeKeyData() Returns Type Description byte[] Serialized key data Overrides BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricNtruEncryptPublicKey, AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, NtruPrivateKeyParameters, AsymmetricNtruEncryptPrivateKey>.SerializeKeyData() Operators | Edit this page View Source explicit operator AsymmetricNtruEncryptPrivateKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricNtruEncryptPrivateKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricNtruEncryptPrivateKey | Edit this page View Source implicit operator AsymmetricNtruEncryptPublicKey(AsymmetricNtruEncryptPrivateKey) Cast to public key Declaration public static implicit operator AsymmetricNtruEncryptPublicKey(AsymmetricNtruEncryptPrivateKey privateKey) Parameters Type Name Description AsymmetricNtruEncryptPrivateKey privateKey Private key Returns Type Description AsymmetricNtruEncryptPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.IKeyExchangePrivateKey wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider wan24.Crypto.IKeyExchange IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricNtruEncryptPublicKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricNtruEncryptPublicKey.html",
    "title": "Class AsymmetricNtruEncryptPublicKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricNtruEncryptPublicKey NTRUEncrypt asymmetric public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, AsymmetricNtruEncryptPublicKey> BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, AsymmetricNtruEncryptPublicKey> AsymmetricNtruEncryptPublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, AsymmetricNtruEncryptPublicKey>> IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, AsymmetricNtruEncryptPublicKey>> IEquatable<AsymmetricNtruEncryptPublicKey> Inherited Members BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, AsymmetricNtruEncryptPublicKey>.ExportBc() BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, AsymmetricNtruEncryptPublicKey>.ImportBc(in byte[]) BouncyCastleAsymmetricPublicKeyBase<AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, AsymmetricNtruEncryptPublicKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPublicKeyBase<AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, AsymmetricNtruEncryptPublicKey>.PublicKey BouncyCastleAsymmetricPublicKeyBase<AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, AsymmetricNtruEncryptPublicKey>.GetCopy() AsymmetricPublicKeyBase.GetCopy() AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricNtruEncryptPublicKey : BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, AsymmetricNtruEncryptPublicKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, AsymmetricNtruEncryptPublicKey>>, IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, AsymmetricNtruEncryptPublicKey>>, IEquatable<AsymmetricNtruEncryptPublicKey> Constructors | Edit this page View Source AsymmetricNtruEncryptPublicKey() Constructor Declaration public AsymmetricNtruEncryptPublicKey() | Edit this page View Source AsymmetricNtruEncryptPublicKey(NtruPublicKeyParameters) Constructor Declaration public AsymmetricNtruEncryptPublicKey(NtruPublicKeyParameters publicKey) Parameters Type Name Description NtruPublicKeyParameters publicKey Public key | Edit this page View Source AsymmetricNtruEncryptPublicKey(byte[]) Constructor Declaration public AsymmetricNtruEncryptPublicKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides wan24.Crypto.AsymmetricKeyBase.Bits | Edit this page View Source IsBcImportExportImplemented Declaration public static bool IsBcImportExportImplemented { get; } Property Value Type Description bool Methods | Edit this page View Source DeserializeKeyData() Deserialize the key data Declaration protected override void DeserializeKeyData() Overrides BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, AsymmetricNtruEncryptPublicKey>.DeserializeKeyData() | Edit this page View Source SerializeKeyData() Serialize the key data Declaration protected override byte[] SerializeKeyData() Returns Type Description byte[] Serialized key data Overrides BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricNtruEncryptAlgorithm, NtruPublicKeyParameters, AsymmetricNtruEncryptPublicKey>.SerializeKeyData() Operators | Edit this page View Source explicit operator AsymmetricNtruEncryptPublicKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricNtruEncryptPublicKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricNtruEncryptPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricNtruHelper.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricNtruHelper.html",
    "title": "Class AsymmetricNtruHelper | wan24-Crypto-BC",
    "keywords": "Class AsymmetricNtruHelper NTRU helper Inheritance object AsymmetricNtruHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public static class AsymmetricNtruHelper Methods | Edit this page View Source GetKeySize(NtruParameters) Get the key size in bits Declaration public static int GetKeySize(this NtruParameters param) Parameters Type Name Description NtruParameters param Parameters Returns Type Description int Key size in bits | Edit this page View Source GetParameters(int) Get the NTRU parameters Declaration public static NtruParameters GetParameters(int keySize) Parameters Type Name Description int keySize Key size in bits Returns Type Description NtruParameters Parameters"
  },
  "api/wan24.Crypto.BC.AsymmetricPicnicAlgorithm.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricPicnicAlgorithm.html",
    "title": "Class AsymmetricPicnicAlgorithm | wan24-Crypto-BC",
    "keywords": "Class AsymmetricPicnicAlgorithm CRYSTALS-Dilithium asymmetric algorithm Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey> BouncyCastleAsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey, PicnicKeyGenerationParameters, PicnicParameters, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicAlgorithm> BouncyCastleAsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey, PicnicKeyPairGenerator, PicnicKeyGenerationParameters, PicnicParameters, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicAlgorithm> AsymmetricPicnicAlgorithm Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey, PicnicKeyGenerationParameters, PicnicParameters, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicAlgorithm>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey, PicnicKeyPairGenerator, PicnicKeyGenerationParameters, PicnicParameters, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicAlgorithm>> IEquatable<AsymmetricPicnicAlgorithm> Inherited Members BouncyCastleAsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey, PicnicKeyPairGenerator, PicnicKeyGenerationParameters, PicnicParameters, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicAlgorithm>.CreateKeyPair(CryptoOptions) BouncyCastleAsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey, PicnicKeyGenerationParameters, PicnicParameters, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicAlgorithm>.Instance BouncyCastleAsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey, PicnicKeyGenerationParameters, PicnicParameters, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicAlgorithm>.Usages BouncyCastleAsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey, PicnicKeyGenerationParameters, PicnicParameters, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicAlgorithm>.IsEllipticCurveAlgorithm BouncyCastleAsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey, PicnicKeyGenerationParameters, PicnicParameters, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicAlgorithm>.AllowedKeySizes BouncyCastleAsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey, PicnicKeyGenerationParameters, PicnicParameters, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicAlgorithm>.IsPostQuantum BouncyCastleAsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey, PicnicKeyGenerationParameters, PicnicParameters, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicAlgorithm>.DeserializePrivateKeyV1(byte[]) BouncyCastleAsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey, PicnicKeyGenerationParameters, PicnicParameters, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicAlgorithm>.Register() AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.EnsureDefaultOptions(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.EnsureAllowed(in bool) AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.CreateKeyPair(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.CreateKeyPairAsync(CryptoOptions, CancellationToken) AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.DeserializePublicKey(byte[]) AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.DeserializePrivateKey(byte[]) AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.DeserializePrivateKeyV1(byte[]) AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.DeriveKey(byte[], CryptoOptions) AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.CanHandleNetAlgorithm(AsymmetricAlgorithm) AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.ToString() AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.GetHashCode() AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.Equals(object) AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.Equals(CryptoAlgorithmBase) AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.Equals(AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>) AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.<Clone>$() AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.PrivateKeyType AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.PublicKeyType AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.DefaultOptions AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.DefaultAlgorithmOptions AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.Usages AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.CanExchangeKey AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.CanSign AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.IsEllipticCurveAlgorithm AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.IsPublicKeyStandardFormat AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.AllowedKeySizes AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.DefaultKeySize AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.IsDenied AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.KeyPool AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.GetHashCode() CryptoAlgorithmBase.Equals(object) CryptoAlgorithmBase.Equals(CryptoAlgorithmBase) CryptoAlgorithmBase.<Clone>$() CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.State object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricPicnicAlgorithm : BouncyCastleAsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey, PicnicKeyPairGenerator, PicnicKeyGenerationParameters, PicnicParameters, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicAlgorithm>, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey, PicnicKeyGenerationParameters, PicnicParameters, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicAlgorithm>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey, PicnicKeyPairGenerator, PicnicKeyGenerationParameters, PicnicParameters, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicAlgorithm>>, IEquatable<AsymmetricPicnicAlgorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"PICNIC\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 17 Field Value Type Description int | Edit this page View Source DEFAULT_KEY_SIZE Default key size in bits Declaration public const int DEFAULT_KEY_SIZE = 128 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"Picnic\" Field Value Type Description string | Edit this page View Source USAGES Algorithm usages Declaration public const AsymmetricAlgorithmUsages USAGES = Signature Field Value Type Description AsymmetricAlgorithmUsages Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPublicKeyStandardFormat Is the public key exported in a standard format? Declaration public override bool IsPublicKeyStandardFormat { get; } Property Value Type Description bool Overrides wan24.Crypto.AsymmetricAlgorithmBase<wan24.Crypto.BC.AsymmetricPicnicPublicKey, wan24.Crypto.BC.AsymmetricPicnicPrivateKey>.IsPublicKeyStandardFormat Methods | Edit this page View Source GetEngineParameters(CryptoOptions) Get the cipher engine parameters Declaration protected override PicnicParameters GetEngineParameters(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description PicnicParameters Parameters Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey, PicnicKeyGenerationParameters, PicnicParameters, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicAlgorithm>.GetEngineParameters(CryptoOptions) Implements IEquatable<T> wan24.Crypto.IAsymmetricAlgorithm wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricPicnicHelper.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricPicnicHelper.html",
    "title": "Class AsymmetricPicnicHelper | wan24-Crypto-BC",
    "keywords": "Class AsymmetricPicnicHelper Picnic helper Inheritance object AsymmetricPicnicHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public static class AsymmetricPicnicHelper Methods | Edit this page View Source GetKeySize(PicnicParameters) Get the key size in bits Declaration public static int GetKeySize(this PicnicParameters param) Parameters Type Name Description PicnicParameters param Parameters Returns Type Description int Key size in bits | Edit this page View Source GetParameters(int) Get the Picnic parameters Declaration public static PicnicParameters GetParameters(int keySize) Parameters Type Name Description int keySize Key size in bits Returns Type Description PicnicParameters Parameters"
  },
  "api/wan24.Crypto.BC.AsymmetricPicnicPrivateKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricPicnicPrivateKey.html",
    "title": "Class AsymmetricPicnicPrivateKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricPicnicPrivateKey Picnic asymmetric private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey> BouncyCastleAsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicPrivateKey> BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicPrivateKey> BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, PicnicSigner, AsymmetricPicnicPrivateKey> AsymmetricPicnicPrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicPrivateKey>> IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicPrivateKey>> ISignaturePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, PicnicSigner, AsymmetricPicnicPrivateKey>> IEquatable<AsymmetricPicnicPrivateKey> Inherited Members BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, PicnicSigner, AsymmetricPicnicPrivateKey>.SignHashRaw(byte[]) BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicPrivateKey>.ExportBc() BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicPrivateKey>.ImportBc(in byte[]) BouncyCastleAsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicPrivateKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicPrivateKey>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicPrivateKey>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicPrivateKey>.Bits AsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.GetCopy() AsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.ToString() AsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.GetHashCode() AsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.Equals(object) AsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.Equals(AsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>) AsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.<Clone>$() AsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.PublicKey AsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricPicnicPrivateKey : BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, PicnicSigner, AsymmetricPicnicPrivateKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicPrivateKey>>, IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicPrivateKey>>, ISignaturePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, PicnicSigner, AsymmetricPicnicPrivateKey>>, IEquatable<AsymmetricPicnicPrivateKey> Constructors | Edit this page View Source AsymmetricPicnicPrivateKey() Constructor Declaration public AsymmetricPicnicPrivateKey() | Edit this page View Source AsymmetricPicnicPrivateKey(AsymmetricCipherKeyPair) Constructor Declaration public AsymmetricPicnicPrivateKey(AsymmetricCipherKeyPair keys) Parameters Type Name Description AsymmetricCipherKeyPair keys Keys | Edit this page View Source AsymmetricPicnicPrivateKey(byte[]) Constructor Declaration public AsymmetricPicnicPrivateKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source IsBcImportExportImplemented Declaration public static bool IsBcImportExportImplemented { get; } Property Value Type Description bool Methods | Edit this page View Source DeserializeKeyData() Deserialize the key data Declaration protected override void DeserializeKeyData() Overrides BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicPrivateKey>.DeserializeKeyData() | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicPrivateKey>.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricPicnicPublicKey, wan24.Crypto.BC.AsymmetricPicnicPrivateKey>.DisposeCore() | Edit this page View Source GetPublicKey(PicnicPrivateKeyParameters) Get the public key from a private key Declaration protected override PicnicPublicKeyParameters GetPublicKey(PicnicPrivateKeyParameters privateKey) Parameters Type Name Description PicnicPrivateKeyParameters privateKey Private key Returns Type Description PicnicPublicKeyParameters Public key Overrides BouncyCastleAsymmetricPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicPrivateKey>.GetPublicKey(PicnicPrivateKeyParameters) | Edit this page View Source SerializeKeyData() Serialize the key data Declaration protected override byte[] SerializeKeyData() Returns Type Description byte[] Serialized key data Overrides BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricPicnicPublicKey, AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicPrivateKeyParameters, AsymmetricPicnicPrivateKey>.SerializeKeyData() Operators | Edit this page View Source explicit operator AsymmetricPicnicPrivateKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricPicnicPrivateKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricPicnicPrivateKey | Edit this page View Source implicit operator AsymmetricPicnicPublicKey(AsymmetricPicnicPrivateKey) Cast to public key Declaration public static implicit operator AsymmetricPicnicPublicKey(AsymmetricPicnicPrivateKey privateKey) Parameters Type Name Description AsymmetricPicnicPrivateKey privateKey Private key Returns Type Description AsymmetricPicnicPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePrivateKey wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricPicnicPublicKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricPicnicPublicKey.html",
    "title": "Class AsymmetricPicnicPublicKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricPicnicPublicKey Picnic asymmetric public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, AsymmetricPicnicPublicKey> BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, AsymmetricPicnicPublicKey> BouncyCastleAsymmetricPqcPublicSignatureKeyBase<AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicSigner, AsymmetricPicnicPublicKey> AsymmetricPicnicPublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, AsymmetricPicnicPublicKey>> IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, AsymmetricPicnicPublicKey>> ISignaturePublicKey IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<BouncyCastleAsymmetricPqcPublicSignatureKeyBase<AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicSigner, AsymmetricPicnicPublicKey>> IEquatable<AsymmetricPicnicPublicKey> Inherited Members BouncyCastleAsymmetricPqcPublicSignatureKeyBase<AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicSigner, AsymmetricPicnicPublicKey>.ValidateSignatureRaw(byte[], byte[], bool) BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, AsymmetricPicnicPublicKey>.ExportBc() BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, AsymmetricPicnicPublicKey>.ImportBc(in byte[]) BouncyCastleAsymmetricPublicKeyBase<AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, AsymmetricPicnicPublicKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPublicKeyBase<AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, AsymmetricPicnicPublicKey>.PublicKey BouncyCastleAsymmetricPublicKeyBase<AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, AsymmetricPicnicPublicKey>.GetCopy() AsymmetricPublicKeyBase.GetCopy() AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricPicnicPublicKey : BouncyCastleAsymmetricPqcPublicSignatureKeyBase<AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicSigner, AsymmetricPicnicPublicKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, AsymmetricPicnicPublicKey>>, IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, AsymmetricPicnicPublicKey>>, ISignaturePublicKey, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<BouncyCastleAsymmetricPqcPublicSignatureKeyBase<AsymmetricPicnicAlgorithm, PicnicPublicKeyParameters, PicnicSigner, AsymmetricPicnicPublicKey>>, IEquatable<AsymmetricPicnicPublicKey> Constructors | Edit this page View Source AsymmetricPicnicPublicKey() Constructor Declaration public AsymmetricPicnicPublicKey() | Edit this page View Source AsymmetricPicnicPublicKey(PicnicPublicKeyParameters) Constructor Declaration public AsymmetricPicnicPublicKey(PicnicPublicKeyParameters publicKey) Parameters Type Name Description PicnicPublicKeyParameters publicKey Public key | Edit this page View Source AsymmetricPicnicPublicKey(byte[]) Constructor Declaration public AsymmetricPicnicPublicKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides wan24.Crypto.AsymmetricKeyBase.Bits Operators | Edit this page View Source explicit operator AsymmetricPicnicPublicKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricPicnicPublicKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricPicnicPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePublicKey wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricSNtruPrimeAlgorithm.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricSNtruPrimeAlgorithm.html",
    "title": "Class AsymmetricSNtruPrimeAlgorithm | wan24-Crypto-BC",
    "keywords": "Class AsymmetricSNtruPrimeAlgorithm Streamlined NTRU Prime asymmetric algorithm Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey> BouncyCastleAsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey, SNtruPrimeKeyGenerationParameters, SNtruPrimeParameters, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimeAlgorithm> AsymmetricSNtruPrimeAlgorithm Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey, SNtruPrimeKeyGenerationParameters, SNtruPrimeParameters, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimeAlgorithm>> IEquatable<AsymmetricSNtruPrimeAlgorithm> Inherited Members BouncyCastleAsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey, SNtruPrimeKeyGenerationParameters, SNtruPrimeParameters, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimeAlgorithm>.Instance BouncyCastleAsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey, SNtruPrimeKeyGenerationParameters, SNtruPrimeParameters, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimeAlgorithm>.Usages BouncyCastleAsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey, SNtruPrimeKeyGenerationParameters, SNtruPrimeParameters, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimeAlgorithm>.IsEllipticCurveAlgorithm BouncyCastleAsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey, SNtruPrimeKeyGenerationParameters, SNtruPrimeParameters, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimeAlgorithm>.AllowedKeySizes BouncyCastleAsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey, SNtruPrimeKeyGenerationParameters, SNtruPrimeParameters, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimeAlgorithm>.IsPostQuantum BouncyCastleAsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey, SNtruPrimeKeyGenerationParameters, SNtruPrimeParameters, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimeAlgorithm>.DeserializePrivateKeyV1(byte[]) BouncyCastleAsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey, SNtruPrimeKeyGenerationParameters, SNtruPrimeParameters, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimeAlgorithm>.Register() AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.EnsureDefaultOptions(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.EnsureAllowed(in bool) AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.CreateKeyPair(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.CreateKeyPairAsync(CryptoOptions, CancellationToken) AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.DeserializePublicKey(byte[]) AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.DeserializePrivateKey(byte[]) AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.DeserializePrivateKeyV1(byte[]) AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.DeriveKey(byte[], CryptoOptions) AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.CanHandleNetAlgorithm(AsymmetricAlgorithm) AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.ToString() AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.GetHashCode() AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.Equals(object) AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.Equals(CryptoAlgorithmBase) AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.Equals(AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>) AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.<Clone>$() AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.PrivateKeyType AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.PublicKeyType AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.DefaultOptions AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.DefaultAlgorithmOptions AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.Usages AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.CanExchangeKey AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.CanSign AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.IsEllipticCurveAlgorithm AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.IsPublicKeyStandardFormat AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.AllowedKeySizes AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.DefaultKeySize AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.IsDenied AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.KeyPool AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.GetHashCode() CryptoAlgorithmBase.Equals(object) CryptoAlgorithmBase.Equals(CryptoAlgorithmBase) CryptoAlgorithmBase.<Clone>$() CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.State object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricSNtruPrimeAlgorithm : BouncyCastleAsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey, SNtruPrimeKeyGenerationParameters, SNtruPrimeParameters, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimeAlgorithm>, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey, SNtruPrimeKeyGenerationParameters, SNtruPrimeParameters, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimeAlgorithm>>, IEquatable<AsymmetricSNtruPrimeAlgorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"SNTRUP\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 14 Field Value Type Description int | Edit this page View Source DEFAULT_KEY_SIZE Default key size in bits Declaration public const int DEFAULT_KEY_SIZE = 1277 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"Streamlined NTRU Prime\" Field Value Type Description string | Edit this page View Source USAGES Algorithm usages Declaration public const AsymmetricAlgorithmUsages USAGES = KeyExchange Field Value Type Description AsymmetricAlgorithmUsages Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPublicKeyStandardFormat Is the public key exported in a standard format? Declaration public override bool IsPublicKeyStandardFormat { get; } Property Value Type Description bool Overrides wan24.Crypto.AsymmetricAlgorithmBase<wan24.Crypto.BC.AsymmetricSNtruPrimePublicKey, wan24.Crypto.BC.AsymmetricSNtruPrimePrivateKey>.IsPublicKeyStandardFormat Methods | Edit this page View Source CreateKeyPair(CryptoOptions?) Declaration public override AsymmetricSNtruPrimePrivateKey CreateKeyPair(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Returns Type Description AsymmetricSNtruPrimePrivateKey Overrides wan24.Crypto.AsymmetricAlgorithmBase<wan24.Crypto.BC.AsymmetricSNtruPrimePublicKey, wan24.Crypto.BC.AsymmetricSNtruPrimePrivateKey>.CreateKeyPair(wan24.Crypto.CryptoOptions) | Edit this page View Source GetEngineParameters(CryptoOptions) Get the cipher engine parameters Declaration protected override SNtruPrimeParameters GetEngineParameters(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description SNtruPrimeParameters Parameters Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey, SNtruPrimeKeyGenerationParameters, SNtruPrimeParameters, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimeAlgorithm>.GetEngineParameters(CryptoOptions) Implements IEquatable<T> wan24.Crypto.IAsymmetricAlgorithm wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricSNtruPrimeHelper.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricSNtruPrimeHelper.html",
    "title": "Class AsymmetricSNtruPrimeHelper | wan24-Crypto-BC",
    "keywords": "Class AsymmetricSNtruPrimeHelper Streamlined NTRU Prime helper Inheritance object AsymmetricSNtruPrimeHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public static class AsymmetricSNtruPrimeHelper Methods | Edit this page View Source GetKeySize(SNtruPrimeParameters) Get the key size in bits Declaration public static int GetKeySize(this SNtruPrimeParameters param) Parameters Type Name Description SNtruPrimeParameters param Parameters Returns Type Description int Key size in bits | Edit this page View Source GetParameters(int) Get the Streamline NTRU Prime parameters Declaration public static SNtruPrimeParameters GetParameters(int keySize) Parameters Type Name Description int keySize Key size in bits Returns Type Description SNtruPrimeParameters Parameters"
  },
  "api/wan24.Crypto.BC.AsymmetricSNtruPrimePrivateKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricSNtruPrimePrivateKey.html",
    "title": "Class AsymmetricSNtruPrimePrivateKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricSNtruPrimePrivateKey Streamlined NTRU Prime asymmetric private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey> BouncyCastleAsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimePrivateKey> BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimePrivateKey> BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, SNtruPrimeKemGenerator, SNtruPrimeKemExtractor, AsymmetricSNtruPrimePrivateKey> AsymmetricSNtruPrimePrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimePrivateKey>> IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimePrivateKey>> IKeyExchangePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IKeyExchange IEquatable<BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, SNtruPrimeKemGenerator, SNtruPrimeKemExtractor, AsymmetricSNtruPrimePrivateKey>> IEquatable<AsymmetricSNtruPrimePrivateKey> Inherited Members BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, SNtruPrimeKemGenerator, SNtruPrimeKemExtractor, AsymmetricSNtruPrimePrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, SNtruPrimeKemGenerator, SNtruPrimeKemExtractor, AsymmetricSNtruPrimePrivateKey>.DeriveKey(byte[]) BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, SNtruPrimeKemGenerator, SNtruPrimeKemExtractor, AsymmetricSNtruPrimePrivateKey>.DeriveKey(IAsymmetricPublicKey) BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimePrivateKey>.ExportBc() BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimePrivateKey>.ImportBc(in byte[]) BouncyCastleAsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimePrivateKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimePrivateKey>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimePrivateKey>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimePrivateKey>.Bits AsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.GetCopy() AsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.ToString() AsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.GetHashCode() AsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.Equals(object) AsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.Equals(AsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>) AsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.<Clone>$() AsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.PublicKey AsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricSNtruPrimePrivateKey : BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, SNtruPrimeKemGenerator, SNtruPrimeKemExtractor, AsymmetricSNtruPrimePrivateKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimePrivateKey>>, IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimePrivateKey>>, IKeyExchangePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IKeyExchange, IEquatable<BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, SNtruPrimeKemGenerator, SNtruPrimeKemExtractor, AsymmetricSNtruPrimePrivateKey>>, IEquatable<AsymmetricSNtruPrimePrivateKey> Constructors | Edit this page View Source AsymmetricSNtruPrimePrivateKey() Constructor Declaration public AsymmetricSNtruPrimePrivateKey() | Edit this page View Source AsymmetricSNtruPrimePrivateKey(AsymmetricCipherKeyPair) Constructor Declaration public AsymmetricSNtruPrimePrivateKey(AsymmetricCipherKeyPair keys) Parameters Type Name Description AsymmetricCipherKeyPair keys Keys | Edit this page View Source AsymmetricSNtruPrimePrivateKey(byte[]) Constructor Declaration public AsymmetricSNtruPrimePrivateKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source IsBcImportExportImplemented Declaration public static bool IsBcImportExportImplemented { get; } Property Value Type Description bool Methods | Edit this page View Source DeserializeKeyData() Deserialize the key data Declaration protected override void DeserializeKeyData() Overrides BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimePrivateKey>.DeserializeKeyData() | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimePrivateKey>.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricSNtruPrimePublicKey, wan24.Crypto.BC.AsymmetricSNtruPrimePrivateKey>.DisposeCore() | Edit this page View Source GetPublicKey(SNtruPrimePrivateKeyParameters) Get the public key from a private key Declaration protected override SNtruPrimePublicKeyParameters GetPublicKey(SNtruPrimePrivateKeyParameters privateKey) Parameters Type Name Description SNtruPrimePrivateKeyParameters privateKey Private key Returns Type Description SNtruPrimePublicKeyParameters Public key Overrides BouncyCastleAsymmetricPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimePrivateKey>.GetPublicKey(SNtruPrimePrivateKeyParameters) | Edit this page View Source SerializeKeyData() Serialize the key data Declaration protected override byte[] SerializeKeyData() Returns Type Description byte[] Serialized key data Overrides BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricSNtruPrimePublicKey, AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, SNtruPrimePrivateKeyParameters, AsymmetricSNtruPrimePrivateKey>.SerializeKeyData() Operators | Edit this page View Source explicit operator AsymmetricSNtruPrimePrivateKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricSNtruPrimePrivateKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricSNtruPrimePrivateKey | Edit this page View Source implicit operator AsymmetricSNtruPrimePublicKey(AsymmetricSNtruPrimePrivateKey) Cast to public key Declaration public static implicit operator AsymmetricSNtruPrimePublicKey(AsymmetricSNtruPrimePrivateKey privateKey) Parameters Type Name Description AsymmetricSNtruPrimePrivateKey privateKey Private key Returns Type Description AsymmetricSNtruPrimePublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.IKeyExchangePrivateKey wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider wan24.Crypto.IKeyExchange IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricSNtruPrimePublicKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricSNtruPrimePublicKey.html",
    "title": "Class AsymmetricSNtruPrimePublicKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricSNtruPrimePublicKey Streamlined NTRU Prime asymmetric public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, AsymmetricSNtruPrimePublicKey> BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, AsymmetricSNtruPrimePublicKey> AsymmetricSNtruPrimePublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, AsymmetricSNtruPrimePublicKey>> IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, AsymmetricSNtruPrimePublicKey>> IEquatable<AsymmetricSNtruPrimePublicKey> Inherited Members BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, AsymmetricSNtruPrimePublicKey>.ExportBc() BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, AsymmetricSNtruPrimePublicKey>.ImportBc(in byte[]) BouncyCastleAsymmetricPublicKeyBase<AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, AsymmetricSNtruPrimePublicKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPublicKeyBase<AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, AsymmetricSNtruPrimePublicKey>.PublicKey BouncyCastleAsymmetricPublicKeyBase<AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, AsymmetricSNtruPrimePublicKey>.GetCopy() AsymmetricPublicKeyBase.GetCopy() AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricSNtruPrimePublicKey : BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, AsymmetricSNtruPrimePublicKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, AsymmetricSNtruPrimePublicKey>>, IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, AsymmetricSNtruPrimePublicKey>>, IEquatable<AsymmetricSNtruPrimePublicKey> Constructors | Edit this page View Source AsymmetricSNtruPrimePublicKey() Constructor Declaration public AsymmetricSNtruPrimePublicKey() | Edit this page View Source AsymmetricSNtruPrimePublicKey(SNtruPrimePublicKeyParameters) Constructor Declaration public AsymmetricSNtruPrimePublicKey(SNtruPrimePublicKeyParameters publicKey) Parameters Type Name Description SNtruPrimePublicKeyParameters publicKey Public key | Edit this page View Source AsymmetricSNtruPrimePublicKey(byte[]) Constructor Declaration public AsymmetricSNtruPrimePublicKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides wan24.Crypto.AsymmetricKeyBase.Bits | Edit this page View Source IsBcImportExportImplemented Declaration public static bool IsBcImportExportImplemented { get; } Property Value Type Description bool Methods | Edit this page View Source DeserializeKeyData() Deserialize the key data Declaration protected override void DeserializeKeyData() Overrides BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, AsymmetricSNtruPrimePublicKey>.DeserializeKeyData() | Edit this page View Source SerializeKeyData() Serialize the key data Declaration protected override byte[] SerializeKeyData() Returns Type Description byte[] Serialized key data Overrides BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricSNtruPrimeAlgorithm, SNtruPrimePublicKeyParameters, AsymmetricSNtruPrimePublicKey>.SerializeKeyData() Operators | Edit this page View Source explicit operator AsymmetricSNtruPrimePublicKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricSNtruPrimePublicKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricSNtruPrimePublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricSphincsPlusAlgorithm.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricSphincsPlusAlgorithm.html",
    "title": "Class AsymmetricSphincsPlusAlgorithm | wan24-Crypto-BC",
    "keywords": "Class AsymmetricSphincsPlusAlgorithm SPHINCS+ asymmetric algorithm Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey> BouncyCastleAsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey, SphincsPlusKeyGenerationParameters, SphincsPlusParameters, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusAlgorithm> BouncyCastleAsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey, SphincsPlusKeyPairGenerator, SphincsPlusKeyGenerationParameters, SphincsPlusParameters, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusAlgorithm> AsymmetricSphincsPlusAlgorithm Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey, SphincsPlusKeyGenerationParameters, SphincsPlusParameters, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusAlgorithm>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey, SphincsPlusKeyPairGenerator, SphincsPlusKeyGenerationParameters, SphincsPlusParameters, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusAlgorithm>> IEquatable<AsymmetricSphincsPlusAlgorithm> Inherited Members BouncyCastleAsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey, SphincsPlusKeyPairGenerator, SphincsPlusKeyGenerationParameters, SphincsPlusParameters, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusAlgorithm>.CreateKeyPair(CryptoOptions) BouncyCastleAsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey, SphincsPlusKeyGenerationParameters, SphincsPlusParameters, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusAlgorithm>.Instance BouncyCastleAsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey, SphincsPlusKeyGenerationParameters, SphincsPlusParameters, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusAlgorithm>.Usages BouncyCastleAsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey, SphincsPlusKeyGenerationParameters, SphincsPlusParameters, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusAlgorithm>.IsEllipticCurveAlgorithm BouncyCastleAsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey, SphincsPlusKeyGenerationParameters, SphincsPlusParameters, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusAlgorithm>.AllowedKeySizes BouncyCastleAsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey, SphincsPlusKeyGenerationParameters, SphincsPlusParameters, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusAlgorithm>.IsPostQuantum BouncyCastleAsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey, SphincsPlusKeyGenerationParameters, SphincsPlusParameters, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusAlgorithm>.DeserializePrivateKeyV1(byte[]) BouncyCastleAsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey, SphincsPlusKeyGenerationParameters, SphincsPlusParameters, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusAlgorithm>.Register() AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.EnsureDefaultOptions(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.EnsureAllowed(in bool) AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.CreateKeyPair(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.CreateKeyPairAsync(CryptoOptions, CancellationToken) AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.DeserializePublicKey(byte[]) AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.DeserializePrivateKey(byte[]) AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.DeserializePrivateKeyV1(byte[]) AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.DeriveKey(byte[], CryptoOptions) AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.CanHandleNetAlgorithm(AsymmetricAlgorithm) AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.ToString() AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.GetHashCode() AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.Equals(object) AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.Equals(CryptoAlgorithmBase) AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.Equals(AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>) AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.<Clone>$() AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.PrivateKeyType AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.PublicKeyType AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.DefaultOptions AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.DefaultAlgorithmOptions AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.Usages AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.CanExchangeKey AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.CanSign AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.IsEllipticCurveAlgorithm AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.IsPublicKeyStandardFormat AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.AllowedKeySizes AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.DefaultKeySize AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.IsDenied AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.KeyPool AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.GetHashCode() CryptoAlgorithmBase.Equals(object) CryptoAlgorithmBase.Equals(CryptoAlgorithmBase) CryptoAlgorithmBase.<Clone>$() CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.State object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricSphincsPlusAlgorithm : BouncyCastleAsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey, SphincsPlusKeyPairGenerator, SphincsPlusKeyGenerationParameters, SphincsPlusParameters, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusAlgorithm>, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey, SphincsPlusKeyGenerationParameters, SphincsPlusParameters, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusAlgorithm>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey, SphincsPlusKeyPairGenerator, SphincsPlusKeyGenerationParameters, SphincsPlusParameters, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusAlgorithm>>, IEquatable<AsymmetricSphincsPlusAlgorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"SPHINCSPLUS\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 5 Field Value Type Description int | Edit this page View Source DEFAULT_KEY_SIZE Default key size in bits Declaration public const int DEFAULT_KEY_SIZE = 256 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"SPHINCS+\" Field Value Type Description string | Edit this page View Source USAGES Algorithm usages Declaration public const AsymmetricAlgorithmUsages USAGES = Signature Field Value Type Description AsymmetricAlgorithmUsages Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPublicKeyStandardFormat Is the public key exported in a standard format? Declaration public override bool IsPublicKeyStandardFormat { get; } Property Value Type Description bool Overrides wan24.Crypto.AsymmetricAlgorithmBase<wan24.Crypto.BC.AsymmetricSphincsPlusPublicKey, wan24.Crypto.BC.AsymmetricSphincsPlusPrivateKey>.IsPublicKeyStandardFormat Methods | Edit this page View Source GetEngineParameters(CryptoOptions) Get the cipher engine parameters Declaration protected override SphincsPlusParameters GetEngineParameters(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description SphincsPlusParameters Parameters Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey, SphincsPlusKeyGenerationParameters, SphincsPlusParameters, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusAlgorithm>.GetEngineParameters(CryptoOptions) Implements IEquatable<T> wan24.Crypto.IAsymmetricAlgorithm wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricSphincsPlusHelper.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricSphincsPlusHelper.html",
    "title": "Class AsymmetricSphincsPlusHelper | wan24-Crypto-BC",
    "keywords": "Class AsymmetricSphincsPlusHelper SPHINCS+ asymmetric algorithm helper Inheritance object AsymmetricSphincsPlusHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public static class AsymmetricSphincsPlusHelper Methods | Edit this page View Source GetKeySize(SphincsPlusParameters) Get the key size in bits Declaration public static int GetKeySize(this SphincsPlusParameters param) Parameters Type Name Description SphincsPlusParameters param Parameters Returns Type Description int Key size in bits | Edit this page View Source GetParameters(int) Get the SPHINCS+ parameters Declaration public static SphincsPlusParameters GetParameters(int keySize) Parameters Type Name Description int keySize Key size in bits Returns Type Description SphincsPlusParameters Parameters"
  },
  "api/wan24.Crypto.BC.AsymmetricSphincsPlusPrivateKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricSphincsPlusPrivateKey.html",
    "title": "Class AsymmetricSphincsPlusPrivateKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricSphincsPlusPrivateKey SPHINCS+ asymmetric private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey> BouncyCastleAsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusPrivateKey> BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusPrivateKey> BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, SphincsPlusSigner, AsymmetricSphincsPlusPrivateKey> AsymmetricSphincsPlusPrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusPrivateKey>> IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusPrivateKey>> ISignaturePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, SphincsPlusSigner, AsymmetricSphincsPlusPrivateKey>> IEquatable<AsymmetricSphincsPlusPrivateKey> Inherited Members BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, SphincsPlusSigner, AsymmetricSphincsPlusPrivateKey>.SignHashRaw(byte[]) BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusPrivateKey>.ExportBc() BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusPrivateKey>.ImportBc(in byte[]) BouncyCastleAsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusPrivateKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusPrivateKey>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusPrivateKey>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusPrivateKey>.Bits AsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.GetCopy() AsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.ToString() AsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.GetHashCode() AsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.Equals(object) AsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.Equals(AsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>) AsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.<Clone>$() AsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.PublicKey AsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricSphincsPlusPrivateKey : BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, SphincsPlusSigner, AsymmetricSphincsPlusPrivateKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusPrivateKey>>, IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusPrivateKey>>, ISignaturePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, SphincsPlusSigner, AsymmetricSphincsPlusPrivateKey>>, IEquatable<AsymmetricSphincsPlusPrivateKey> Constructors | Edit this page View Source AsymmetricSphincsPlusPrivateKey() Constructor Declaration public AsymmetricSphincsPlusPrivateKey() | Edit this page View Source AsymmetricSphincsPlusPrivateKey(AsymmetricCipherKeyPair) Constructor Declaration public AsymmetricSphincsPlusPrivateKey(AsymmetricCipherKeyPair keys) Parameters Type Name Description AsymmetricCipherKeyPair keys Keys | Edit this page View Source AsymmetricSphincsPlusPrivateKey(SphincsPlusPrivateKeyParameters) Constructor Declaration public AsymmetricSphincsPlusPrivateKey(SphincsPlusPrivateKeyParameters privateKey) Parameters Type Name Description SphincsPlusPrivateKeyParameters privateKey Private key | Edit this page View Source AsymmetricSphincsPlusPrivateKey(byte[]) Constructor Declaration public AsymmetricSphincsPlusPrivateKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Methods | Edit this page View Source DeserializeKeyData() Deserialize the key data Declaration protected override void DeserializeKeyData() Overrides BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusPrivateKey>.DeserializeKeyData() | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusPrivateKey>.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricSphincsPlusPublicKey, wan24.Crypto.BC.AsymmetricSphincsPlusPrivateKey>.DisposeCore() | Edit this page View Source GetPublicKey(SphincsPlusPrivateKeyParameters) Get the public key from a private key Declaration protected override SphincsPlusPublicKeyParameters GetPublicKey(SphincsPlusPrivateKeyParameters privateKey) Parameters Type Name Description SphincsPlusPrivateKeyParameters privateKey Private key Returns Type Description SphincsPlusPublicKeyParameters Public key Overrides BouncyCastleAsymmetricPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusPrivateKey>.GetPublicKey(SphincsPlusPrivateKeyParameters) | Edit this page View Source SerializeKeyData() Serialize the key data Declaration protected override byte[] SerializeKeyData() Returns Type Description byte[] Serialized key data Overrides BouncyCastleAsymmetricPqcPrivateKeyBase<AsymmetricSphincsPlusPublicKey, AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusPrivateKeyParameters, AsymmetricSphincsPlusPrivateKey>.SerializeKeyData() Operators | Edit this page View Source explicit operator AsymmetricSphincsPlusPrivateKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricSphincsPlusPrivateKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricSphincsPlusPrivateKey | Edit this page View Source implicit operator AsymmetricSphincsPlusPublicKey(AsymmetricSphincsPlusPrivateKey) Cast to public key Declaration public static implicit operator AsymmetricSphincsPlusPublicKey(AsymmetricSphincsPlusPrivateKey privateKey) Parameters Type Name Description AsymmetricSphincsPlusPrivateKey privateKey Private key Returns Type Description AsymmetricSphincsPlusPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePrivateKey wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricSphincsPlusPublicKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricSphincsPlusPublicKey.html",
    "title": "Class AsymmetricSphincsPlusPublicKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricSphincsPlusPublicKey SPHINCS+ asymmetric public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, AsymmetricSphincsPlusPublicKey> BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, AsymmetricSphincsPlusPublicKey> BouncyCastleAsymmetricPqcPublicSignatureKeyBase<AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusSigner, AsymmetricSphincsPlusPublicKey> AsymmetricSphincsPlusPublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, AsymmetricSphincsPlusPublicKey>> IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, AsymmetricSphincsPlusPublicKey>> ISignaturePublicKey IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<BouncyCastleAsymmetricPqcPublicSignatureKeyBase<AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusSigner, AsymmetricSphincsPlusPublicKey>> IEquatable<AsymmetricSphincsPlusPublicKey> Inherited Members BouncyCastleAsymmetricPqcPublicSignatureKeyBase<AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusSigner, AsymmetricSphincsPlusPublicKey>.ValidateSignatureRaw(byte[], byte[], bool) BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, AsymmetricSphincsPlusPublicKey>.ExportBc() BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, AsymmetricSphincsPlusPublicKey>.ImportBc(in byte[]) BouncyCastleAsymmetricPublicKeyBase<AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, AsymmetricSphincsPlusPublicKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPublicKeyBase<AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, AsymmetricSphincsPlusPublicKey>.PublicKey BouncyCastleAsymmetricPublicKeyBase<AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, AsymmetricSphincsPlusPublicKey>.GetCopy() AsymmetricPublicKeyBase.GetCopy() AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricSphincsPlusPublicKey : BouncyCastleAsymmetricPqcPublicSignatureKeyBase<AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusSigner, AsymmetricSphincsPlusPublicKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, AsymmetricSphincsPlusPublicKey>>, IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, AsymmetricSphincsPlusPublicKey>>, ISignaturePublicKey, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<BouncyCastleAsymmetricPqcPublicSignatureKeyBase<AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, SphincsPlusSigner, AsymmetricSphincsPlusPublicKey>>, IEquatable<AsymmetricSphincsPlusPublicKey> Constructors | Edit this page View Source AsymmetricSphincsPlusPublicKey() Constructor Declaration public AsymmetricSphincsPlusPublicKey() | Edit this page View Source AsymmetricSphincsPlusPublicKey(SphincsPlusPublicKeyParameters) Constructor Declaration public AsymmetricSphincsPlusPublicKey(SphincsPlusPublicKeyParameters publicKey) Parameters Type Name Description SphincsPlusPublicKeyParameters publicKey Public key | Edit this page View Source AsymmetricSphincsPlusPublicKey(byte[]) Constructor Declaration public AsymmetricSphincsPlusPublicKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides wan24.Crypto.AsymmetricKeyBase.Bits Methods | Edit this page View Source DeserializeKeyData() Deserialize the key data Declaration protected override void DeserializeKeyData() Overrides BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, AsymmetricSphincsPlusPublicKey>.DeserializeKeyData() | Edit this page View Source SerializeKeyData() Serialize the key data Declaration protected override byte[] SerializeKeyData() Returns Type Description byte[] Serialized key data Overrides BouncyCastleAsymmetricPqcPublicKeyBase<AsymmetricSphincsPlusAlgorithm, SphincsPlusPublicKeyParameters, AsymmetricSphincsPlusPublicKey>.SerializeKeyData() Operators | Edit this page View Source explicit operator AsymmetricSphincsPlusPublicKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricSphincsPlusPublicKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricSphincsPlusPublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePublicKey wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricX25519Algorithm.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricX25519Algorithm.html",
    "title": "Class AsymmetricX25519Algorithm | wan24-Crypto-BC",
    "keywords": "Class AsymmetricX25519Algorithm X25519 asymmetric algorithm (128 bit security)) Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey> BouncyCastleAsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey, X25519KeyGenerationParameters, AsymmetricKeyParameter, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519Algorithm> BouncyCastleAsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey, X25519KeyPairGenerator, X25519KeyGenerationParameters, AsymmetricKeyParameter, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519Algorithm> AsymmetricX25519Algorithm Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey, X25519KeyGenerationParameters, AsymmetricKeyParameter, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519Algorithm>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey, X25519KeyPairGenerator, X25519KeyGenerationParameters, AsymmetricKeyParameter, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519Algorithm>> IEquatable<AsymmetricX25519Algorithm> Inherited Members BouncyCastleAsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey, X25519KeyPairGenerator, X25519KeyGenerationParameters, AsymmetricKeyParameter, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519Algorithm>.CreateKeyPair(CryptoOptions) BouncyCastleAsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey, X25519KeyGenerationParameters, AsymmetricKeyParameter, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519Algorithm>.Instance BouncyCastleAsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey, X25519KeyGenerationParameters, AsymmetricKeyParameter, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519Algorithm>.Usages BouncyCastleAsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey, X25519KeyGenerationParameters, AsymmetricKeyParameter, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519Algorithm>.IsEllipticCurveAlgorithm BouncyCastleAsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey, X25519KeyGenerationParameters, AsymmetricKeyParameter, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519Algorithm>.AllowedKeySizes BouncyCastleAsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey, X25519KeyGenerationParameters, AsymmetricKeyParameter, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519Algorithm>.IsPostQuantum BouncyCastleAsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey, X25519KeyGenerationParameters, AsymmetricKeyParameter, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519Algorithm>.DeserializePrivateKeyV1(byte[]) BouncyCastleAsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey, X25519KeyGenerationParameters, AsymmetricKeyParameter, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519Algorithm>.Register() AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.EnsureDefaultOptions(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.EnsureAllowed(in bool) AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.CreateKeyPair(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.CreateKeyPairAsync(CryptoOptions, CancellationToken) AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.DeserializePublicKey(byte[]) AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.DeserializePrivateKey(byte[]) AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.DeserializePrivateKeyV1(byte[]) AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.DeriveKey(byte[], CryptoOptions) AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.CanHandleNetAlgorithm(AsymmetricAlgorithm) AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.ToString() AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.GetHashCode() AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.Equals(object) AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.Equals(CryptoAlgorithmBase) AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.Equals(AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>) AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.<Clone>$() AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.PrivateKeyType AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.PublicKeyType AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.DefaultOptions AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.DefaultAlgorithmOptions AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.Usages AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.CanExchangeKey AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.CanSign AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.IsEllipticCurveAlgorithm AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.IsPublicKeyStandardFormat AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.AllowedKeySizes AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.DefaultKeySize AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.IsDenied AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.KeyPool AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.GetHashCode() CryptoAlgorithmBase.Equals(object) CryptoAlgorithmBase.Equals(CryptoAlgorithmBase) CryptoAlgorithmBase.<Clone>$() CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.State object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricX25519Algorithm : BouncyCastleAsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey, X25519KeyPairGenerator, X25519KeyGenerationParameters, AsymmetricKeyParameter, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519Algorithm>, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey, X25519KeyGenerationParameters, AsymmetricKeyParameter, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519Algorithm>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey, X25519KeyPairGenerator, X25519KeyGenerationParameters, AsymmetricKeyParameter, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519Algorithm>>, IEquatable<AsymmetricX25519Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"X25519\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 10 Field Value Type Description int | Edit this page View Source DEFAULT_KEY_SIZE Default key size in bits Declaration public const int DEFAULT_KEY_SIZE = 256 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"X25519\" Field Value Type Description string | Edit this page View Source USAGES Algorithm usages Declaration public const AsymmetricAlgorithmUsages USAGES = KeyExchange Field Value Type Description AsymmetricAlgorithmUsages Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPublicKeyStandardFormat Is the public key exported in a standard format? Declaration public override bool IsPublicKeyStandardFormat { get; } Property Value Type Description bool Overrides wan24.Crypto.AsymmetricAlgorithmBase<wan24.Crypto.BC.AsymmetricX25519PublicKey, wan24.Crypto.BC.AsymmetricX25519PrivateKey>.IsPublicKeyStandardFormat Methods | Edit this page View Source CreateKeyPair(CryptoOptions?) Declaration public override AsymmetricX25519PrivateKey CreateKeyPair(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Returns Type Description AsymmetricX25519PrivateKey Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey, X25519KeyPairGenerator, X25519KeyGenerationParameters, AsymmetricKeyParameter, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519Algorithm>.CreateKeyPair(CryptoOptions) | Edit this page View Source GetEngineParameters(CryptoOptions) Get the cipher engine parameters Declaration protected override AsymmetricKeyParameter GetEngineParameters(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description AsymmetricKeyParameter Parameters Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey, X25519KeyGenerationParameters, AsymmetricKeyParameter, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519Algorithm>.GetEngineParameters(CryptoOptions) Implements IEquatable<T> wan24.Crypto.IAsymmetricAlgorithm wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricX25519PrivateKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricX25519PrivateKey.html",
    "title": "Class AsymmetricX25519PrivateKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricX25519PrivateKey X25519 asymmetric private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey> BouncyCastleAsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519Algorithm, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519PrivateKey> BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519Algorithm, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519PrivateKey> AsymmetricX25519PrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519Algorithm, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519PrivateKey>> IEquatable<BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519Algorithm, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519PrivateKey>> IKeyExchangePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IKeyExchange IEquatable<AsymmetricX25519PrivateKey> Inherited Members BouncyCastleAsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519Algorithm, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519PrivateKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519Algorithm, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519PrivateKey>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519Algorithm, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519PrivateKey>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519Algorithm, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519PrivateKey>.Bits BouncyCastleAsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519Algorithm, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519PrivateKey>.ExportBc() BouncyCastleAsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519Algorithm, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519PrivateKey>.ImportBc(in byte[]) AsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.GetCopy() AsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.ToString() AsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.GetHashCode() AsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.Equals(object) AsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.Equals(AsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>) AsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.<Clone>$() AsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.PublicKey AsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricX25519PrivateKey : BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519Algorithm, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519PrivateKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519Algorithm, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519PrivateKey>>, IEquatable<BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519Algorithm, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519PrivateKey>>, IKeyExchangePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IKeyExchange, IEquatable<AsymmetricX25519PrivateKey> Constructors | Edit this page View Source AsymmetricX25519PrivateKey() Constructor Declaration public AsymmetricX25519PrivateKey() | Edit this page View Source AsymmetricX25519PrivateKey(AsymmetricCipherKeyPair) Constructor Declaration public AsymmetricX25519PrivateKey(AsymmetricCipherKeyPair keys) Parameters Type Name Description AsymmetricCipherKeyPair keys Keys | Edit this page View Source AsymmetricX25519PrivateKey(X25519PrivateKeyParameters) Constructor Declaration public AsymmetricX25519PrivateKey(X25519PrivateKeyParameters privateKey) Parameters Type Name Description X25519PrivateKeyParameters privateKey Private key | Edit this page View Source AsymmetricX25519PrivateKey(byte[]) Constructor Declaration public AsymmetricX25519PrivateKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Methods | Edit this page View Source DeriveKey(byte[]) Declaration public override byte[] DeriveKey(byte[] keyExchangeData) Parameters Type Name Description byte[] keyExchangeData Returns Type Description byte[] Overrides AsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.DeriveKey(byte[]) | Edit this page View Source DeriveKey(IAsymmetricPublicKey) Declaration public override byte[] DeriveKey(IAsymmetricPublicKey publicKey) Parameters Type Name Description IAsymmetricPublicKey publicKey Returns Type Description byte[] Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricX25519PublicKey, wan24.Crypto.BC.AsymmetricX25519PrivateKey>.DeriveKey(wan24.Crypto.IAsymmetricPublicKey) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519PrivateKey>.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricX25519PublicKey, wan24.Crypto.BC.AsymmetricX25519PrivateKey>.DisposeCore() | Edit this page View Source GetKeyExchangeData(IAsymmetricPublicKey?, CryptoOptions?) Declaration public override (byte[] Key, byte[] KeyExchangeData) GetKeyExchangeData(IAsymmetricPublicKey? publicKey = null, CryptoOptions? options = null) Parameters Type Name Description IAsymmetricPublicKey publicKey CryptoOptions options Returns Type Description (byte[] Key, byte[] KeyExchangeData) Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricX25519PublicKey, wan24.Crypto.BC.AsymmetricX25519PrivateKey>.GetKeyExchangeData(wan24.Crypto.IAsymmetricPublicKey, wan24.Crypto.CryptoOptions) | Edit this page View Source GetPublicKey(X25519PrivateKeyParameters) Get the public key from a private key Declaration protected override X25519PublicKeyParameters GetPublicKey(X25519PrivateKeyParameters privateKey) Parameters Type Name Description X25519PrivateKeyParameters privateKey Private key Returns Type Description X25519PublicKeyParameters Public key Overrides BouncyCastleAsymmetricPrivateKeyBase<AsymmetricX25519PublicKey, AsymmetricX25519Algorithm, X25519PublicKeyParameters, X25519PrivateKeyParameters, AsymmetricX25519PrivateKey>.GetPublicKey(X25519PrivateKeyParameters) Operators | Edit this page View Source explicit operator AsymmetricX25519PrivateKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricX25519PrivateKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricX25519PrivateKey | Edit this page View Source implicit operator AsymmetricX25519PublicKey(AsymmetricX25519PrivateKey) Cast to public key Declaration public static implicit operator AsymmetricX25519PublicKey(AsymmetricX25519PrivateKey privateKey) Parameters Type Name Description AsymmetricX25519PrivateKey privateKey Private key Returns Type Description AsymmetricX25519PublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.IKeyExchangePrivateKey wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider wan24.Crypto.IKeyExchange IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricX25519PublicKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricX25519PublicKey.html",
    "title": "Class AsymmetricX25519PublicKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricX25519PublicKey X25519 asymmetric public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<AsymmetricX25519Algorithm, X25519PublicKeyParameters, AsymmetricX25519PublicKey> BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricX25519Algorithm, X25519PublicKeyParameters, AsymmetricX25519PublicKey> AsymmetricX25519PublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricX25519Algorithm, X25519PublicKeyParameters, AsymmetricX25519PublicKey>> IEquatable<BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricX25519Algorithm, X25519PublicKeyParameters, AsymmetricX25519PublicKey>> IEquatable<AsymmetricX25519PublicKey> Inherited Members BouncyCastleAsymmetricPublicKeyBase<AsymmetricX25519Algorithm, X25519PublicKeyParameters, AsymmetricX25519PublicKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPublicKeyBase<AsymmetricX25519Algorithm, X25519PublicKeyParameters, AsymmetricX25519PublicKey>.PublicKey BouncyCastleAsymmetricPublicKeyBase<AsymmetricX25519Algorithm, X25519PublicKeyParameters, AsymmetricX25519PublicKey>.ExportBc() BouncyCastleAsymmetricPublicKeyBase<AsymmetricX25519Algorithm, X25519PublicKeyParameters, AsymmetricX25519PublicKey>.GetCopy() BouncyCastleAsymmetricPublicKeyBase<AsymmetricX25519Algorithm, X25519PublicKeyParameters, AsymmetricX25519PublicKey>.ImportBc(in byte[]) AsymmetricPublicKeyBase.GetCopy() AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricX25519PublicKey : BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricX25519Algorithm, X25519PublicKeyParameters, AsymmetricX25519PublicKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricX25519Algorithm, X25519PublicKeyParameters, AsymmetricX25519PublicKey>>, IEquatable<BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricX25519Algorithm, X25519PublicKeyParameters, AsymmetricX25519PublicKey>>, IEquatable<AsymmetricX25519PublicKey> Constructors | Edit this page View Source AsymmetricX25519PublicKey() Constructor Declaration public AsymmetricX25519PublicKey() | Edit this page View Source AsymmetricX25519PublicKey(X25519PublicKeyParameters) Constructor Declaration public AsymmetricX25519PublicKey(X25519PublicKeyParameters publicKey) Parameters Type Name Description X25519PublicKeyParameters publicKey Public key | Edit this page View Source AsymmetricX25519PublicKey(byte[]) Constructor Declaration public AsymmetricX25519PublicKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides wan24.Crypto.AsymmetricKeyBase.Bits Operators | Edit this page View Source explicit operator AsymmetricX25519PublicKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricX25519PublicKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricX25519PublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricX448Algorithm.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricX448Algorithm.html",
    "title": "Class AsymmetricX448Algorithm | wan24-Crypto-BC",
    "keywords": "Class AsymmetricX448Algorithm X448 asymmetric algorithm (224 bit security)) Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey> BouncyCastleAsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey, X448KeyGenerationParameters, AsymmetricKeyParameter, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448Algorithm> BouncyCastleAsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey, X448KeyPairGenerator, X448KeyGenerationParameters, AsymmetricKeyParameter, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448Algorithm> AsymmetricX448Algorithm Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey, X448KeyGenerationParameters, AsymmetricKeyParameter, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448Algorithm>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey, X448KeyPairGenerator, X448KeyGenerationParameters, AsymmetricKeyParameter, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448Algorithm>> IEquatable<AsymmetricX448Algorithm> Inherited Members BouncyCastleAsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey, X448KeyPairGenerator, X448KeyGenerationParameters, AsymmetricKeyParameter, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448Algorithm>.CreateKeyPair(CryptoOptions) BouncyCastleAsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey, X448KeyGenerationParameters, AsymmetricKeyParameter, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448Algorithm>.Instance BouncyCastleAsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey, X448KeyGenerationParameters, AsymmetricKeyParameter, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448Algorithm>.Usages BouncyCastleAsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey, X448KeyGenerationParameters, AsymmetricKeyParameter, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448Algorithm>.IsEllipticCurveAlgorithm BouncyCastleAsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey, X448KeyGenerationParameters, AsymmetricKeyParameter, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448Algorithm>.AllowedKeySizes BouncyCastleAsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey, X448KeyGenerationParameters, AsymmetricKeyParameter, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448Algorithm>.IsPostQuantum BouncyCastleAsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey, X448KeyGenerationParameters, AsymmetricKeyParameter, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448Algorithm>.DeserializePrivateKeyV1(byte[]) BouncyCastleAsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey, X448KeyGenerationParameters, AsymmetricKeyParameter, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448Algorithm>.Register() AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.EnsureDefaultOptions(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.EnsureAllowed(in bool) AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.CreateKeyPair(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.CreateKeyPairAsync(CryptoOptions, CancellationToken) AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.DeserializePublicKey(byte[]) AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.DeserializePrivateKey(byte[]) AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.DeserializePrivateKeyV1(byte[]) AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.DeriveKey(byte[], CryptoOptions) AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.CanHandleNetAlgorithm(AsymmetricAlgorithm) AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.ToString() AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.GetHashCode() AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.Equals(object) AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.Equals(CryptoAlgorithmBase) AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.Equals(AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>) AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.<Clone>$() AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.PrivateKeyType AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.PublicKeyType AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.DefaultOptions AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.DefaultAlgorithmOptions AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.Usages AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.CanExchangeKey AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.CanSign AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.IsEllipticCurveAlgorithm AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.IsPublicKeyStandardFormat AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.AllowedKeySizes AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.DefaultKeySize AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.IsDenied AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.KeyPool AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.GetHashCode() CryptoAlgorithmBase.Equals(object) CryptoAlgorithmBase.Equals(CryptoAlgorithmBase) CryptoAlgorithmBase.<Clone>$() CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.State object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricX448Algorithm : BouncyCastleAsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey, X448KeyPairGenerator, X448KeyGenerationParameters, AsymmetricKeyParameter, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448Algorithm>, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey, X448KeyGenerationParameters, AsymmetricKeyParameter, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448Algorithm>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey, X448KeyPairGenerator, X448KeyGenerationParameters, AsymmetricKeyParameter, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448Algorithm>>, IEquatable<AsymmetricX448Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"X448\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 11 Field Value Type Description int | Edit this page View Source DEFAULT_KEY_SIZE Default key size in bits Declaration public const int DEFAULT_KEY_SIZE = 456 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"X448\" Field Value Type Description string | Edit this page View Source USAGES Algorithm usages Declaration public const AsymmetricAlgorithmUsages USAGES = KeyExchange Field Value Type Description AsymmetricAlgorithmUsages Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPublicKeyStandardFormat Is the public key exported in a standard format? Declaration public override bool IsPublicKeyStandardFormat { get; } Property Value Type Description bool Overrides wan24.Crypto.AsymmetricAlgorithmBase<wan24.Crypto.BC.AsymmetricX448PublicKey, wan24.Crypto.BC.AsymmetricX448PrivateKey>.IsPublicKeyStandardFormat Methods | Edit this page View Source CreateKeyPair(CryptoOptions?) Declaration public override AsymmetricX448PrivateKey CreateKeyPair(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Returns Type Description AsymmetricX448PrivateKey Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey, X448KeyPairGenerator, X448KeyGenerationParameters, AsymmetricKeyParameter, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448Algorithm>.CreateKeyPair(CryptoOptions) | Edit this page View Source GetEngineParameters(CryptoOptions) Get the cipher engine parameters Declaration protected override AsymmetricKeyParameter GetEngineParameters(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description AsymmetricKeyParameter Parameters Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey, X448KeyGenerationParameters, AsymmetricKeyParameter, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448Algorithm>.GetEngineParameters(CryptoOptions) Implements IEquatable<T> wan24.Crypto.IAsymmetricAlgorithm wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricX448PrivateKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricX448PrivateKey.html",
    "title": "Class AsymmetricX448PrivateKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricX448PrivateKey X448 asymmetric private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey> BouncyCastleAsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448Algorithm, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448PrivateKey> BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448Algorithm, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448PrivateKey> AsymmetricX448PrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448Algorithm, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448PrivateKey>> IEquatable<BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448Algorithm, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448PrivateKey>> IKeyExchangePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IKeyExchange IEquatable<AsymmetricX448PrivateKey> Inherited Members BouncyCastleAsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448Algorithm, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448PrivateKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448Algorithm, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448PrivateKey>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448Algorithm, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448PrivateKey>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448Algorithm, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448PrivateKey>.Bits BouncyCastleAsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448Algorithm, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448PrivateKey>.ExportBc() BouncyCastleAsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448Algorithm, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448PrivateKey>.ImportBc(in byte[]) AsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.GetCopy() AsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.ToString() AsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.GetHashCode() AsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.Equals(object) AsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.Equals(AsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>) AsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.<Clone>$() AsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.PublicKey AsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricX448PrivateKey : BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448Algorithm, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448PrivateKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448Algorithm, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448PrivateKey>>, IEquatable<BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448Algorithm, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448PrivateKey>>, IKeyExchangePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IKeyExchange, IEquatable<AsymmetricX448PrivateKey> Constructors | Edit this page View Source AsymmetricX448PrivateKey() Constructor Declaration public AsymmetricX448PrivateKey() | Edit this page View Source AsymmetricX448PrivateKey(AsymmetricCipherKeyPair) Constructor Declaration public AsymmetricX448PrivateKey(AsymmetricCipherKeyPair keys) Parameters Type Name Description AsymmetricCipherKeyPair keys Keys | Edit this page View Source AsymmetricX448PrivateKey(X448PrivateKeyParameters) Constructor Declaration public AsymmetricX448PrivateKey(X448PrivateKeyParameters privateKey) Parameters Type Name Description X448PrivateKeyParameters privateKey Private key | Edit this page View Source AsymmetricX448PrivateKey(byte[]) Constructor Declaration public AsymmetricX448PrivateKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides BouncyCastleAsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448Algorithm, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448PrivateKey>.Bits Methods | Edit this page View Source DeriveKey(byte[]) Declaration public override byte[] DeriveKey(byte[] keyExchangeData) Parameters Type Name Description byte[] keyExchangeData Returns Type Description byte[] Overrides AsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.DeriveKey(byte[]) | Edit this page View Source DeriveKey(IAsymmetricPublicKey) Declaration public override byte[] DeriveKey(IAsymmetricPublicKey publicKey) Parameters Type Name Description IAsymmetricPublicKey publicKey Returns Type Description byte[] Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricX448PublicKey, wan24.Crypto.BC.AsymmetricX448PrivateKey>.DeriveKey(wan24.Crypto.IAsymmetricPublicKey) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448PrivateKey>.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricX448PublicKey, wan24.Crypto.BC.AsymmetricX448PrivateKey>.DisposeCore() | Edit this page View Source GetKeyExchangeData(IAsymmetricPublicKey?, CryptoOptions?) Declaration public override (byte[] Key, byte[] KeyExchangeData) GetKeyExchangeData(IAsymmetricPublicKey? publicKey = null, CryptoOptions? options = null) Parameters Type Name Description IAsymmetricPublicKey publicKey CryptoOptions options Returns Type Description (byte[] Key, byte[] KeyExchangeData) Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricX448PublicKey, wan24.Crypto.BC.AsymmetricX448PrivateKey>.GetKeyExchangeData(wan24.Crypto.IAsymmetricPublicKey, wan24.Crypto.CryptoOptions) | Edit this page View Source GetPublicKey(X448PrivateKeyParameters) Get the public key from a private key Declaration protected override X448PublicKeyParameters GetPublicKey(X448PrivateKeyParameters privateKey) Parameters Type Name Description X448PrivateKeyParameters privateKey Private key Returns Type Description X448PublicKeyParameters Public key Overrides BouncyCastleAsymmetricPrivateKeyBase<AsymmetricX448PublicKey, AsymmetricX448Algorithm, X448PublicKeyParameters, X448PrivateKeyParameters, AsymmetricX448PrivateKey>.GetPublicKey(X448PrivateKeyParameters) Operators | Edit this page View Source explicit operator AsymmetricX448PrivateKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricX448PrivateKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricX448PrivateKey | Edit this page View Source implicit operator AsymmetricX448PublicKey(AsymmetricX448PrivateKey) Cast to public key Declaration public static implicit operator AsymmetricX448PublicKey(AsymmetricX448PrivateKey privateKey) Parameters Type Name Description AsymmetricX448PrivateKey privateKey Private key Returns Type Description AsymmetricX448PublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.IKeyExchangePrivateKey wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider wan24.Crypto.IKeyExchange IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricX448PublicKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricX448PublicKey.html",
    "title": "Class AsymmetricX448PublicKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricX448PublicKey X448 asymmetric public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<AsymmetricX448Algorithm, X448PublicKeyParameters, AsymmetricX448PublicKey> BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricX448Algorithm, X448PublicKeyParameters, AsymmetricX448PublicKey> AsymmetricX448PublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricX448Algorithm, X448PublicKeyParameters, AsymmetricX448PublicKey>> IEquatable<BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricX448Algorithm, X448PublicKeyParameters, AsymmetricX448PublicKey>> IEquatable<AsymmetricX448PublicKey> Inherited Members BouncyCastleAsymmetricPublicKeyBase<AsymmetricX448Algorithm, X448PublicKeyParameters, AsymmetricX448PublicKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPublicKeyBase<AsymmetricX448Algorithm, X448PublicKeyParameters, AsymmetricX448PublicKey>.PublicKey BouncyCastleAsymmetricPublicKeyBase<AsymmetricX448Algorithm, X448PublicKeyParameters, AsymmetricX448PublicKey>.ExportBc() BouncyCastleAsymmetricPublicKeyBase<AsymmetricX448Algorithm, X448PublicKeyParameters, AsymmetricX448PublicKey>.GetCopy() BouncyCastleAsymmetricPublicKeyBase<AsymmetricX448Algorithm, X448PublicKeyParameters, AsymmetricX448PublicKey>.ImportBc(in byte[]) AsymmetricPublicKeyBase.GetCopy() AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricX448PublicKey : BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricX448Algorithm, X448PublicKeyParameters, AsymmetricX448PublicKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricX448Algorithm, X448PublicKeyParameters, AsymmetricX448PublicKey>>, IEquatable<BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricX448Algorithm, X448PublicKeyParameters, AsymmetricX448PublicKey>>, IEquatable<AsymmetricX448PublicKey> Constructors | Edit this page View Source AsymmetricX448PublicKey() Constructor Declaration public AsymmetricX448PublicKey() | Edit this page View Source AsymmetricX448PublicKey(X448PublicKeyParameters) Constructor Declaration public AsymmetricX448PublicKey(X448PublicKeyParameters publicKey) Parameters Type Name Description X448PublicKeyParameters publicKey Public key | Edit this page View Source AsymmetricX448PublicKey(byte[]) Constructor Declaration public AsymmetricX448PublicKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides wan24.Crypto.AsymmetricKeyBase.Bits Operators | Edit this page View Source explicit operator AsymmetricX448PublicKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricX448PublicKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricX448PublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricXEd25519Algorithm.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricXEd25519Algorithm.html",
    "title": "Class AsymmetricXEd25519Algorithm | wan24-Crypto-BC",
    "keywords": "Class AsymmetricXEd25519Algorithm XEd25519 asymmetric algorithm (converts the used Ed25519 private key to a X25519 private key for key exchange, 128 bit security) Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey> BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519Algorithm> BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey, Ed25519KeyPairGenerator, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519Algorithm> AsymmetricXEd25519Algorithm Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519Algorithm>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey, Ed25519KeyPairGenerator, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519Algorithm>> IEquatable<AsymmetricXEd25519Algorithm> Inherited Members BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey, Ed25519KeyPairGenerator, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519Algorithm>.CreateKeyPair(CryptoOptions) BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519Algorithm>.Instance BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519Algorithm>.Usages BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519Algorithm>.IsEllipticCurveAlgorithm BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519Algorithm>.AllowedKeySizes BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519Algorithm>.IsPostQuantum BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519Algorithm>.DeserializePrivateKeyV1(byte[]) BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519Algorithm>.Register() AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.EnsureDefaultOptions(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.EnsureAllowed(in bool) AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.CreateKeyPair(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.CreateKeyPairAsync(CryptoOptions, CancellationToken) AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.DeserializePublicKey(byte[]) AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.DeserializePrivateKey(byte[]) AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.DeserializePrivateKeyV1(byte[]) AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.DeriveKey(byte[], CryptoOptions) AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.CanHandleNetAlgorithm(AsymmetricAlgorithm) AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.ToString() AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.GetHashCode() AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.Equals(object) AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.Equals(CryptoAlgorithmBase) AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.Equals(AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>) AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.<Clone>$() AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.PrivateKeyType AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.PublicKeyType AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.DefaultOptions AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.DefaultAlgorithmOptions AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.Usages AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.CanExchangeKey AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.CanSign AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.IsEllipticCurveAlgorithm AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.IsPublicKeyStandardFormat AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.AllowedKeySizes AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.DefaultKeySize AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.IsDenied AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.KeyPool AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.GetHashCode() CryptoAlgorithmBase.Equals(object) CryptoAlgorithmBase.Equals(CryptoAlgorithmBase) CryptoAlgorithmBase.<Clone>$() CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.State object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricXEd25519Algorithm : BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey, Ed25519KeyPairGenerator, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519Algorithm>, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519Algorithm>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey, Ed25519KeyPairGenerator, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519Algorithm>>, IEquatable<AsymmetricXEd25519Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"XED25519\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 12 Field Value Type Description int | Edit this page View Source DEFAULT_KEY_SIZE Default key size in bits Declaration public const int DEFAULT_KEY_SIZE = 256 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"XEd25519\" Field Value Type Description string | Edit this page View Source USAGES Algorithm usages Declaration public const AsymmetricAlgorithmUsages USAGES = KeyExchange | Signature Field Value Type Description AsymmetricAlgorithmUsages Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPublicKeyStandardFormat Is the public key exported in a standard format? Declaration public override bool IsPublicKeyStandardFormat { get; } Property Value Type Description bool Overrides wan24.Crypto.AsymmetricAlgorithmBase<wan24.Crypto.BC.AsymmetricXEd25519PublicKey, wan24.Crypto.BC.AsymmetricXEd25519PrivateKey>.IsPublicKeyStandardFormat Methods | Edit this page View Source CreateKeyPair(CryptoOptions?) Declaration public override AsymmetricXEd25519PrivateKey CreateKeyPair(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Returns Type Description AsymmetricXEd25519PrivateKey Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey, Ed25519KeyPairGenerator, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519Algorithm>.CreateKeyPair(CryptoOptions) | Edit this page View Source GetEngineParameters(CryptoOptions) Get the cipher engine parameters Declaration protected override AsymmetricKeyParameter GetEngineParameters(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description AsymmetricKeyParameter Parameters Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey, Ed25519KeyGenerationParameters, AsymmetricKeyParameter, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519Algorithm>.GetEngineParameters(CryptoOptions) Implements IEquatable<T> wan24.Crypto.IAsymmetricAlgorithm wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricXEd25519PrivateKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricXEd25519PrivateKey.html",
    "title": "Class AsymmetricXEd25519PrivateKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricXEd25519PrivateKey XEd25519 asymmetric private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey> BouncyCastleAsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519PrivateKey> BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519PrivateKey> BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, Ed25519Signer, AsymmetricXEd25519PrivateKey> AsymmetricXEd25519PrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519PrivateKey>> IEquatable<BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519PrivateKey>> ISignaturePrivateKey IEquatable<BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, Ed25519Signer, AsymmetricXEd25519PrivateKey>> IKeyExchangePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IKeyExchange IEquatable<AsymmetricXEd25519PrivateKey> Inherited Members BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, Ed25519Signer, AsymmetricXEd25519PrivateKey>.SignHashRaw(byte[]) BouncyCastleAsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519PrivateKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519PrivateKey>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519PrivateKey>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519PrivateKey>.Bits BouncyCastleAsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519PrivateKey>.ExportBc() BouncyCastleAsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519PrivateKey>.ImportBc(in byte[]) AsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.GetCopy() AsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.ToString() AsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.GetHashCode() AsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.Equals(object) AsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.Equals(AsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>) AsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.<Clone>$() AsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.PublicKey AsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricXEd25519PrivateKey : BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, Ed25519Signer, AsymmetricXEd25519PrivateKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519PrivateKey>>, IEquatable<BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519PrivateKey>>, ISignaturePrivateKey, IEquatable<BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, Ed25519Signer, AsymmetricXEd25519PrivateKey>>, IKeyExchangePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IKeyExchange, IEquatable<AsymmetricXEd25519PrivateKey> Constructors | Edit this page View Source AsymmetricXEd25519PrivateKey() Constructor Declaration public AsymmetricXEd25519PrivateKey() | Edit this page View Source AsymmetricXEd25519PrivateKey(AsymmetricCipherKeyPair) Constructor Declaration public AsymmetricXEd25519PrivateKey(AsymmetricCipherKeyPair keys) Parameters Type Name Description AsymmetricCipherKeyPair keys Keys | Edit this page View Source AsymmetricXEd25519PrivateKey(Ed25519PrivateKeyParameters) Constructor Declaration public AsymmetricXEd25519PrivateKey(Ed25519PrivateKeyParameters privateKey) Parameters Type Name Description Ed25519PrivateKeyParameters privateKey Private key | Edit this page View Source AsymmetricXEd25519PrivateKey(byte[]) Constructor Declaration public AsymmetricXEd25519PrivateKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source PublicKey Public key (don't dispose - the instance will be disposed if the private key instance is being disposed!) Declaration public override AsymmetricXEd25519PublicKey PublicKey { get; } Property Value Type Description AsymmetricXEd25519PublicKey Overrides BouncyCastleAsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519PrivateKey>.PublicKey Methods | Edit this page View Source CreateEd25519PrivateKey() Create a Ed25519 private key instance Declaration public AsymmetricEd25519PrivateKey CreateEd25519PrivateKey() Returns Type Description AsymmetricEd25519PrivateKey Ed25519 private key (don't forget to dispose!) | Edit this page View Source CreateX25519PrivateKey() Create a X25519 private key instance Declaration public AsymmetricX25519PrivateKey CreateX25519PrivateKey() Returns Type Description AsymmetricX25519PrivateKey X25519 private key (don't forget to dispose!) | Edit this page View Source DeriveKey(byte[]) Declaration public override byte[] DeriveKey(byte[] keyExchangeData) Parameters Type Name Description byte[] keyExchangeData Returns Type Description byte[] Overrides AsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.DeriveKey(byte[]) | Edit this page View Source DeriveKey(IAsymmetricPublicKey) Declaration public override byte[] DeriveKey(IAsymmetricPublicKey publicKey) Parameters Type Name Description IAsymmetricPublicKey publicKey Returns Type Description byte[] Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricXEd25519PublicKey, wan24.Crypto.BC.AsymmetricXEd25519PrivateKey>.DeriveKey(wan24.Crypto.IAsymmetricPublicKey) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519PrivateKey>.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricXEd25519PublicKey, wan24.Crypto.BC.AsymmetricXEd25519PrivateKey>.DisposeCore() | Edit this page View Source GetKeyExchangeData(IAsymmetricPublicKey?, CryptoOptions?) Declaration public override (byte[] Key, byte[] KeyExchangeData) GetKeyExchangeData(IAsymmetricPublicKey? publicKey = null, CryptoOptions? options = null) Parameters Type Name Description IAsymmetricPublicKey publicKey CryptoOptions options Returns Type Description (byte[] Key, byte[] KeyExchangeData) Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricXEd25519PublicKey, wan24.Crypto.BC.AsymmetricXEd25519PrivateKey>.GetKeyExchangeData(wan24.Crypto.IAsymmetricPublicKey, wan24.Crypto.CryptoOptions) | Edit this page View Source GetPublicKey(Ed25519PrivateKeyParameters) Get the public key from a private key Declaration protected override Ed25519PublicKeyParameters GetPublicKey(Ed25519PrivateKeyParameters privateKey) Parameters Type Name Description Ed25519PrivateKeyParameters privateKey Private key Returns Type Description Ed25519PublicKeyParameters Public key Overrides BouncyCastleAsymmetricPrivateKeyBase<AsymmetricXEd25519PublicKey, AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519PrivateKeyParameters, AsymmetricXEd25519PrivateKey>.GetPublicKey(Ed25519PrivateKeyParameters) Operators | Edit this page View Source explicit operator AsymmetricXEd25519PrivateKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricXEd25519PrivateKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricXEd25519PrivateKey | Edit this page View Source implicit operator AsymmetricXEd25519PublicKey(AsymmetricXEd25519PrivateKey) Cast to public key Declaration public static implicit operator AsymmetricXEd25519PublicKey(AsymmetricXEd25519PrivateKey privateKey) Parameters Type Name Description AsymmetricXEd25519PrivateKey privateKey Private key Returns Type Description AsymmetricXEd25519PublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePrivateKey IEquatable<T> wan24.Crypto.IKeyExchangePrivateKey wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider wan24.Crypto.IKeyExchange IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricXEd25519PublicKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricXEd25519PublicKey.html",
    "title": "Class AsymmetricXEd25519PublicKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricXEd25519PublicKey XEd25519 asymmetric public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricXEd25519PublicKey> BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricXEd25519PublicKey> BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase<AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519Signer, AsymmetricXEd25519PublicKey> AsymmetricXEd25519PublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricXEd25519PublicKey>> IEquatable<BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricXEd25519PublicKey>> ISignaturePublicKey IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase<AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519Signer, AsymmetricXEd25519PublicKey>> IEquatable<AsymmetricXEd25519PublicKey> Inherited Members BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase<AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519Signer, AsymmetricXEd25519PublicKey>.ValidateSignatureRaw(byte[], byte[], bool) BouncyCastleAsymmetricPublicKeyBase<AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricXEd25519PublicKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPublicKeyBase<AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricXEd25519PublicKey>.PublicKey BouncyCastleAsymmetricPublicKeyBase<AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricXEd25519PublicKey>.ExportBc() BouncyCastleAsymmetricPublicKeyBase<AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricXEd25519PublicKey>.GetCopy() BouncyCastleAsymmetricPublicKeyBase<AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricXEd25519PublicKey>.ImportBc(in byte[]) AsymmetricPublicKeyBase.GetCopy() AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricXEd25519PublicKey : BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase<AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519Signer, AsymmetricXEd25519PublicKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricXEd25519PublicKey>>, IEquatable<BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricXEd25519PublicKey>>, ISignaturePublicKey, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase<AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, Ed25519Signer, AsymmetricXEd25519PublicKey>>, IEquatable<AsymmetricXEd25519PublicKey> Constructors | Edit this page View Source AsymmetricXEd25519PublicKey() Constructor Declaration public AsymmetricXEd25519PublicKey() | Edit this page View Source AsymmetricXEd25519PublicKey(Ed25519PublicKeyParameters, AsymmetricX25519PublicKey) Constructor Declaration public AsymmetricXEd25519PublicKey(Ed25519PublicKeyParameters publicKey, AsymmetricX25519PublicKey publicKey2) Parameters Type Name Description Ed25519PublicKeyParameters publicKey Ed25519 public key parameters AsymmetricX25519PublicKey publicKey2 X25519 public key | Edit this page View Source AsymmetricXEd25519PublicKey(byte[]) Constructor Declaration public AsymmetricXEd25519PublicKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides wan24.Crypto.AsymmetricKeyBase.Bits | Edit this page View Source IsBcImportExportImplemented Declaration public static bool IsBcImportExportImplemented { get; } Property Value Type Description bool Methods | Edit this page View Source CreateEd25519PublicKey() Create a Ed25519 public key instance Declaration public AsymmetricEd25519PublicKey CreateEd25519PublicKey() Returns Type Description AsymmetricEd25519PublicKey Ed25519 public key (don't forget to dispose!) | Edit this page View Source CreateX25519PublicKey() Create a X25519 public key instance Declaration public AsymmetricX25519PublicKey CreateX25519PublicKey() Returns Type Description AsymmetricX25519PublicKey X25519 public key (don't forget to dispose!) | Edit this page View Source DeserializeKeyData() Deserialize the key data Declaration protected override void DeserializeKeyData() Overrides BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricXEd25519PublicKey>.DeserializeKeyData() | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricKeyBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Crypto.AsymmetricKeyBase.DisposeCore() | Edit this page View Source SerializeKeyData() Serialize the key data Declaration protected override byte[] SerializeKeyData() Returns Type Description byte[] Serialized key data Overrides BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricXEd25519Algorithm, Ed25519PublicKeyParameters, AsymmetricXEd25519PublicKey>.SerializeKeyData() Operators | Edit this page View Source explicit operator AsymmetricXEd25519PublicKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricXEd25519PublicKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricXEd25519PublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePublicKey wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricXEd448Algorithm.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricXEd448Algorithm.html",
    "title": "Class AsymmetricXEd448Algorithm | wan24-Crypto-BC",
    "keywords": "Class AsymmetricXEd448Algorithm XEd448 asymmetric algorithm (converts the used Ed448 private key to a X448 private key for key exchange; 224 bit security) Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey> BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448Algorithm> BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey, Ed448KeyPairGenerator, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448Algorithm> AsymmetricXEd448Algorithm Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448Algorithm>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey, Ed448KeyPairGenerator, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448Algorithm>> IEquatable<AsymmetricXEd448Algorithm> Inherited Members BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey, Ed448KeyPairGenerator, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448Algorithm>.CreateKeyPair(CryptoOptions) BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448Algorithm>.Instance BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448Algorithm>.Usages BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448Algorithm>.IsEllipticCurveAlgorithm BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448Algorithm>.AllowedKeySizes BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448Algorithm>.IsPostQuantum BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448Algorithm>.DeserializePrivateKeyV1(byte[]) BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448Algorithm>.Register() AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.EnsureDefaultOptions(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.EnsureAllowed(in bool) AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.CreateKeyPair(CryptoOptions) AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.CreateKeyPairAsync(CryptoOptions, CancellationToken) AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.DeserializePublicKey(byte[]) AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.DeserializePrivateKey(byte[]) AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.DeserializePrivateKeyV1(byte[]) AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.DeriveKey(byte[], CryptoOptions) AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.CanHandleNetAlgorithm(AsymmetricAlgorithm) AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.ToString() AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.GetHashCode() AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.Equals(object) AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.Equals(CryptoAlgorithmBase) AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.Equals(AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>) AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.<Clone>$() AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.PrivateKeyType AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.PublicKeyType AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.DefaultOptions AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.DefaultAlgorithmOptions AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.Usages AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.CanExchangeKey AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.CanSign AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.IsEllipticCurveAlgorithm AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.IsPublicKeyStandardFormat AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.AllowedKeySizes AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.DefaultKeySize AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.IsDenied AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.KeyPool AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.GetHashCode() CryptoAlgorithmBase.Equals(object) CryptoAlgorithmBase.Equals(CryptoAlgorithmBase) CryptoAlgorithmBase.<Clone>$() CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.State object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricXEd448Algorithm : BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey, Ed448KeyPairGenerator, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448Algorithm>, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448Algorithm>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey, Ed448KeyPairGenerator, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448Algorithm>>, IEquatable<AsymmetricXEd448Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"XED448\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 13 Field Value Type Description int | Edit this page View Source DEFAULT_KEY_SIZE Default key size in bits Declaration public const int DEFAULT_KEY_SIZE = 456 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"XEd448\" Field Value Type Description string | Edit this page View Source USAGES Algorithm usages Declaration public const AsymmetricAlgorithmUsages USAGES = KeyExchange | Signature Field Value Type Description AsymmetricAlgorithmUsages Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPublicKeyStandardFormat Is the public key exported in a standard format? Declaration public override bool IsPublicKeyStandardFormat { get; } Property Value Type Description bool Overrides wan24.Crypto.AsymmetricAlgorithmBase<wan24.Crypto.BC.AsymmetricXEd448PublicKey, wan24.Crypto.BC.AsymmetricXEd448PrivateKey>.IsPublicKeyStandardFormat Methods | Edit this page View Source CreateKeyPair(CryptoOptions?) Declaration public override AsymmetricXEd448PrivateKey CreateKeyPair(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Returns Type Description AsymmetricXEd448PrivateKey Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey, Ed448KeyPairGenerator, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448Algorithm>.CreateKeyPair(CryptoOptions) | Edit this page View Source GetEngineParameters(CryptoOptions) Get the cipher engine parameters Declaration protected override AsymmetricKeyParameter GetEngineParameters(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description AsymmetricKeyParameter Parameters Overrides BouncyCastleAsymmetricAlgorithmBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey, Ed448KeyGenerationParameters, AsymmetricKeyParameter, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448Algorithm>.GetEngineParameters(CryptoOptions) Implements IEquatable<T> wan24.Crypto.IAsymmetricAlgorithm wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricXEd448PrivateKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricXEd448PrivateKey.html",
    "title": "Class AsymmetricXEd448PrivateKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricXEd448PrivateKey XEd448 asymmetric private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey> BouncyCastleAsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448PrivateKey> BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448PrivateKey> BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2<AsymmetricXEd448PublicKey, AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, Ed448Signer, AsymmetricXEd448PrivateKey> AsymmetricXEd448PrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448PrivateKey>> IEquatable<BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448PrivateKey>> ISignaturePrivateKey IEquatable<BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2<AsymmetricXEd448PublicKey, AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, Ed448Signer, AsymmetricXEd448PrivateKey>> IKeyExchangePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IKeyExchange IEquatable<AsymmetricXEd448PrivateKey> Inherited Members BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2<AsymmetricXEd448PublicKey, AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, Ed448Signer, AsymmetricXEd448PrivateKey>.SignHashRaw(byte[]) BouncyCastleAsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448PrivateKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448PrivateKey>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448PrivateKey>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448PrivateKey>.Bits BouncyCastleAsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448PrivateKey>.ExportBc() BouncyCastleAsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448PrivateKey>.ImportBc(in byte[]) AsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.GetCopy() AsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.ToString() AsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.GetHashCode() AsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.Equals(object) AsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.Equals(AsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>) AsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.<Clone>$() AsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.PublicKey AsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricXEd448PrivateKey : BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2<AsymmetricXEd448PublicKey, AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, Ed448Signer, AsymmetricXEd448PrivateKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448PrivateKey>>, IEquatable<BouncyCastleAsymmetricNonPqcPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448PrivateKey>>, ISignaturePrivateKey, IEquatable<BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2<AsymmetricXEd448PublicKey, AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, Ed448Signer, AsymmetricXEd448PrivateKey>>, IKeyExchangePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IKeyExchange, IEquatable<AsymmetricXEd448PrivateKey> Constructors | Edit this page View Source AsymmetricXEd448PrivateKey() Constructor Declaration public AsymmetricXEd448PrivateKey() | Edit this page View Source AsymmetricXEd448PrivateKey(AsymmetricCipherKeyPair) Constructor Declaration public AsymmetricXEd448PrivateKey(AsymmetricCipherKeyPair keys) Parameters Type Name Description AsymmetricCipherKeyPair keys Keys | Edit this page View Source AsymmetricXEd448PrivateKey(Ed448PrivateKeyParameters) Constructor Declaration public AsymmetricXEd448PrivateKey(Ed448PrivateKeyParameters privateKey) Parameters Type Name Description Ed448PrivateKeyParameters privateKey Private key | Edit this page View Source AsymmetricXEd448PrivateKey(byte[]) Constructor Declaration public AsymmetricXEd448PrivateKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides BouncyCastleAsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448PrivateKey>.Bits | Edit this page View Source PublicKey Public key (don't dispose - the instance will be disposed if the private key instance is being disposed!) Declaration public override AsymmetricXEd448PublicKey PublicKey { get; } Property Value Type Description AsymmetricXEd448PublicKey Overrides BouncyCastleAsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448PrivateKey>.PublicKey Methods | Edit this page View Source DeriveKey(byte[]) Declaration public override byte[] DeriveKey(byte[] keyExchangeData) Parameters Type Name Description byte[] keyExchangeData Returns Type Description byte[] Overrides AsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.DeriveKey(byte[]) | Edit this page View Source DeriveKey(IAsymmetricPublicKey) Declaration public override byte[] DeriveKey(IAsymmetricPublicKey publicKey) Parameters Type Name Description IAsymmetricPublicKey publicKey Returns Type Description byte[] Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricXEd448PublicKey, wan24.Crypto.BC.AsymmetricXEd448PrivateKey>.DeriveKey(wan24.Crypto.IAsymmetricPublicKey) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448PrivateKey>.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricXEd448PublicKey, wan24.Crypto.BC.AsymmetricXEd448PrivateKey>.DisposeCore() | Edit this page View Source GetKeyExchangeData(IAsymmetricPublicKey?, CryptoOptions?) Declaration public override (byte[] Key, byte[] KeyExchangeData) GetKeyExchangeData(IAsymmetricPublicKey? publicKey = null, CryptoOptions? options = null) Parameters Type Name Description IAsymmetricPublicKey publicKey CryptoOptions options Returns Type Description (byte[] Key, byte[] KeyExchangeData) Overrides wan24.Crypto.AsymmetricPrivateKeyBase<wan24.Crypto.BC.AsymmetricXEd448PublicKey, wan24.Crypto.BC.AsymmetricXEd448PrivateKey>.GetKeyExchangeData(wan24.Crypto.IAsymmetricPublicKey, wan24.Crypto.CryptoOptions) | Edit this page View Source GetPublicKey(Ed448PrivateKeyParameters) Get the public key from a private key Declaration protected override Ed448PublicKeyParameters GetPublicKey(Ed448PrivateKeyParameters privateKey) Parameters Type Name Description Ed448PrivateKeyParameters privateKey Private key Returns Type Description Ed448PublicKeyParameters Public key Overrides BouncyCastleAsymmetricPrivateKeyBase<AsymmetricXEd448PublicKey, AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448PrivateKeyParameters, AsymmetricXEd448PrivateKey>.GetPublicKey(Ed448PrivateKeyParameters) Operators | Edit this page View Source explicit operator AsymmetricXEd448PrivateKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricXEd448PrivateKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricXEd448PrivateKey | Edit this page View Source implicit operator AsymmetricXEd448PublicKey(AsymmetricXEd448PrivateKey) Cast to public key Declaration public static implicit operator AsymmetricXEd448PublicKey(AsymmetricXEd448PrivateKey privateKey) Parameters Type Name Description AsymmetricXEd448PrivateKey privateKey Private key Returns Type Description AsymmetricXEd448PublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePrivateKey IEquatable<T> wan24.Crypto.IKeyExchangePrivateKey wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider wan24.Crypto.IKeyExchange IEquatable<T>"
  },
  "api/wan24.Crypto.BC.AsymmetricXEd448PublicKey.html": {
    "href": "api/wan24.Crypto.BC.AsymmetricXEd448PublicKey.html",
    "title": "Class AsymmetricXEd448PublicKey | wan24-Crypto-BC",
    "keywords": "Class AsymmetricXEd448PublicKey XEd448 asymmetric public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, AsymmetricXEd448PublicKey> BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, AsymmetricXEd448PublicKey> BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2<AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448Signer, AsymmetricXEd448PublicKey> AsymmetricXEd448PublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, AsymmetricXEd448PublicKey>> IEquatable<BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, AsymmetricXEd448PublicKey>> ISignaturePublicKey IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2<AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448Signer, AsymmetricXEd448PublicKey>> IEquatable<AsymmetricXEd448PublicKey> Inherited Members BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2<AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448Signer, AsymmetricXEd448PublicKey>.ValidateSignatureRaw(byte[], byte[], bool) BouncyCastleAsymmetricPublicKeyBase<AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, AsymmetricXEd448PublicKey>.IsBcImportExportImplemented BouncyCastleAsymmetricPublicKeyBase<AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, AsymmetricXEd448PublicKey>.PublicKey BouncyCastleAsymmetricPublicKeyBase<AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, AsymmetricXEd448PublicKey>.ExportBc() BouncyCastleAsymmetricPublicKeyBase<AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, AsymmetricXEd448PublicKey>.GetCopy() BouncyCastleAsymmetricPublicKeyBase<AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, AsymmetricXEd448PublicKey>.ImportBc(in byte[]) AsymmetricPublicKeyBase.GetCopy() AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record AsymmetricXEd448PublicKey : BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2<AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448Signer, AsymmetricXEd448PublicKey>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, AsymmetricXEd448PublicKey>>, IEquatable<BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, AsymmetricXEd448PublicKey>>, ISignaturePublicKey, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2<AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, Ed448Signer, AsymmetricXEd448PublicKey>>, IEquatable<AsymmetricXEd448PublicKey> Constructors | Edit this page View Source AsymmetricXEd448PublicKey() Constructor Declaration public AsymmetricXEd448PublicKey() | Edit this page View Source AsymmetricXEd448PublicKey(Ed448PublicKeyParameters) Constructor Declaration public AsymmetricXEd448PublicKey(Ed448PublicKeyParameters publicKey) Parameters Type Name Description Ed448PublicKeyParameters publicKey Public key | Edit this page View Source AsymmetricXEd448PublicKey(Ed448PublicKeyParameters, AsymmetricX448PublicKey) Constructor Declaration public AsymmetricXEd448PublicKey(Ed448PublicKeyParameters publicKey, AsymmetricX448PublicKey publicKey2) Parameters Type Name Description Ed448PublicKeyParameters publicKey Ed448 public key AsymmetricX448PublicKey publicKey2 X448 public key | Edit this page View Source AsymmetricXEd448PublicKey(byte[]) Constructor Declaration public AsymmetricXEd448PublicKey(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides wan24.Crypto.AsymmetricKeyBase.Bits | Edit this page View Source IsBcImportExportImplemented Declaration public static bool IsBcImportExportImplemented { get; } Property Value Type Description bool Methods | Edit this page View Source CreateEd448PublicKey() Create a Ed448 public key instance Declaration public AsymmetricEd448PublicKey CreateEd448PublicKey() Returns Type Description AsymmetricEd448PublicKey Ed448 public key (don't forget to dispose!) | Edit this page View Source CreateX448PublicKey() Create a X448 public key instance Declaration public AsymmetricX448PublicKey CreateX448PublicKey() Returns Type Description AsymmetricX448PublicKey X448 public key (don't forget to dispose!) | Edit this page View Source DeserializeKeyData() Deserialize the key data Declaration protected override void DeserializeKeyData() Overrides BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, AsymmetricXEd448PublicKey>.DeserializeKeyData() | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides AsymmetricKeyBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Crypto.AsymmetricKeyBase.DisposeCore() | Edit this page View Source SerializeKeyData() Serialize the key data Declaration protected override byte[] SerializeKeyData() Returns Type Description byte[] Serialized key data Overrides BouncyCastleAsymmetricNonPqcPublicKeyBase<AsymmetricXEd448Algorithm, Ed448PublicKeyParameters, AsymmetricXEd448PublicKey>.SerializeKeyData() Operators | Edit this page View Source explicit operator AsymmetricXEd448PublicKey(byte[]) Cast from serialized data Declaration public static explicit operator AsymmetricXEd448PublicKey(byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description AsymmetricXEd448PublicKey Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePublicKey wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.BcEllipticCurves.html": {
    "href": "api/wan24.Crypto.BC.BcEllipticCurves.html",
    "title": "Class BcEllipticCurves | wan24-Crypto-BC",
    "keywords": "Class BcEllipticCurves Bouncy Castle elliptic curves Inheritance object BcEllipticCurves Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public static class BcEllipticCurves Fields | Edit this page View Source SECP256R1_CURVE secp256r1 curve (NIST P-256, 128 bit security) Declaration public static readonly ECDomainParameters SECP256R1_CURVE Field Value Type Description ECDomainParameters | Edit this page View Source SECP384R1_CURVE secp384r1 curve (NIST P-384, 192 bit security) Declaration public static readonly ECDomainParameters SECP384R1_CURVE Field Value Type Description ECDomainParameters | Edit this page View Source SECP521R1_CURVE secp521r1 curve (NIST P-521, 260 bit security) Declaration public static readonly ECDomainParameters SECP521R1_CURVE Field Value Type Description ECDomainParameters Methods | Edit this page View Source DenyCurve(in ECDomainParameters) Deny an elliptic curve Declaration public static void DenyCurve(in ECDomainParameters curve) Parameters Type Name Description ECDomainParameters curve Curve | Edit this page View Source GetCurve(in int) Get the curve from a key size Declaration public static ECDomainParameters GetCurve(in int bits) Parameters Type Name Description int bits Key size in bits Returns Type Description ECDomainParameters Curve name | Edit this page View Source GetKeySize(in ECDomainParameters) Get the key size for a curve Declaration public static int GetKeySize(in ECDomainParameters curve) Parameters Type Name Description ECDomainParameters curve Curve name Returns Type Description int Key size in bits | Edit this page View Source IsCurveAllowed(in ECDomainParameters) Determine if an elliptic curve is allowed Declaration public static bool IsCurveAllowed(in ECDomainParameters curve) Parameters Type Name Description ECDomainParameters curve Curve Returns Type Description bool If the elliptic curve is allowed"
  },
  "api/wan24.Crypto.BC.Bootstrap.html": {
    "href": "api/wan24.Crypto.BC.Bootstrap.html",
    "title": "Class Bootstrap | wan24-Crypto-BC",
    "keywords": "Class Bootstrap Bootstrapper Inheritance object Bootstrap Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public static class Bootstrap Methods | Edit this page View Source Boot() Boot Declaration public static void Boot()"
  },
  "api/wan24.Crypto.BC.BouncyCastle.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastle.html",
    "title": "Class BouncyCastle | wan24-Crypto-BC",
    "keywords": "Class BouncyCastle Bouncy Castle helper Inheritance object BouncyCastle Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public static class BouncyCastle Methods | Edit this page View Source RegisterNetAlgorithms() Register (HMAC)SHA3-* algorithms to wan24.Crypto.CryptoAppConfig (replace the .NET defaults!) Declaration public static void RegisterNetAlgorithms() | Edit this page View Source ReplaceNetAlgorithms() Replace .NET algorithms which may not be available on all platforms Declaration public static void ReplaceNetAlgorithms() | Edit this page View Source SetDefaults(in bool) Set the implemented algorithms as defaults Declaration public static void SetDefaults(in bool useCurrentDefaultAsCounterAlgorithms = true) Parameters Type Name Description bool useCurrentDefaultAsCounterAlgorithms Use the current wan24-Crypto defaults as counter algorithms?"
  },
  "api/wan24.Crypto.BC.BouncyCastleAeadCipherAlgorithmBase-1.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleAeadCipherAlgorithmBase-1.html",
    "title": "Class BouncyCastleAeadCipherAlgorithmBase<T> | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleAeadCipherAlgorithmBase<T> Base class for a Bouncy Castle AEAD stream cipher Inheritance object CryptoAlgorithmBase EncryptionAlgorithmBase BouncyCastleCipherAlgorithmBase<T> BouncyCastleAeadCipherAlgorithmBase<T> EncryptionAes256GcmAlgorithm EncryptionSerpent256GcmAlgorithm EncryptionTwofish256GcmAlgorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<EncryptionAlgorithmBase> IEquatable<BouncyCastleCipherAlgorithmBase<T>> IEquatable<BouncyCastleAeadCipherAlgorithmBase<T>> Inherited Members BouncyCastleCipherAlgorithmBase<T>.Instance BouncyCastleCipherAlgorithmBase<T>.GetValidLengthKey(byte[], int) BouncyCastleCipherAlgorithmBase<T>.CreateIvParameters(byte[], CryptoOptions) BouncyCastleCipherAlgorithmBase<T>.CreateKeyParameters(byte[], CryptoOptions, HashAlgorithmBase) BouncyCastleCipherAlgorithmBase<T>.Register() EncryptionAlgorithmBase._DefaultOptions EncryptionAlgorithmBase.EnsureDefaultOptions(CryptoOptions) EncryptionAlgorithmBase.EnsureAllowed(in bool) EncryptionAlgorithmBase.EnsureValidKeyLength(byte[]) EncryptionAlgorithmBase.IsKeyLengthValid(int) EncryptionAlgorithmBase.CreateIvBytes() EncryptionAlgorithmBase.ReadFixedIvBytes(Stream, CryptoOptions) EncryptionAlgorithmBase.ReadFixedIvBytesAsync(Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ReadVariableIvBytes(Stream, CryptoOptions) EncryptionAlgorithmBase.ReadVariableIvBytesAsync(Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.EncodeFlags(CryptoFlags, Span<byte>) EncryptionAlgorithmBase.DecodeFlags(ReadOnlySpan<byte>) EncryptionAlgorithmBase.Decrypt(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.Encrypt(Stream, Stream, byte[], CryptoOptions, MacStreams) EncryptionAlgorithmBase.Encrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Encrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, byte[], CryptoOptions, MacStreams, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.WriteOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.WriteOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ReadOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.ReadOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetEncryptionStream(Stream, Stream, MacStreams, CryptoOptions) EncryptionAlgorithmBase.GetEncryptionStreamAsync(Stream, Stream, MacStreams, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetDecryptionStream(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.GetDecryptionStreamAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ToString() EncryptionAlgorithmBase.PrintMembers(StringBuilder) EncryptionAlgorithmBase.GetHashCode() EncryptionAlgorithmBase.Equals(object) EncryptionAlgorithmBase.Equals(CryptoAlgorithmBase) EncryptionAlgorithmBase.Equals(EncryptionAlgorithmBase) EncryptionAlgorithmBase.<Clone>$() EncryptionAlgorithmBase.EqualityContract EncryptionAlgorithmBase.KeySize EncryptionAlgorithmBase.IvSize EncryptionAlgorithmBase.BlockSize EncryptionAlgorithmBase.RequireMacAuthentication EncryptionAlgorithmBase.DefaultOptions EncryptionAlgorithmBase.IsDenied EncryptionAlgorithmBase.State CryptoAlgorithmBase.EnsurePqcRequirement(in bool) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.DisplayName object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public abstract record BouncyCastleAeadCipherAlgorithmBase<T> : BouncyCastleCipherAlgorithmBase<T>, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<EncryptionAlgorithmBase>, IEquatable<BouncyCastleCipherAlgorithmBase<T>>, IEquatable<BouncyCastleAeadCipherAlgorithmBase<T>> where T : BouncyCastleAeadCipherAlgorithmBase<T> Type Parameters Name Description T Final type Constructors | Edit this page View Source BouncyCastleAeadCipherAlgorithmBase(string, int) Constructor Declaration protected BouncyCastleAeadCipherAlgorithmBase(string name, int value) Parameters Type Name Description string name Algorithm name int value Algorithm value Methods | Edit this page View Source CreateCipher(bool, CryptoOptions) Create the cipher engine Declaration protected abstract IBufferedCipher CreateCipher(bool forEncryption, CryptoOptions options) Parameters Type Name Description bool forEncryption For encryption? CryptoOptions options Options Returns Type Description IBufferedCipher Stream cipher | Edit this page View Source CreateParameters(byte[], CryptoOptions) Create cipher parameters Declaration protected override sealed ICipherParameters CreateParameters(byte[] iv, CryptoOptions options) Parameters Type Name Description byte[] iv IV bytes CryptoOptions options Options Returns Type Description ICipherParameters Parameters Overrides BouncyCastleCipherAlgorithmBase<T>.CreateParameters(byte[], CryptoOptions) | Edit this page View Source GetDecryptor(Stream, CryptoOptions) Get the decryptor Declaration protected override sealed ICryptoTransform GetDecryptor(Stream cipherData, CryptoOptions options) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options Returns Type Description ICryptoTransform Transform Overrides EncryptionAlgorithmBase.GetDecryptor(Stream, CryptoOptions) | Edit this page View Source GetDecryptorAsync(Stream, CryptoOptions, CancellationToken) Get the decryptor Declaration protected override sealed Task<ICryptoTransform> GetDecryptorAsync(Stream cipherData, CryptoOptions options, CancellationToken cancellationToken) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<ICryptoTransform> Transform Overrides EncryptionAlgorithmBase.GetDecryptorAsync(Stream, CryptoOptions, CancellationToken) | Edit this page View Source GetEncryptor(Stream, CryptoOptions) Get the encryptor (need to write the information (IV bytes etc.) which is required to create a decryptor) Declaration protected override sealed ICryptoTransform GetEncryptor(Stream cipherData, CryptoOptions options) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options Returns Type Description ICryptoTransform Transform Overrides EncryptionAlgorithmBase.GetEncryptor(Stream, CryptoOptions) | Edit this page View Source GetEncryptorAsync(Stream, CryptoOptions, CancellationToken) Get the encryptor (need to write the information (IV bytes etc.) which is required to create a decryptor) Declaration protected override sealed Task<ICryptoTransform> GetEncryptorAsync(Stream cipherData, CryptoOptions options, CancellationToken cancellationToken) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<ICryptoTransform> Transform Overrides EncryptionAlgorithmBase.GetEncryptorAsync(Stream, CryptoOptions, CancellationToken) Implements wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.BouncyCastleAsymmetricAlgorithmBase-7.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleAsymmetricAlgorithmBase-7.html",
    "title": "Class BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal> | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal> Base class for a Bouncy Castle asymmetric algorithm Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<tPublic, tPrivate> BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal> AsymmetricSNtruPrimeAlgorithm BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGen, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal> Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<tPublic, tPrivate>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal>> Inherited Members AsymmetricAlgorithmBase<tPublic, tPrivate>._DefaultKeySize AsymmetricAlgorithmBase<tPublic, tPrivate>._DefaultOptions AsymmetricAlgorithmBase<tPublic, tPrivate>.EnsureDefaultOptions(CryptoOptions) AsymmetricAlgorithmBase<tPublic, tPrivate>.EnsureAllowed(in bool) AsymmetricAlgorithmBase<tPublic, tPrivate>.CreateKeyPair(CryptoOptions) AsymmetricAlgorithmBase<tPublic, tPrivate>.CreateKeyPairAsync(CryptoOptions, CancellationToken) AsymmetricAlgorithmBase<tPublic, tPrivate>.DeserializePublicKey(byte[]) AsymmetricAlgorithmBase<tPublic, tPrivate>.DeserializePrivateKey(byte[]) AsymmetricAlgorithmBase<tPublic, tPrivate>.DeserializePrivateKeyV1(byte[]) AsymmetricAlgorithmBase<tPublic, tPrivate>.DeriveKey(byte[], CryptoOptions) AsymmetricAlgorithmBase<tPublic, tPrivate>.CanHandleNetAlgorithm(AsymmetricAlgorithm) AsymmetricAlgorithmBase<tPublic, tPrivate>.EnsureAllowedCurve(in int, in bool) AsymmetricAlgorithmBase<tPublic, tPrivate>.ToString() AsymmetricAlgorithmBase<tPublic, tPrivate>.PrintMembers(StringBuilder) AsymmetricAlgorithmBase<tPublic, tPrivate>.GetHashCode() AsymmetricAlgorithmBase<tPublic, tPrivate>.Equals(object) AsymmetricAlgorithmBase<tPublic, tPrivate>.Equals(CryptoAlgorithmBase) AsymmetricAlgorithmBase<tPublic, tPrivate>.Equals(AsymmetricAlgorithmBase<tPublic, tPrivate>) AsymmetricAlgorithmBase<tPublic, tPrivate>.<Clone>$() AsymmetricAlgorithmBase<tPublic, tPrivate>.EqualityContract AsymmetricAlgorithmBase<tPublic, tPrivate>.PrivateKeyType AsymmetricAlgorithmBase<tPublic, tPrivate>.PublicKeyType AsymmetricAlgorithmBase<tPublic, tPrivate>.DefaultOptions AsymmetricAlgorithmBase<tPublic, tPrivate>.DefaultAlgorithmOptions AsymmetricAlgorithmBase<tPublic, tPrivate>.Usages AsymmetricAlgorithmBase<tPublic, tPrivate>.CanExchangeKey AsymmetricAlgorithmBase<tPublic, tPrivate>.CanSign AsymmetricAlgorithmBase<tPublic, tPrivate>.IsEllipticCurveAlgorithm AsymmetricAlgorithmBase<tPublic, tPrivate>.IsPublicKeyStandardFormat AsymmetricAlgorithmBase<tPublic, tPrivate>.AllowedKeySizes AsymmetricAlgorithmBase<tPublic, tPrivate>.DefaultKeySize AsymmetricAlgorithmBase<tPublic, tPrivate>.IsDenied AsymmetricAlgorithmBase<tPublic, tPrivate>.KeyPool AsymmetricAlgorithmBase<tPublic, tPrivate>.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.EnsurePqcRequirement(in bool) CryptoAlgorithmBase.PrintMembers(StringBuilder) CryptoAlgorithmBase.GetHashCode() CryptoAlgorithmBase.Equals(object) CryptoAlgorithmBase.Equals(CryptoAlgorithmBase) CryptoAlgorithmBase.<Clone>$() CryptoAlgorithmBase.EqualityContract CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.DisplayName CryptoAlgorithmBase.State object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public abstract record BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal> : AsymmetricAlgorithmBase<tPublic, tPrivate>, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<tPublic, tPrivate>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal>> where tPublic : BouncyCastleAsymmetricPublicKeyBase<tFinal, tPublicKey, tPublic>, new() where tPrivate : BouncyCastleAsymmetricPrivateKeyBase<tPublic, tFinal, tPublicKey, tPrivateKey, tPrivate>, new() where tKeyGenParam : KeyGenerationParameters where tPublicKey : AsymmetricKeyParameter, ICipherParameters where tPrivateKey : AsymmetricKeyParameter where tFinal : BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal> Type Parameters Name Description tPublic Public key type tPrivate Private key type tKeyGenParam Key generator parameters type tParam Key parameters type tPublicKey Public key type tPrivateKey Private key type tFinal Final type Constructors | Edit this page View Source BouncyCastleAsymmetricAlgorithmBase(string, int, AsymmetricAlgorithmUsages, bool, FrozenSet<int>, bool, int) Constructor Declaration protected BouncyCastleAsymmetricAlgorithmBase(string name, int value, AsymmetricAlgorithmUsages usages, bool isEllipticCurveAlgorithm, FrozenSet<int> allowedKeySizes, bool isPostQuantum, int defaultKeySize) Parameters Type Name Description string name Algorithm name int value Algorithm value AsymmetricAlgorithmUsages usages Algorithm usages bool isEllipticCurveAlgorithm Is an elliptic curve algorithm? FrozenSet<int> allowedKeySizes Allowed key sizes in bits bool isPostQuantum Is a post quantum-safe algorithm? int defaultKeySize Default key size in bits Properties | Edit this page View Source AllowedKeySizes Allowed key sizes in bits Declaration public override sealed FrozenSet<int> AllowedKeySizes { get; } Property Value Type Description FrozenSet<int> Overrides wan24.Crypto.AsymmetricAlgorithmBase<tPublic, tPrivate>.AllowedKeySizes | Edit this page View Source Instance Singleton instance Declaration public static tFinal Instance { get; } Property Value Type Description tFinal | Edit this page View Source IsEllipticCurveAlgorithm Is an elliptic curve algorithm? Declaration public override sealed bool IsEllipticCurveAlgorithm { get; } Property Value Type Description bool Overrides wan24.Crypto.AsymmetricAlgorithmBase<tPublic, tPrivate>.IsEllipticCurveAlgorithm | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override sealed bool IsPostQuantum { get; } Property Value Type Description bool Overrides wan24.Crypto.CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source Usages Key usages Declaration public override sealed AsymmetricAlgorithmUsages Usages { get; } Property Value Type Description AsymmetricAlgorithmUsages Overrides wan24.Crypto.AsymmetricAlgorithmBase<tPublic, tPrivate>.Usages Methods | Edit this page View Source CreateKeyGenParameters(SecureRandom, tParam, CryptoOptions) Create key generator parameters Declaration protected virtual tKeyGenParam CreateKeyGenParameters(SecureRandom random, tParam parameters, CryptoOptions options) Parameters Type Name Description SecureRandom random Random tParam parameters Engine parameters CryptoOptions options Options Returns Type Description tKeyGenParam Key generator parameters | Edit this page View Source DeserializePrivateKeyV1(byte[]) Deserialize library v1 private key data (will be removed in v3) Declaration public override tPrivate DeserializePrivateKeyV1(byte[] keyData) Parameters Type Name Description byte[] keyData Key data Returns Type Description tPrivate Private key Overrides AsymmetricAlgorithmBase<tPublic, tPrivate>.DeserializePrivateKeyV1(byte[]) | Edit this page View Source GetEngineParameters(CryptoOptions) Get the cipher engine parameters Declaration protected abstract tParam GetEngineParameters(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description tParam Parameters | Edit this page View Source Register() Register the algorithm to the CryptoConfig Declaration public static void Register() Implements IEquatable<T> wan24.Crypto.IAsymmetricAlgorithm wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.BouncyCastleAsymmetricAlgorithmBase-8.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleAsymmetricAlgorithmBase-8.html",
    "title": "Class BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGen, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal> | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGen, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal> Base class for a Bouncy Castle asymmetric algorithm Inheritance object CryptoAlgorithmBase AsymmetricAlgorithmBase<tPublic, tPrivate> BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal> BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGen, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal> AsymmetricBcEcDiffieHellmanAlgorithm AsymmetricBcEcDsaAlgorithm AsymmetricBikeAlgorithm AsymmetricDilithiumAlgorithm AsymmetricEd25519Algorithm AsymmetricEd448Algorithm AsymmetricFalconAlgorithm AsymmetricFrodoKemAlgorithm AsymmetricHqcAlgorithm AsymmetricKyberAlgorithm AsymmetricNtruEncryptAlgorithm AsymmetricPicnicAlgorithm AsymmetricSphincsPlusAlgorithm AsymmetricX25519Algorithm AsymmetricX448Algorithm AsymmetricXEd25519Algorithm AsymmetricXEd448Algorithm Implements IEquatable<CryptoAlgorithmBase> IAsymmetricAlgorithm ICryptoAlgorithm IStatusProvider IEquatable<AsymmetricAlgorithmBase<tPublic, tPrivate>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal>> IEquatable<BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGen, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal>> Inherited Members BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal>.Instance BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal>.Usages BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal>.IsEllipticCurveAlgorithm BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal>.AllowedKeySizes BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal>.IsPostQuantum BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal>.DeserializePrivateKeyV1(byte[]) BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal>.GetEngineParameters(CryptoOptions) BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal>.CreateKeyGenParameters(SecureRandom, tParam, CryptoOptions) BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal>.Register() AsymmetricAlgorithmBase<tPublic, tPrivate>._DefaultKeySize AsymmetricAlgorithmBase<tPublic, tPrivate>._DefaultOptions AsymmetricAlgorithmBase<tPublic, tPrivate>.EnsureDefaultOptions(CryptoOptions) AsymmetricAlgorithmBase<tPublic, tPrivate>.EnsureAllowed(in bool) AsymmetricAlgorithmBase<tPublic, tPrivate>.CreateKeyPair(CryptoOptions) AsymmetricAlgorithmBase<tPublic, tPrivate>.CreateKeyPairAsync(CryptoOptions, CancellationToken) AsymmetricAlgorithmBase<tPublic, tPrivate>.DeserializePublicKey(byte[]) AsymmetricAlgorithmBase<tPublic, tPrivate>.DeserializePrivateKey(byte[]) AsymmetricAlgorithmBase<tPublic, tPrivate>.DeserializePrivateKeyV1(byte[]) AsymmetricAlgorithmBase<tPublic, tPrivate>.DeriveKey(byte[], CryptoOptions) AsymmetricAlgorithmBase<tPublic, tPrivate>.CanHandleNetAlgorithm(AsymmetricAlgorithm) AsymmetricAlgorithmBase<tPublic, tPrivate>.EnsureAllowedCurve(in int, in bool) AsymmetricAlgorithmBase<tPublic, tPrivate>.ToString() AsymmetricAlgorithmBase<tPublic, tPrivate>.PrintMembers(StringBuilder) AsymmetricAlgorithmBase<tPublic, tPrivate>.GetHashCode() AsymmetricAlgorithmBase<tPublic, tPrivate>.Equals(object) AsymmetricAlgorithmBase<tPublic, tPrivate>.Equals(CryptoAlgorithmBase) AsymmetricAlgorithmBase<tPublic, tPrivate>.Equals(AsymmetricAlgorithmBase<tPublic, tPrivate>) AsymmetricAlgorithmBase<tPublic, tPrivate>.<Clone>$() AsymmetricAlgorithmBase<tPublic, tPrivate>.EqualityContract AsymmetricAlgorithmBase<tPublic, tPrivate>.PrivateKeyType AsymmetricAlgorithmBase<tPublic, tPrivate>.PublicKeyType AsymmetricAlgorithmBase<tPublic, tPrivate>.DefaultOptions AsymmetricAlgorithmBase<tPublic, tPrivate>.DefaultAlgorithmOptions AsymmetricAlgorithmBase<tPublic, tPrivate>.Usages AsymmetricAlgorithmBase<tPublic, tPrivate>.CanExchangeKey AsymmetricAlgorithmBase<tPublic, tPrivate>.CanSign AsymmetricAlgorithmBase<tPublic, tPrivate>.IsEllipticCurveAlgorithm AsymmetricAlgorithmBase<tPublic, tPrivate>.IsPublicKeyStandardFormat AsymmetricAlgorithmBase<tPublic, tPrivate>.AllowedKeySizes AsymmetricAlgorithmBase<tPublic, tPrivate>.DefaultKeySize AsymmetricAlgorithmBase<tPublic, tPrivate>.IsDenied AsymmetricAlgorithmBase<tPublic, tPrivate>.KeyPool AsymmetricAlgorithmBase<tPublic, tPrivate>.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.ToString() CryptoAlgorithmBase.EnsurePqcRequirement(in bool) CryptoAlgorithmBase.PrintMembers(StringBuilder) CryptoAlgorithmBase.GetHashCode() CryptoAlgorithmBase.Equals(object) CryptoAlgorithmBase.Equals(CryptoAlgorithmBase) CryptoAlgorithmBase.<Clone>$() CryptoAlgorithmBase.EqualityContract CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.DisplayName CryptoAlgorithmBase.State object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public abstract record BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGen, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal> : BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal>, IEquatable<CryptoAlgorithmBase>, IAsymmetricAlgorithm, ICryptoAlgorithm, IStatusProvider, IEquatable<AsymmetricAlgorithmBase<tPublic, tPrivate>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal>>, IEquatable<BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGen, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal>> where tPublic : BouncyCastleAsymmetricPublicKeyBase<tFinal, tPublicKey, tPublic>, new() where tPrivate : BouncyCastleAsymmetricPrivateKeyBase<tPublic, tFinal, tPublicKey, tPrivateKey, tPrivate>, new() where tKeyGen : IAsymmetricCipherKeyPairGenerator, new() where tKeyGenParam : KeyGenerationParameters where tPublicKey : AsymmetricKeyParameter, ICipherParameters where tPrivateKey : AsymmetricKeyParameter where tFinal : BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGen, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal> Type Parameters Name Description tPublic Public key type tPrivate Private key type tKeyGen Key generator type tKeyGenParam Key generator parameters type tParam Key parameters type tPublicKey Public key type tPrivateKey Private key type tFinal Final type Constructors | Edit this page View Source BouncyCastleAsymmetricAlgorithmBase(string, int, AsymmetricAlgorithmUsages, bool, FrozenSet<int>, bool, int) Constructor Declaration protected BouncyCastleAsymmetricAlgorithmBase(string name, int value, AsymmetricAlgorithmUsages usages, bool isEllipticCurveAlgorithm, FrozenSet<int> allowedKeySizes, bool isPostQuantum, int defaultKeySize) Parameters Type Name Description string name Algorithm name int value Algorithm value AsymmetricAlgorithmUsages usages Algorithm usages bool isEllipticCurveAlgorithm Is an elliptic curve algorithm? FrozenSet<int> allowedKeySizes Allowed key sizes in bits bool isPostQuantum Is a post quantum-safe algorithm? int defaultKeySize Default key size in bits Methods | Edit this page View Source CreateKeyPair(CryptoOptions?) Declaration public override tPrivate CreateKeyPair(CryptoOptions? options = null) Parameters Type Name Description CryptoOptions options Returns Type Description tPrivate Overrides wan24.Crypto.AsymmetricAlgorithmBase<tPublic, tPrivate>.CreateKeyPair(wan24.Crypto.CryptoOptions) Implements IEquatable<T> wan24.Crypto.IAsymmetricAlgorithm wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.BouncyCastleAsymmetricNonPqcPrivateKeyBase-5.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleAsymmetricNonPqcPrivateKeyBase-5.html",
    "title": "Class BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> Base class for a Bouncy Castle asymmetric non-PQC private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<tPublic, tFinal> BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> AsymmetricBcEcDiffieHellmanPrivateKey AsymmetricBcEcDsaPrivateKey AsymmetricX25519PrivateKey AsymmetricX448PrivateKey BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal> BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal> Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricPrivateKeyBase<tPublic, tFinal>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>> IEquatable<BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>> Inherited Members BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.Keys BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.Bits BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.ExportBc() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeFullKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeFullKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.GetPublicKey(tPrivateKey) BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.ImportBc(in byte[]) AsymmetricPrivateKeyBase<tPublic, tFinal>._PublicKey AsymmetricPrivateKeyBase<tPublic, tFinal>.GetCopy() AsymmetricPrivateKeyBase<tPublic, tFinal>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<tPublic, tFinal>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<tPublic, tFinal>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<tPublic, tFinal>.Dispose(bool) AsymmetricPrivateKeyBase<tPublic, tFinal>.DisposeCore() AsymmetricPrivateKeyBase<tPublic, tFinal>.ToString() AsymmetricPrivateKeyBase<tPublic, tFinal>.PrintMembers(StringBuilder) AsymmetricPrivateKeyBase<tPublic, tFinal>.GetHashCode() AsymmetricPrivateKeyBase<tPublic, tFinal>.Equals(object) AsymmetricPrivateKeyBase<tPublic, tFinal>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<tPublic, tFinal>.Equals(AsymmetricPrivateKeyBase<tPublic, tFinal>) AsymmetricPrivateKeyBase<tPublic, tFinal>.<Clone>$() AsymmetricPrivateKeyBase<tPublic, tFinal>.EqualityContract AsymmetricPrivateKeyBase<tPublic, tFinal>.PublicKey AsymmetricPrivateKeyBase<tPublic, tFinal>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.EnsurePqcRequirement(in bool) AsymmetricKeyBase.EnsureAllowedCurve(in bool) AsymmetricKeyBase.Serialize(Stream) AsymmetricKeyBase.SerializeAsync(Stream, CancellationToken) AsymmetricKeyBase.Deserialize(Stream, int) AsymmetricKeyBase.DeserializeAsync(Stream, int, CancellationToken) AsymmetricKeyBase.Dispose(bool) AsymmetricKeyBase.DisposeCore() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.PrintMembers(StringBuilder) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.EqualityContract AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.SerializedObjectVersion DisposableStreamSerializerRecordBase.SerializerVersion DisposableRecordBase.DisposeSyncObject DisposableRecordBase.AsyncDisposing DisposableRecordBase.AllowFinalizer DisposableRecordBase.DisposeObjects DisposableRecordBase.StackInfo DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableRecordBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableRecordBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.EnsureUndisposed(in bool, in bool) DisposableRecordBase.IfUndisposed<T>(in T, in bool) DisposableRecordBase.IfUndisposed(in Action, in bool) DisposableRecordBase.IfUndisposed<T>(in Func<T>, in bool) DisposableRecordBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableRecordBase.DisposeAttributes() DisposableRecordBase.DisposeAttributesAsync() DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.DestructorDisposing DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public abstract record BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> : BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricPrivateKeyBase<tPublic, tFinal>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>>, IEquatable<BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>> where tPublic : BouncyCastleAsymmetricNonPqcPublicKeyBase<tAlgo, tPublicKey, tPublic>, new() where tAlgo : IAsymmetricAlgorithm where tPublicKey : AsymmetricKeyParameter, ICipherParameters where tPrivateKey : AsymmetricKeyParameter where tFinal : BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>, new() Type Parameters Name Description tPublic Public key type tAlgo Algorithm type tPublicKey Internal public key type tPrivateKey Internal private key type tFinal Final type Constructors | Edit this page View Source BouncyCastleAsymmetricNonPqcPrivateKeyBase(string) Constructor Declaration protected BouncyCastleAsymmetricNonPqcPrivateKeyBase(string algorithm) Parameters Type Name Description string algorithm Algorithm name | Edit this page View Source BouncyCastleAsymmetricNonPqcPrivateKeyBase(string, AsymmetricCipherKeyPair) Constructor Declaration protected BouncyCastleAsymmetricNonPqcPrivateKeyBase(string algorithm, AsymmetricCipherKeyPair keys) Parameters Type Name Description string algorithm Algorithm name AsymmetricCipherKeyPair keys Keys | Edit this page View Source BouncyCastleAsymmetricNonPqcPrivateKeyBase(string, byte[]) Constructor Declaration protected BouncyCastleAsymmetricNonPqcPrivateKeyBase(string algorithm, byte[] keyData) Parameters Type Name Description string algorithm Algorithm name byte[] keyData Key data | Edit this page View Source BouncyCastleAsymmetricNonPqcPrivateKeyBase(string, tPrivateKey) Constructor Declaration protected BouncyCastleAsymmetricNonPqcPrivateKeyBase(string algorithm, tPrivateKey privateKey) Parameters Type Name Description string algorithm Algorithm name tPrivateKey privateKey Private key Methods | Edit this page View Source DeserializeFullKeyData() Deserialize the full key data (private and public key) Declaration protected override void DeserializeFullKeyData() Overrides BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeFullKeyData() | Edit this page View Source DeserializeKeyData() Deserialize the key data Declaration protected override void DeserializeKeyData() Overrides BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeKeyData() | Edit this page View Source SerializeFullKeyData() Serialize the full key data (private and public key) Declaration protected override byte[] SerializeFullKeyData() Returns Type Description byte[] Serialized key data Overrides BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeFullKeyData() | Edit this page View Source SerializeKeyData() Serialize the key data Declaration protected override byte[] SerializeKeyData() Returns Type Description byte[] Serialized key data Overrides BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeKeyData() Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase-6.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase-6.html",
    "title": "Class BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal> | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal> Base class for a Bouncy Castle asymmetric non-PQC private signature key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<tPublic, tFinal> BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal> AsymmetricEd25519PrivateKey AsymmetricXEd25519PrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<tPublic, tFinal>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>> IEquatable<BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>> ISignaturePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal>> Inherited Members BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeKeyData() BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeKeyData() BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeFullKeyData() BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeFullKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.Keys BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.Bits BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.ExportBc() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeFullKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeFullKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.GetPublicKey(tPrivateKey) BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.ImportBc(in byte[]) AsymmetricPrivateKeyBase<tPublic, tFinal>._PublicKey AsymmetricPrivateKeyBase<tPublic, tFinal>.GetCopy() AsymmetricPrivateKeyBase<tPublic, tFinal>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<tPublic, tFinal>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<tPublic, tFinal>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<tPublic, tFinal>.Dispose(bool) AsymmetricPrivateKeyBase<tPublic, tFinal>.DisposeCore() AsymmetricPrivateKeyBase<tPublic, tFinal>.ToString() AsymmetricPrivateKeyBase<tPublic, tFinal>.PrintMembers(StringBuilder) AsymmetricPrivateKeyBase<tPublic, tFinal>.GetHashCode() AsymmetricPrivateKeyBase<tPublic, tFinal>.Equals(object) AsymmetricPrivateKeyBase<tPublic, tFinal>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<tPublic, tFinal>.Equals(AsymmetricPrivateKeyBase<tPublic, tFinal>) AsymmetricPrivateKeyBase<tPublic, tFinal>.<Clone>$() AsymmetricPrivateKeyBase<tPublic, tFinal>.EqualityContract AsymmetricPrivateKeyBase<tPublic, tFinal>.PublicKey AsymmetricPrivateKeyBase<tPublic, tFinal>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.EnsurePqcRequirement(in bool) AsymmetricKeyBase.EnsureAllowedCurve(in bool) AsymmetricKeyBase.Serialize(Stream) AsymmetricKeyBase.SerializeAsync(Stream, CancellationToken) AsymmetricKeyBase.Deserialize(Stream, int) AsymmetricKeyBase.DeserializeAsync(Stream, int, CancellationToken) AsymmetricKeyBase.Dispose(bool) AsymmetricKeyBase.DisposeCore() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.PrintMembers(StringBuilder) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.EqualityContract AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.SerializedObjectVersion DisposableStreamSerializerRecordBase.SerializerVersion DisposableRecordBase.DisposeSyncObject DisposableRecordBase.AsyncDisposing DisposableRecordBase.AllowFinalizer DisposableRecordBase.DisposeObjects DisposableRecordBase.StackInfo DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableRecordBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableRecordBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.EnsureUndisposed(in bool, in bool) DisposableRecordBase.IfUndisposed<T>(in T, in bool) DisposableRecordBase.IfUndisposed(in Action, in bool) DisposableRecordBase.IfUndisposed<T>(in Func<T>, in bool) DisposableRecordBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableRecordBase.DisposeAttributes() DisposableRecordBase.DisposeAttributesAsync() DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.DestructorDisposing DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public abstract record BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal> : BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<tPublic, tFinal>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>>, IEquatable<BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>>, ISignaturePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal>> where tPublic : BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase<tAlgo, tPublicKey, tSigner, tPublic>, new() where tAlgo : IAsymmetricAlgorithm where tPublicKey : AsymmetricKeyParameter, ICipherParameters where tPrivateKey : AsymmetricKeyParameter where tSigner : class, ISigner, new() where tFinal : BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal>, new() Type Parameters Name Description tPublic Public key type tAlgo Algorithm type tPublicKey Internal public key type tPrivateKey Internal private key type tSigner Signer type tFinal Final type Constructors | Edit this page View Source BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase(string) Constructor Declaration protected BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase(string algorithm) Parameters Type Name Description string algorithm Algorithm name | Edit this page View Source BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase(string, AsymmetricCipherKeyPair) Constructor Declaration protected BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase(string algorithm, AsymmetricCipherKeyPair keys) Parameters Type Name Description string algorithm Algorithm name AsymmetricCipherKeyPair keys Keys | Edit this page View Source BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase(string, byte[]) Constructor Declaration protected BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase(string algorithm, byte[] keyData) Parameters Type Name Description string algorithm Algorithm name byte[] keyData Key data | Edit this page View Source BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase(string, tPrivateKey) Constructor Declaration protected BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase(string algorithm, tPrivateKey privateKey) Parameters Type Name Description string algorithm Algorithm name tPrivateKey privateKey Private key Methods | Edit this page View Source SignHashRaw(byte[]) Declaration public override byte[] SignHashRaw(byte[] hash) Parameters Type Name Description byte[] hash Returns Type Description byte[] Overrides AsymmetricPrivateKeyBase<tPublic, tFinal>.SignHashRaw(byte[]) Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePrivateKey wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T>"
  },
  "api/wan24.Crypto.BC.BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2-6.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2-6.html",
    "title": "Class BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal> | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal> Base class for a Bouncy Castle asymmetric non-PQC private signature key (which requires a context constructor parameter) Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<tPublic, tFinal> BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal> AsymmetricEd448PrivateKey AsymmetricXEd448PrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<tPublic, tFinal>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>> IEquatable<BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>> ISignaturePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal>> Inherited Members BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeKeyData() BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeKeyData() BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeFullKeyData() BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeFullKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.Keys BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.Bits BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.ExportBc() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeFullKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeFullKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.GetPublicKey(tPrivateKey) BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.ImportBc(in byte[]) AsymmetricPrivateKeyBase<tPublic, tFinal>._PublicKey AsymmetricPrivateKeyBase<tPublic, tFinal>.GetCopy() AsymmetricPrivateKeyBase<tPublic, tFinal>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<tPublic, tFinal>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<tPublic, tFinal>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<tPublic, tFinal>.Dispose(bool) AsymmetricPrivateKeyBase<tPublic, tFinal>.DisposeCore() AsymmetricPrivateKeyBase<tPublic, tFinal>.ToString() AsymmetricPrivateKeyBase<tPublic, tFinal>.PrintMembers(StringBuilder) AsymmetricPrivateKeyBase<tPublic, tFinal>.GetHashCode() AsymmetricPrivateKeyBase<tPublic, tFinal>.Equals(object) AsymmetricPrivateKeyBase<tPublic, tFinal>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<tPublic, tFinal>.Equals(AsymmetricPrivateKeyBase<tPublic, tFinal>) AsymmetricPrivateKeyBase<tPublic, tFinal>.<Clone>$() AsymmetricPrivateKeyBase<tPublic, tFinal>.EqualityContract AsymmetricPrivateKeyBase<tPublic, tFinal>.PublicKey AsymmetricPrivateKeyBase<tPublic, tFinal>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.EnsurePqcRequirement(in bool) AsymmetricKeyBase.EnsureAllowedCurve(in bool) AsymmetricKeyBase.Serialize(Stream) AsymmetricKeyBase.SerializeAsync(Stream, CancellationToken) AsymmetricKeyBase.Deserialize(Stream, int) AsymmetricKeyBase.DeserializeAsync(Stream, int, CancellationToken) AsymmetricKeyBase.Dispose(bool) AsymmetricKeyBase.DisposeCore() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.PrintMembers(StringBuilder) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.EqualityContract AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.SerializedObjectVersion DisposableStreamSerializerRecordBase.SerializerVersion DisposableRecordBase.DisposeSyncObject DisposableRecordBase.AsyncDisposing DisposableRecordBase.AllowFinalizer DisposableRecordBase.DisposeObjects DisposableRecordBase.StackInfo DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableRecordBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableRecordBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.EnsureUndisposed(in bool, in bool) DisposableRecordBase.IfUndisposed<T>(in T, in bool) DisposableRecordBase.IfUndisposed(in Action, in bool) DisposableRecordBase.IfUndisposed<T>(in Func<T>, in bool) DisposableRecordBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableRecordBase.DisposeAttributes() DisposableRecordBase.DisposeAttributesAsync() DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.DestructorDisposing DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public abstract record BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal> : BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<tPublic, tFinal>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>>, IEquatable<BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>>, ISignaturePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal>> where tPublic : BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2<tAlgo, tPublicKey, tSigner, tPublic>, new() where tAlgo : IAsymmetricAlgorithm where tPublicKey : AsymmetricKeyParameter, ICipherParameters where tPrivateKey : AsymmetricKeyParameter where tSigner : class, ISigner where tFinal : BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal>, new() Type Parameters Name Description tPublic Public key type tAlgo Algorithm type tPublicKey Internal public key type tPrivateKey Internal private key type tSigner Signer type tFinal Final type Constructors | Edit this page View Source BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2(string) Constructor Declaration protected BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2(string algorithm) Parameters Type Name Description string algorithm Algorithm name | Edit this page View Source BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2(string, AsymmetricCipherKeyPair) Constructor Declaration protected BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2(string algorithm, AsymmetricCipherKeyPair keys) Parameters Type Name Description string algorithm Algorithm name AsymmetricCipherKeyPair keys Keys | Edit this page View Source BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2(string, byte[]) Constructor Declaration protected BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2(string algorithm, byte[] keyData) Parameters Type Name Description string algorithm Algorithm name byte[] keyData Key data | Edit this page View Source BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2(string, tPrivateKey) Constructor Declaration protected BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2(string algorithm, tPrivateKey privateKey) Parameters Type Name Description string algorithm Algorithm name tPrivateKey privateKey Private key Methods | Edit this page View Source SignHashRaw(byte[]) Declaration public override byte[] SignHashRaw(byte[] hash) Parameters Type Name Description byte[] hash Returns Type Description byte[] Overrides AsymmetricPrivateKeyBase<tPublic, tFinal>.SignHashRaw(byte[]) Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePrivateKey wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T>"
  },
  "api/wan24.Crypto.BC.BouncyCastleAsymmetricNonPqcPublicKeyBase-3.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleAsymmetricNonPqcPublicKeyBase-3.html",
    "title": "Class BouncyCastleAsymmetricNonPqcPublicKeyBase<tAlgo, tPublicKey, tFinal> | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleAsymmetricNonPqcPublicKeyBase<tAlgo, tPublicKey, tFinal> Base class fo a Bouncy Castle asymmetric non-PQC public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal> BouncyCastleAsymmetricNonPqcPublicKeyBase<tAlgo, tPublicKey, tFinal> AsymmetricBcEcDiffieHellmanPublicKey AsymmetricBcEcDsaPublicKey AsymmetricX25519PublicKey AsymmetricX448PublicKey BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2<tAlgo, tPublicKey, tSigner, tFinal> BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase<tAlgo, tPublicKey, tSigner, tFinal> Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>> IEquatable<BouncyCastleAsymmetricNonPqcPublicKeyBase<tAlgo, tPublicKey, tFinal>> Inherited Members BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>._PublicKey BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.IsBcImportExportImplemented BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.PublicKey BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.ExportBc() BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.GetCopy() BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.SerializeKeyData() BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.DeserializeKeyData() BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.ImportBc(in byte[]) AsymmetricPublicKeyBase._ID AsymmetricPublicKeyBase.GetCopy() AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) AsymmetricPublicKeyBase.ValidateSignatureInt(SignatureContainer, bool) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.PrintMembers(StringBuilder) AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.EqualityContract AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.EnsurePqcRequirement(in bool) AsymmetricKeyBase.EnsureAllowedCurve(in bool) AsymmetricKeyBase.Serialize(Stream) AsymmetricKeyBase.SerializeAsync(Stream, CancellationToken) AsymmetricKeyBase.Deserialize(Stream, int) AsymmetricKeyBase.DeserializeAsync(Stream, int, CancellationToken) AsymmetricKeyBase.Dispose(bool) AsymmetricKeyBase.DisposeCore() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.SerializedObjectVersion DisposableStreamSerializerRecordBase.SerializerVersion DisposableRecordBase.DisposeSyncObject DisposableRecordBase.AsyncDisposing DisposableRecordBase.AllowFinalizer DisposableRecordBase.DisposeObjects DisposableRecordBase.StackInfo DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableRecordBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableRecordBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.EnsureUndisposed(in bool, in bool) DisposableRecordBase.IfUndisposed<T>(in T, in bool) DisposableRecordBase.IfUndisposed(in Action, in bool) DisposableRecordBase.IfUndisposed<T>(in Func<T>, in bool) DisposableRecordBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableRecordBase.DisposeAttributes() DisposableRecordBase.DisposeAttributesAsync() DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.DestructorDisposing DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public abstract record BouncyCastleAsymmetricNonPqcPublicKeyBase<tAlgo, tPublicKey, tFinal> : BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>>, IEquatable<BouncyCastleAsymmetricNonPqcPublicKeyBase<tAlgo, tPublicKey, tFinal>> where tAlgo : IAsymmetricAlgorithm where tPublicKey : AsymmetricKeyParameter, ICipherParameters where tFinal : BouncyCastleAsymmetricNonPqcPublicKeyBase<tAlgo, tPublicKey, tFinal>, new() Type Parameters Name Description tAlgo Algorithm type tPublicKey Internal public key type tFinal Final type Constructors | Edit this page View Source BouncyCastleAsymmetricNonPqcPublicKeyBase(string) Constructor Declaration protected BouncyCastleAsymmetricNonPqcPublicKeyBase(string algorithm) Parameters Type Name Description string algorithm Algorithm name | Edit this page View Source BouncyCastleAsymmetricNonPqcPublicKeyBase(string, byte[]) Constructor Declaration protected BouncyCastleAsymmetricNonPqcPublicKeyBase(string algorithm, byte[] keyData) Parameters Type Name Description string algorithm Algorithm name byte[] keyData Key data | Edit this page View Source BouncyCastleAsymmetricNonPqcPublicKeyBase(string, tPublicKey) Constructor Declaration protected BouncyCastleAsymmetricNonPqcPublicKeyBase(string algorithm, tPublicKey publicKey) Parameters Type Name Description string algorithm Algorithm name tPublicKey publicKey Public key Methods | Edit this page View Source DeserializeKeyData() Deserialize the key data Declaration protected override void DeserializeKeyData() Overrides BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.DeserializeKeyData() | Edit this page View Source SerializeKeyData() Serialize the key data Declaration protected override byte[] SerializeKeyData() Returns Type Description byte[] Serialized key data Overrides BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.SerializeKeyData() Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase-4.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase-4.html",
    "title": "Class BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase<tAlgo, tPublicKey, tSigner, tFinal> | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase<tAlgo, tPublicKey, tSigner, tFinal> Base class for a Bouncy Castle asymmetric non-PQC public signature key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal> BouncyCastleAsymmetricNonPqcPublicKeyBase<tAlgo, tPublicKey, tFinal> BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase<tAlgo, tPublicKey, tSigner, tFinal> AsymmetricEd25519PublicKey AsymmetricXEd25519PublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>> IEquatable<BouncyCastleAsymmetricNonPqcPublicKeyBase<tAlgo, tPublicKey, tFinal>> ISignaturePublicKey IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase<tAlgo, tPublicKey, tSigner, tFinal>> Inherited Members BouncyCastleAsymmetricNonPqcPublicKeyBase<tAlgo, tPublicKey, tFinal>.SerializeKeyData() BouncyCastleAsymmetricNonPqcPublicKeyBase<tAlgo, tPublicKey, tFinal>.DeserializeKeyData() BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>._PublicKey BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.IsBcImportExportImplemented BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.PublicKey BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.ExportBc() BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.GetCopy() BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.SerializeKeyData() BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.DeserializeKeyData() BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.ImportBc(in byte[]) AsymmetricPublicKeyBase._ID AsymmetricPublicKeyBase.GetCopy() AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.PrintMembers(StringBuilder) AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.EqualityContract AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.EnsurePqcRequirement(in bool) AsymmetricKeyBase.EnsureAllowedCurve(in bool) AsymmetricKeyBase.Serialize(Stream) AsymmetricKeyBase.SerializeAsync(Stream, CancellationToken) AsymmetricKeyBase.Deserialize(Stream, int) AsymmetricKeyBase.DeserializeAsync(Stream, int, CancellationToken) AsymmetricKeyBase.Dispose(bool) AsymmetricKeyBase.DisposeCore() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.SerializedObjectVersion DisposableStreamSerializerRecordBase.SerializerVersion DisposableRecordBase.DisposeSyncObject DisposableRecordBase.AsyncDisposing DisposableRecordBase.AllowFinalizer DisposableRecordBase.DisposeObjects DisposableRecordBase.StackInfo DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableRecordBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableRecordBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.EnsureUndisposed(in bool, in bool) DisposableRecordBase.IfUndisposed<T>(in T, in bool) DisposableRecordBase.IfUndisposed(in Action, in bool) DisposableRecordBase.IfUndisposed<T>(in Func<T>, in bool) DisposableRecordBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableRecordBase.DisposeAttributes() DisposableRecordBase.DisposeAttributesAsync() DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.DestructorDisposing DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public abstract record BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase<tAlgo, tPublicKey, tSigner, tFinal> : BouncyCastleAsymmetricNonPqcPublicKeyBase<tAlgo, tPublicKey, tFinal>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>>, IEquatable<BouncyCastleAsymmetricNonPqcPublicKeyBase<tAlgo, tPublicKey, tFinal>>, ISignaturePublicKey, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase<tAlgo, tPublicKey, tSigner, tFinal>> where tAlgo : IAsymmetricAlgorithm where tPublicKey : AsymmetricKeyParameter, ICipherParameters where tSigner : class, ISigner, new() where tFinal : BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase<tAlgo, tPublicKey, tSigner, tFinal>, new() Type Parameters Name Description tAlgo Algorithm type tPublicKey Internal public key type tSigner Signer type tFinal Final type Constructors | Edit this page View Source BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase(string) Constructor Declaration protected BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase(string algorithm) Parameters Type Name Description string algorithm | Edit this page View Source BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase(string, byte[]) Constructor Declaration protected BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase(string algorithm, byte[] keyData) Parameters Type Name Description string algorithm Algorithm name byte[] keyData Key data | Edit this page View Source BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase(string, tPublicKey) Constructor Declaration protected BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase(string algorithm, tPublicKey publicKey) Parameters Type Name Description string algorithm Algorithm name tPublicKey publicKey Public key Methods | Edit this page View Source ValidateSignatureInt(SignatureContainer, bool) Validate a signature which was created using the private key Declaration protected override sealed bool ValidateSignatureInt(SignatureContainer signature, bool throwOnError = true) Parameters Type Name Description SignatureContainer signature Signature bool throwOnError Throw an exception on validation error? Returns Type Description bool If the signature is valid Overrides AsymmetricPublicKeyBase.ValidateSignatureInt(SignatureContainer, bool) | Edit this page View Source ValidateSignatureRaw(byte[], byte[], bool) Declaration public override sealed bool ValidateSignatureRaw(byte[] signature, byte[] signedHash, bool throwOnError = true) Parameters Type Name Description byte[] signature byte[] signedHash bool throwOnError Returns Type Description bool Overrides AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePublicKey wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T>"
  },
  "api/wan24.Crypto.BC.BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2-4.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2-4.html",
    "title": "Class BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2<tAlgo, tPublicKey, tSigner, tFinal> | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2<tAlgo, tPublicKey, tSigner, tFinal> Base class for a Bouncy Castle asymmetric non-PQC public signature key (which requires a context constructor parameter) Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal> BouncyCastleAsymmetricNonPqcPublicKeyBase<tAlgo, tPublicKey, tFinal> BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2<tAlgo, tPublicKey, tSigner, tFinal> AsymmetricEd448PublicKey AsymmetricXEd448PublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>> IEquatable<BouncyCastleAsymmetricNonPqcPublicKeyBase<tAlgo, tPublicKey, tFinal>> ISignaturePublicKey IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2<tAlgo, tPublicKey, tSigner, tFinal>> Inherited Members BouncyCastleAsymmetricNonPqcPublicKeyBase<tAlgo, tPublicKey, tFinal>.SerializeKeyData() BouncyCastleAsymmetricNonPqcPublicKeyBase<tAlgo, tPublicKey, tFinal>.DeserializeKeyData() BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>._PublicKey BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.IsBcImportExportImplemented BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.PublicKey BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.ExportBc() BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.GetCopy() BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.SerializeKeyData() BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.DeserializeKeyData() BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.ImportBc(in byte[]) AsymmetricPublicKeyBase._ID AsymmetricPublicKeyBase.GetCopy() AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.PrintMembers(StringBuilder) AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.EqualityContract AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.EnsurePqcRequirement(in bool) AsymmetricKeyBase.EnsureAllowedCurve(in bool) AsymmetricKeyBase.Serialize(Stream) AsymmetricKeyBase.SerializeAsync(Stream, CancellationToken) AsymmetricKeyBase.Deserialize(Stream, int) AsymmetricKeyBase.DeserializeAsync(Stream, int, CancellationToken) AsymmetricKeyBase.Dispose(bool) AsymmetricKeyBase.DisposeCore() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.SerializedObjectVersion DisposableStreamSerializerRecordBase.SerializerVersion DisposableRecordBase.DisposeSyncObject DisposableRecordBase.AsyncDisposing DisposableRecordBase.AllowFinalizer DisposableRecordBase.DisposeObjects DisposableRecordBase.StackInfo DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableRecordBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableRecordBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.EnsureUndisposed(in bool, in bool) DisposableRecordBase.IfUndisposed<T>(in T, in bool) DisposableRecordBase.IfUndisposed(in Action, in bool) DisposableRecordBase.IfUndisposed<T>(in Func<T>, in bool) DisposableRecordBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableRecordBase.DisposeAttributes() DisposableRecordBase.DisposeAttributesAsync() DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.DestructorDisposing DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public abstract record BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2<tAlgo, tPublicKey, tSigner, tFinal> : BouncyCastleAsymmetricNonPqcPublicKeyBase<tAlgo, tPublicKey, tFinal>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>>, IEquatable<BouncyCastleAsymmetricNonPqcPublicKeyBase<tAlgo, tPublicKey, tFinal>>, ISignaturePublicKey, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2<tAlgo, tPublicKey, tSigner, tFinal>> where tAlgo : IAsymmetricAlgorithm where tPublicKey : AsymmetricKeyParameter, ICipherParameters where tSigner : class, ISigner where tFinal : BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2<tAlgo, tPublicKey, tSigner, tFinal>, new() Type Parameters Name Description tAlgo Algorithm type tPublicKey Internal public key type tSigner Signer type tFinal Final type Constructors | Edit this page View Source BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2(string) Constructor Declaration protected BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2(string algorithm) Parameters Type Name Description string algorithm | Edit this page View Source BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2(string, byte[]) Constructor Declaration protected BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2(string algorithm, byte[] keyData) Parameters Type Name Description string algorithm Algorithm name byte[] keyData Key data | Edit this page View Source BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2(string, tPublicKey) Constructor Declaration protected BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2(string algorithm, tPublicKey publicKey) Parameters Type Name Description string algorithm Algorithm name tPublicKey publicKey Public key Methods | Edit this page View Source ValidateSignatureInt(SignatureContainer, bool) Validate a signature which was created using the private key Declaration protected override sealed bool ValidateSignatureInt(SignatureContainer signature, bool throwOnError = true) Parameters Type Name Description SignatureContainer signature Signature bool throwOnError Throw an exception on validation error? Returns Type Description bool If the signature is valid Overrides AsymmetricPublicKeyBase.ValidateSignatureInt(SignatureContainer, bool) | Edit this page View Source ValidateSignatureRaw(byte[], byte[], bool) Declaration public override sealed bool ValidateSignatureRaw(byte[] signature, byte[] signedHash, bool throwOnError = true) Parameters Type Name Description byte[] signature byte[] signedHash bool throwOnError Returns Type Description bool Overrides AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePublicKey wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T>"
  },
  "api/wan24.Crypto.BC.BouncyCastleAsymmetricPqcPrivateKeyBase-5.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleAsymmetricPqcPrivateKeyBase-5.html",
    "title": "Class BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> Base class for a Bouncy Castle asymmetric PQC private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<tPublic, tFinal> BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tGenerator, tExtractor, tFinal> BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal> Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricPrivateKeyBase<tPublic, tFinal>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>> IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>> Inherited Members BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.Keys BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.Bits BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.ExportBc() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeFullKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeFullKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.GetPublicKey(tPrivateKey) BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.ImportBc(in byte[]) AsymmetricPrivateKeyBase<tPublic, tFinal>._PublicKey AsymmetricPrivateKeyBase<tPublic, tFinal>.GetCopy() AsymmetricPrivateKeyBase<tPublic, tFinal>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<tPublic, tFinal>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<tPublic, tFinal>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<tPublic, tFinal>.Dispose(bool) AsymmetricPrivateKeyBase<tPublic, tFinal>.DisposeCore() AsymmetricPrivateKeyBase<tPublic, tFinal>.ToString() AsymmetricPrivateKeyBase<tPublic, tFinal>.PrintMembers(StringBuilder) AsymmetricPrivateKeyBase<tPublic, tFinal>.GetHashCode() AsymmetricPrivateKeyBase<tPublic, tFinal>.Equals(object) AsymmetricPrivateKeyBase<tPublic, tFinal>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<tPublic, tFinal>.Equals(AsymmetricPrivateKeyBase<tPublic, tFinal>) AsymmetricPrivateKeyBase<tPublic, tFinal>.<Clone>$() AsymmetricPrivateKeyBase<tPublic, tFinal>.EqualityContract AsymmetricPrivateKeyBase<tPublic, tFinal>.PublicKey AsymmetricPrivateKeyBase<tPublic, tFinal>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.EnsurePqcRequirement(in bool) AsymmetricKeyBase.EnsureAllowedCurve(in bool) AsymmetricKeyBase.Serialize(Stream) AsymmetricKeyBase.SerializeAsync(Stream, CancellationToken) AsymmetricKeyBase.Deserialize(Stream, int) AsymmetricKeyBase.DeserializeAsync(Stream, int, CancellationToken) AsymmetricKeyBase.Dispose(bool) AsymmetricKeyBase.DisposeCore() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.PrintMembers(StringBuilder) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.EqualityContract AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.SerializedObjectVersion DisposableStreamSerializerRecordBase.SerializerVersion DisposableRecordBase.DisposeSyncObject DisposableRecordBase.AsyncDisposing DisposableRecordBase.AllowFinalizer DisposableRecordBase.DisposeObjects DisposableRecordBase.StackInfo DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableRecordBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableRecordBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.EnsureUndisposed(in bool, in bool) DisposableRecordBase.IfUndisposed<T>(in T, in bool) DisposableRecordBase.IfUndisposed(in Action, in bool) DisposableRecordBase.IfUndisposed<T>(in Func<T>, in bool) DisposableRecordBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableRecordBase.DisposeAttributes() DisposableRecordBase.DisposeAttributesAsync() DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.DestructorDisposing DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public abstract record BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> : BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricPrivateKeyBase<tPublic, tFinal>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>>, IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>> where tPublic : BouncyCastleAsymmetricPqcPublicKeyBase<tAlgo, tPublicKey, tPublic>, new() where tAlgo : IAsymmetricAlgorithm where tPublicKey : AsymmetricKeyParameter, ICipherParameters where tPrivateKey : AsymmetricKeyParameter where tFinal : BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>, new() Type Parameters Name Description tPublic Public key type tAlgo Algorithm type tPublicKey Internal public key type tPrivateKey Internal private key type tFinal Final type Constructors | Edit this page View Source BouncyCastleAsymmetricPqcPrivateKeyBase(string) Constructor Declaration protected BouncyCastleAsymmetricPqcPrivateKeyBase(string algorithm) Parameters Type Name Description string algorithm Algorithm name | Edit this page View Source BouncyCastleAsymmetricPqcPrivateKeyBase(string, AsymmetricCipherKeyPair) Constructor Declaration protected BouncyCastleAsymmetricPqcPrivateKeyBase(string algorithm, AsymmetricCipherKeyPair keys) Parameters Type Name Description string algorithm Algorithm name AsymmetricCipherKeyPair keys Keys | Edit this page View Source BouncyCastleAsymmetricPqcPrivateKeyBase(string, byte[]) Constructor Declaration protected BouncyCastleAsymmetricPqcPrivateKeyBase(string algorithm, byte[] keyData) Parameters Type Name Description string algorithm Algorithm name byte[] keyData Key data | Edit this page View Source BouncyCastleAsymmetricPqcPrivateKeyBase(string, tPrivateKey) Constructor Declaration protected BouncyCastleAsymmetricPqcPrivateKeyBase(string algorithm, tPrivateKey privateKey) Parameters Type Name Description string algorithm Algorithm name tPrivateKey privateKey Private key Methods | Edit this page View Source DeserializeFullKeyData() Deserialize the full key data (private and public key) Declaration protected override void DeserializeFullKeyData() Overrides BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeFullKeyData() | Edit this page View Source DeserializeKeyData() Deserialize the key data Declaration protected override void DeserializeKeyData() Overrides BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeKeyData() | Edit this page View Source ExportBc() Export the key in Bouncy Castle format, if possible Declaration public override byte[] ExportBc() Returns Type Description byte[] Serialized key data (DER encoded; don't forget to clear!) Overrides BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.ExportBc() | Edit this page View Source ImportBc(in byte[]) Declaration public static tFinal ImportBc(in byte[] keyInfo) Parameters Type Name Description byte[] keyInfo Returns Type Description tFinal | Edit this page View Source SerializeFullKeyData() Serialize the full key data (private and public key) Declaration protected override byte[] SerializeFullKeyData() Returns Type Description byte[] Serialized key data Overrides BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeFullKeyData() | Edit this page View Source SerializeKeyData() Serialize the key data Declaration protected override byte[] SerializeKeyData() Returns Type Description byte[] Serialized key data Overrides BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeKeyData() Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase-7.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase-7.html",
    "title": "Class BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tGenerator, tExtractor, tFinal> | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tGenerator, tExtractor, tFinal> Base class for a Bouncy Castle asymmetric PQC private key exchange key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<tPublic, tFinal> BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tGenerator, tExtractor, tFinal> AsymmetricBikePrivateKey AsymmetricFrodoKemPrivateKey AsymmetricHqcPrivateKey AsymmetricKyberPrivateKey AsymmetricNtruEncryptPrivateKey AsymmetricSNtruPrimePrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<tPublic, tFinal>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>> IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>> IKeyExchangePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IKeyExchange IEquatable<BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tGenerator, tExtractor, tFinal>> Inherited Members BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.ExportBc() BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeKeyData() BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeKeyData() BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeFullKeyData() BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeFullKeyData() BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.ImportBc(in byte[]) BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.Keys BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.Bits BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.ExportBc() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeFullKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeFullKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.GetPublicKey(tPrivateKey) BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.ImportBc(in byte[]) AsymmetricPrivateKeyBase<tPublic, tFinal>._PublicKey AsymmetricPrivateKeyBase<tPublic, tFinal>.GetCopy() AsymmetricPrivateKeyBase<tPublic, tFinal>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<tPublic, tFinal>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<tPublic, tFinal>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<tPublic, tFinal>.Dispose(bool) AsymmetricPrivateKeyBase<tPublic, tFinal>.DisposeCore() AsymmetricPrivateKeyBase<tPublic, tFinal>.ToString() AsymmetricPrivateKeyBase<tPublic, tFinal>.PrintMembers(StringBuilder) AsymmetricPrivateKeyBase<tPublic, tFinal>.GetHashCode() AsymmetricPrivateKeyBase<tPublic, tFinal>.Equals(object) AsymmetricPrivateKeyBase<tPublic, tFinal>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<tPublic, tFinal>.Equals(AsymmetricPrivateKeyBase<tPublic, tFinal>) AsymmetricPrivateKeyBase<tPublic, tFinal>.<Clone>$() AsymmetricPrivateKeyBase<tPublic, tFinal>.EqualityContract AsymmetricPrivateKeyBase<tPublic, tFinal>.PublicKey AsymmetricPrivateKeyBase<tPublic, tFinal>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.EnsurePqcRequirement(in bool) AsymmetricKeyBase.EnsureAllowedCurve(in bool) AsymmetricKeyBase.Serialize(Stream) AsymmetricKeyBase.SerializeAsync(Stream, CancellationToken) AsymmetricKeyBase.Deserialize(Stream, int) AsymmetricKeyBase.DeserializeAsync(Stream, int, CancellationToken) AsymmetricKeyBase.Dispose(bool) AsymmetricKeyBase.DisposeCore() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.PrintMembers(StringBuilder) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.EqualityContract AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.SerializedObjectVersion DisposableStreamSerializerRecordBase.SerializerVersion DisposableRecordBase.DisposeSyncObject DisposableRecordBase.AsyncDisposing DisposableRecordBase.AllowFinalizer DisposableRecordBase.DisposeObjects DisposableRecordBase.StackInfo DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableRecordBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableRecordBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.EnsureUndisposed(in bool, in bool) DisposableRecordBase.IfUndisposed<T>(in T, in bool) DisposableRecordBase.IfUndisposed(in Action, in bool) DisposableRecordBase.IfUndisposed<T>(in Func<T>, in bool) DisposableRecordBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableRecordBase.DisposeAttributes() DisposableRecordBase.DisposeAttributesAsync() DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.DestructorDisposing DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public abstract record BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tGenerator, tExtractor, tFinal> : BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<tPublic, tFinal>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>>, IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>>, IKeyExchangePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IKeyExchange, IEquatable<BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tGenerator, tExtractor, tFinal>> where tPublic : BouncyCastleAsymmetricPqcPublicKeyBase<tAlgo, tPublicKey, tPublic>, new() where tAlgo : IAsymmetricAlgorithm where tPublicKey : AsymmetricKeyParameter, ICipherParameters where tPrivateKey : AsymmetricKeyParameter where tGenerator : class, IEncapsulatedSecretGenerator where tExtractor : class, IEncapsulatedSecretExtractor where tFinal : BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tGenerator, tExtractor, tFinal>, new() Type Parameters Name Description tPublic Public key type tAlgo Algorithm type tPublicKey Internal public key type tPrivateKey Internal private key type tGenerator Key generator type tExtractor Key extractor type tFinal Final type Constructors | Edit this page View Source BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase(string) Constructor Declaration protected BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase(string algorithm) Parameters Type Name Description string algorithm Algorithm name | Edit this page View Source BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase(string, AsymmetricCipherKeyPair) Constructor Declaration protected BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase(string algorithm, AsymmetricCipherKeyPair keys) Parameters Type Name Description string algorithm Algorithm name AsymmetricCipherKeyPair keys Keys | Edit this page View Source BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase(string, byte[]) Constructor Declaration protected BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase(string algorithm, byte[] keyData) Parameters Type Name Description string algorithm Algorithm name byte[] keyData Key data | Edit this page View Source BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase(string, tPrivateKey) Constructor Declaration protected BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase(string algorithm, tPrivateKey privateKey) Parameters Type Name Description string algorithm Algorithm name tPrivateKey privateKey Private key Methods | Edit this page View Source DeriveKey(byte[]) Declaration public override byte[] DeriveKey(byte[] keyExchangeData) Parameters Type Name Description byte[] keyExchangeData Returns Type Description byte[] Overrides AsymmetricPrivateKeyBase<tPublic, tFinal>.DeriveKey(byte[]) | Edit this page View Source DeriveKey(IAsymmetricPublicKey) Declaration public override byte[] DeriveKey(IAsymmetricPublicKey publicKey) Parameters Type Name Description IAsymmetricPublicKey publicKey Returns Type Description byte[] Overrides wan24.Crypto.AsymmetricPrivateKeyBase<tPublic, tFinal>.DeriveKey(wan24.Crypto.IAsymmetricPublicKey) | Edit this page View Source GetKeyExchangeData(IAsymmetricPublicKey?, CryptoOptions?) Declaration public override (byte[] Key, byte[] KeyExchangeData) GetKeyExchangeData(IAsymmetricPublicKey? publicKey = null, CryptoOptions? options = null) Parameters Type Name Description IAsymmetricPublicKey publicKey CryptoOptions options Returns Type Description (byte[] Key, byte[] KeyExchangeData) Overrides wan24.Crypto.AsymmetricPrivateKeyBase<tPublic, tFinal>.GetKeyExchangeData(wan24.Crypto.IAsymmetricPublicKey, wan24.Crypto.CryptoOptions) Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.IKeyExchangePrivateKey wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider wan24.Crypto.IKeyExchange IEquatable<T>"
  },
  "api/wan24.Crypto.BC.BouncyCastleAsymmetricPqcPrivateSignatureKeyBase-6.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleAsymmetricPqcPrivateSignatureKeyBase-6.html",
    "title": "Class BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal> | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal> Base class for a Bouncy Castle asymmetric PQC private signature key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<tPublic, tFinal> BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal> AsymmetricDilithiumPrivateKey AsymmetricFalconPrivateKey AsymmetricPicnicPrivateKey AsymmetricSphincsPlusPrivateKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPrivateKeyBase<tPublic, tFinal>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>> IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>> ISignaturePrivateKey IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal>> Inherited Members BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.ExportBc() BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeKeyData() BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeKeyData() BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeFullKeyData() BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeFullKeyData() BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.ImportBc(in byte[]) BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.Keys BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.IsBcImportExportImplemented BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.PrivateKey BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.PublicKey BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.Bits BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.ExportBc() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.SerializeFullKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.DeserializeFullKeyData() BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.GetPublicKey(tPrivateKey) BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>.ImportBc(in byte[]) AsymmetricPrivateKeyBase<tPublic, tFinal>._PublicKey AsymmetricPrivateKeyBase<tPublic, tFinal>.GetCopy() AsymmetricPrivateKeyBase<tPublic, tFinal>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<tPublic, tFinal>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<tPublic, tFinal>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<tPublic, tFinal>.Dispose(bool) AsymmetricPrivateKeyBase<tPublic, tFinal>.DisposeCore() AsymmetricPrivateKeyBase<tPublic, tFinal>.ToString() AsymmetricPrivateKeyBase<tPublic, tFinal>.PrintMembers(StringBuilder) AsymmetricPrivateKeyBase<tPublic, tFinal>.GetHashCode() AsymmetricPrivateKeyBase<tPublic, tFinal>.Equals(object) AsymmetricPrivateKeyBase<tPublic, tFinal>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<tPublic, tFinal>.Equals(AsymmetricPrivateKeyBase<tPublic, tFinal>) AsymmetricPrivateKeyBase<tPublic, tFinal>.<Clone>$() AsymmetricPrivateKeyBase<tPublic, tFinal>.EqualityContract AsymmetricPrivateKeyBase<tPublic, tFinal>.PublicKey AsymmetricPrivateKeyBase<tPublic, tFinal>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.EnsurePqcRequirement(in bool) AsymmetricKeyBase.EnsureAllowedCurve(in bool) AsymmetricKeyBase.Serialize(Stream) AsymmetricKeyBase.SerializeAsync(Stream, CancellationToken) AsymmetricKeyBase.Deserialize(Stream, int) AsymmetricKeyBase.DeserializeAsync(Stream, int, CancellationToken) AsymmetricKeyBase.Dispose(bool) AsymmetricKeyBase.DisposeCore() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.PrintMembers(StringBuilder) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.EqualityContract AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.SerializedObjectVersion DisposableStreamSerializerRecordBase.SerializerVersion DisposableRecordBase.DisposeSyncObject DisposableRecordBase.AsyncDisposing DisposableRecordBase.AllowFinalizer DisposableRecordBase.DisposeObjects DisposableRecordBase.StackInfo DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableRecordBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableRecordBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.EnsureUndisposed(in bool, in bool) DisposableRecordBase.IfUndisposed<T>(in T, in bool) DisposableRecordBase.IfUndisposed(in Action, in bool) DisposableRecordBase.IfUndisposed<T>(in Func<T>, in bool) DisposableRecordBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableRecordBase.DisposeAttributes() DisposableRecordBase.DisposeAttributesAsync() DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.DestructorDisposing DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public abstract record BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal> : BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPrivateKeyBase<tPublic, tFinal>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>>, IEquatable<BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>>, ISignaturePrivateKey, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal>> where tPublic : BouncyCastleAsymmetricPqcPublicSignatureKeyBase<tAlgo, tPublicKey, tSigner, tPublic>, new() where tAlgo : IAsymmetricAlgorithm where tPublicKey : AsymmetricKeyParameter, ICipherParameters where tPrivateKey : AsymmetricKeyParameter where tSigner : class, IMessageSigner, new() where tFinal : BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal>, new() Type Parameters Name Description tPublic Public key type tAlgo Algorithm type tPublicKey Internal public key type tPrivateKey Internal private key type tSigner Signer type tFinal Final type Constructors | Edit this page View Source BouncyCastleAsymmetricPqcPrivateSignatureKeyBase(string) Constructor Declaration protected BouncyCastleAsymmetricPqcPrivateSignatureKeyBase(string algorithm) Parameters Type Name Description string algorithm Algorithm name | Edit this page View Source BouncyCastleAsymmetricPqcPrivateSignatureKeyBase(string, AsymmetricCipherKeyPair) Constructor Declaration protected BouncyCastleAsymmetricPqcPrivateSignatureKeyBase(string algorithm, AsymmetricCipherKeyPair keys) Parameters Type Name Description string algorithm Algorithm name AsymmetricCipherKeyPair keys Keys | Edit this page View Source BouncyCastleAsymmetricPqcPrivateSignatureKeyBase(string, byte[]) Constructor Declaration protected BouncyCastleAsymmetricPqcPrivateSignatureKeyBase(string algorithm, byte[] keyData) Parameters Type Name Description string algorithm Algorithm name byte[] keyData Key data | Edit this page View Source BouncyCastleAsymmetricPqcPrivateSignatureKeyBase(string, tPrivateKey) Constructor Declaration protected BouncyCastleAsymmetricPqcPrivateSignatureKeyBase(string algorithm, tPrivateKey privateKey) Parameters Type Name Description string algorithm Algorithm name tPrivateKey privateKey Private key Methods | Edit this page View Source SignHashRaw(byte[]) Declaration public override sealed byte[] SignHashRaw(byte[] hash) Parameters Type Name Description byte[] hash Returns Type Description byte[] Overrides AsymmetricPrivateKeyBase<tPublic, tFinal>.SignHashRaw(byte[]) Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePrivateKey wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T>"
  },
  "api/wan24.Crypto.BC.BouncyCastleAsymmetricPqcPublicKeyBase-3.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleAsymmetricPqcPublicKeyBase-3.html",
    "title": "Class BouncyCastleAsymmetricPqcPublicKeyBase<tAlgo, tPublicKey, tFinal> | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleAsymmetricPqcPublicKeyBase<tAlgo, tPublicKey, tFinal> Base class fo a Bouncy Castle asymmetric PQC public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal> BouncyCastleAsymmetricPqcPublicKeyBase<tAlgo, tPublicKey, tFinal> AsymmetricBikePublicKey AsymmetricFrodoKemPublicKey AsymmetricHqcPublicKey AsymmetricKyberPublicKey AsymmetricNtruEncryptPublicKey AsymmetricSNtruPrimePublicKey BouncyCastleAsymmetricPqcPublicSignatureKeyBase<tAlgo, tPublicKey, tSigner, tFinal> Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>> IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<tAlgo, tPublicKey, tFinal>> Inherited Members BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>._PublicKey BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.IsBcImportExportImplemented BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.PublicKey BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.ExportBc() BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.GetCopy() BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.SerializeKeyData() BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.DeserializeKeyData() BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.ImportBc(in byte[]) AsymmetricPublicKeyBase._ID AsymmetricPublicKeyBase.GetCopy() AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) AsymmetricPublicKeyBase.ValidateSignatureInt(SignatureContainer, bool) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.PrintMembers(StringBuilder) AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.EqualityContract AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.EnsurePqcRequirement(in bool) AsymmetricKeyBase.EnsureAllowedCurve(in bool) AsymmetricKeyBase.Serialize(Stream) AsymmetricKeyBase.SerializeAsync(Stream, CancellationToken) AsymmetricKeyBase.Deserialize(Stream, int) AsymmetricKeyBase.DeserializeAsync(Stream, int, CancellationToken) AsymmetricKeyBase.Dispose(bool) AsymmetricKeyBase.DisposeCore() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.SerializedObjectVersion DisposableStreamSerializerRecordBase.SerializerVersion DisposableRecordBase.DisposeSyncObject DisposableRecordBase.AsyncDisposing DisposableRecordBase.AllowFinalizer DisposableRecordBase.DisposeObjects DisposableRecordBase.StackInfo DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableRecordBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableRecordBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.EnsureUndisposed(in bool, in bool) DisposableRecordBase.IfUndisposed<T>(in T, in bool) DisposableRecordBase.IfUndisposed(in Action, in bool) DisposableRecordBase.IfUndisposed<T>(in Func<T>, in bool) DisposableRecordBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableRecordBase.DisposeAttributes() DisposableRecordBase.DisposeAttributesAsync() DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.DestructorDisposing DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public abstract record BouncyCastleAsymmetricPqcPublicKeyBase<tAlgo, tPublicKey, tFinal> : BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>>, IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<tAlgo, tPublicKey, tFinal>> where tAlgo : IAsymmetricAlgorithm where tPublicKey : AsymmetricKeyParameter, ICipherParameters where tFinal : BouncyCastleAsymmetricPqcPublicKeyBase<tAlgo, tPublicKey, tFinal>, new() Type Parameters Name Description tAlgo Algorithm type tPublicKey Internal public key type tFinal Final type Constructors | Edit this page View Source BouncyCastleAsymmetricPqcPublicKeyBase(string) Constructor Declaration protected BouncyCastleAsymmetricPqcPublicKeyBase(string algorithm) Parameters Type Name Description string algorithm Algorithm name | Edit this page View Source BouncyCastleAsymmetricPqcPublicKeyBase(string, byte[]) Constructor Declaration protected BouncyCastleAsymmetricPqcPublicKeyBase(string algorithm, byte[] keyData) Parameters Type Name Description string algorithm Algorithm name byte[] keyData Key data | Edit this page View Source BouncyCastleAsymmetricPqcPublicKeyBase(string, tPublicKey) Constructor Declaration protected BouncyCastleAsymmetricPqcPublicKeyBase(string algorithm, tPublicKey publicKey) Parameters Type Name Description string algorithm Algorithm name tPublicKey publicKey Public key Methods | Edit this page View Source DeserializeKeyData() Deserialize the key data Declaration protected override void DeserializeKeyData() Overrides BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.DeserializeKeyData() | Edit this page View Source ExportBc() Export the key in Bouncy Castle format, if possible Declaration public override byte[] ExportBc() Returns Type Description byte[] Serialized key data (DER encoded; don't forget to clear!) Overrides BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.ExportBc() | Edit this page View Source ImportBc(in byte[]) Declaration public static tFinal ImportBc(in byte[] keyInfo) Parameters Type Name Description byte[] keyInfo Returns Type Description tFinal | Edit this page View Source SerializeKeyData() Serialize the key data Declaration protected override byte[] SerializeKeyData() Returns Type Description byte[] Serialized key data Overrides BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.SerializeKeyData() Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.BouncyCastleAsymmetricPqcPublicSignatureKeyBase-4.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleAsymmetricPqcPublicSignatureKeyBase-4.html",
    "title": "Class BouncyCastleAsymmetricPqcPublicSignatureKeyBase<tAlgo, tPublicKey, tSigner, tFinal> | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleAsymmetricPqcPublicSignatureKeyBase<tAlgo, tPublicKey, tSigner, tFinal> Base class for a Bouncy Castle asymmetric PQC public signature key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal> BouncyCastleAsymmetricPqcPublicKeyBase<tAlgo, tPublicKey, tFinal> BouncyCastleAsymmetricPqcPublicSignatureKeyBase<tAlgo, tPublicKey, tSigner, tFinal> AsymmetricDilithiumPublicKey AsymmetricFalconPublicKey AsymmetricPicnicPublicKey AsymmetricSphincsPlusPublicKey Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>> IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<tAlgo, tPublicKey, tFinal>> ISignaturePublicKey IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<BouncyCastleAsymmetricPqcPublicSignatureKeyBase<tAlgo, tPublicKey, tSigner, tFinal>> Inherited Members BouncyCastleAsymmetricPqcPublicKeyBase<tAlgo, tPublicKey, tFinal>.ExportBc() BouncyCastleAsymmetricPqcPublicKeyBase<tAlgo, tPublicKey, tFinal>.SerializeKeyData() BouncyCastleAsymmetricPqcPublicKeyBase<tAlgo, tPublicKey, tFinal>.DeserializeKeyData() BouncyCastleAsymmetricPqcPublicKeyBase<tAlgo, tPublicKey, tFinal>.ImportBc(in byte[]) BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>._PublicKey BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.IsBcImportExportImplemented BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.PublicKey BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.ExportBc() BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.GetCopy() BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.SerializeKeyData() BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.DeserializeKeyData() BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>.ImportBc(in byte[]) AsymmetricPublicKeyBase._ID AsymmetricPublicKeyBase.GetCopy() AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.PrintMembers(StringBuilder) AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.EqualityContract AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.EnsurePqcRequirement(in bool) AsymmetricKeyBase.EnsureAllowedCurve(in bool) AsymmetricKeyBase.Serialize(Stream) AsymmetricKeyBase.SerializeAsync(Stream, CancellationToken) AsymmetricKeyBase.Deserialize(Stream, int) AsymmetricKeyBase.DeserializeAsync(Stream, int, CancellationToken) AsymmetricKeyBase.Dispose(bool) AsymmetricKeyBase.DisposeCore() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.SerializedObjectVersion DisposableStreamSerializerRecordBase.SerializerVersion DisposableRecordBase.DisposeSyncObject DisposableRecordBase.AsyncDisposing DisposableRecordBase.AllowFinalizer DisposableRecordBase.DisposeObjects DisposableRecordBase.StackInfo DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableRecordBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableRecordBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.EnsureUndisposed(in bool, in bool) DisposableRecordBase.IfUndisposed<T>(in T, in bool) DisposableRecordBase.IfUndisposed(in Action, in bool) DisposableRecordBase.IfUndisposed<T>(in Func<T>, in bool) DisposableRecordBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableRecordBase.DisposeAttributes() DisposableRecordBase.DisposeAttributesAsync() DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.DestructorDisposing DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public abstract record BouncyCastleAsymmetricPqcPublicSignatureKeyBase<tAlgo, tPublicKey, tSigner, tFinal> : BouncyCastleAsymmetricPqcPublicKeyBase<tAlgo, tPublicKey, tFinal>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>>, IEquatable<BouncyCastleAsymmetricPqcPublicKeyBase<tAlgo, tPublicKey, tFinal>>, ISignaturePublicKey, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<BouncyCastleAsymmetricPqcPublicSignatureKeyBase<tAlgo, tPublicKey, tSigner, tFinal>> where tAlgo : IAsymmetricAlgorithm where tPublicKey : AsymmetricKeyParameter, ICipherParameters where tSigner : class, IMessageSigner, new() where tFinal : BouncyCastleAsymmetricPqcPublicSignatureKeyBase<tAlgo, tPublicKey, tSigner, tFinal>, new() Type Parameters Name Description tAlgo Algorithm type tPublicKey Internal public key type tSigner Signer type tFinal Final type Constructors | Edit this page View Source BouncyCastleAsymmetricPqcPublicSignatureKeyBase(string) Constructor Declaration protected BouncyCastleAsymmetricPqcPublicSignatureKeyBase(string algorithm) Parameters Type Name Description string algorithm | Edit this page View Source BouncyCastleAsymmetricPqcPublicSignatureKeyBase(string, byte[]) Constructor Declaration protected BouncyCastleAsymmetricPqcPublicSignatureKeyBase(string algorithm, byte[] keyData) Parameters Type Name Description string algorithm Algorithm name byte[] keyData Key data | Edit this page View Source BouncyCastleAsymmetricPqcPublicSignatureKeyBase(string, tPublicKey) Constructor Declaration protected BouncyCastleAsymmetricPqcPublicSignatureKeyBase(string algorithm, tPublicKey publicKey) Parameters Type Name Description string algorithm Algorithm name tPublicKey publicKey Public key Methods | Edit this page View Source ValidateSignatureInt(SignatureContainer, bool) Validate a signature which was created using the private key Declaration protected override sealed bool ValidateSignatureInt(SignatureContainer signature, bool throwOnError = true) Parameters Type Name Description SignatureContainer signature Signature bool throwOnError Throw an exception on validation error? Returns Type Description bool If the signature is valid Overrides AsymmetricPublicKeyBase.ValidateSignatureInt(SignatureContainer, bool) | Edit this page View Source ValidateSignatureRaw(byte[], byte[], bool) Declaration public override sealed bool ValidateSignatureRaw(byte[] signature, byte[] signedHash, bool throwOnError = true) Parameters Type Name Description byte[] signature byte[] signedHash bool throwOnError Returns Type Description bool Overrides AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> wan24.Crypto.ISignaturePublicKey wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T>"
  },
  "api/wan24.Crypto.BC.BouncyCastleAsymmetricPrivateKeyBase-5.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleAsymmetricPrivateKeyBase-5.html",
    "title": "Class BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> Base class for a Bouncy Castle asymmetric private key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPrivateKeyBase<tPublic, tFinal> BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IAsymmetricPrivateKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricPrivateKeyBase<tPublic, tFinal>> IEquatable<BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>> Inherited Members AsymmetricPrivateKeyBase<tPublic, tFinal>._PublicKey AsymmetricPrivateKeyBase<tPublic, tFinal>.GetCopy() AsymmetricPrivateKeyBase<tPublic, tFinal>.SignData(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignData(Stream, string, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignDataAsync(Stream, string, CryptoOptions, CancellationToken) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignHash(byte[], string, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.SignHashRaw(byte[]) AsymmetricPrivateKeyBase<tPublic, tFinal>.GetKeyExchangeData(IAsymmetricPublicKey, CryptoOptions) AsymmetricPrivateKeyBase<tPublic, tFinal>.DeriveKey(byte[]) AsymmetricPrivateKeyBase<tPublic, tFinal>.DeriveKey(IAsymmetricPublicKey) AsymmetricPrivateKeyBase<tPublic, tFinal>.Dispose(bool) AsymmetricPrivateKeyBase<tPublic, tFinal>.DisposeCore() AsymmetricPrivateKeyBase<tPublic, tFinal>.ToString() AsymmetricPrivateKeyBase<tPublic, tFinal>.PrintMembers(StringBuilder) AsymmetricPrivateKeyBase<tPublic, tFinal>.GetHashCode() AsymmetricPrivateKeyBase<tPublic, tFinal>.Equals(object) AsymmetricPrivateKeyBase<tPublic, tFinal>.Equals(AsymmetricKeyBase) AsymmetricPrivateKeyBase<tPublic, tFinal>.Equals(AsymmetricPrivateKeyBase<tPublic, tFinal>) AsymmetricPrivateKeyBase<tPublic, tFinal>.<Clone>$() AsymmetricPrivateKeyBase<tPublic, tFinal>.EqualityContract AsymmetricPrivateKeyBase<tPublic, tFinal>.PublicKey AsymmetricPrivateKeyBase<tPublic, tFinal>.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.ToString() AsymmetricKeyBase.EnsurePqcRequirement(in bool) AsymmetricKeyBase.EnsureAllowedCurve(in bool) AsymmetricKeyBase.Serialize(Stream) AsymmetricKeyBase.SerializeAsync(Stream, CancellationToken) AsymmetricKeyBase.Deserialize(Stream, int) AsymmetricKeyBase.DeserializeAsync(Stream, int, CancellationToken) AsymmetricKeyBase.Dispose(bool) AsymmetricKeyBase.DisposeCore() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.PrintMembers(StringBuilder) AsymmetricKeyBase.GetHashCode() AsymmetricKeyBase.Equals(object) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.Equals(AsymmetricKeyBase) AsymmetricKeyBase.<Clone>$() AsymmetricKeyBase.EqualityContract AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.ID AsymmetricKeyBase.Algorithm AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.SerializedObjectVersion DisposableStreamSerializerRecordBase.SerializerVersion DisposableRecordBase.DisposeSyncObject DisposableRecordBase.AsyncDisposing DisposableRecordBase.AllowFinalizer DisposableRecordBase.DisposeObjects DisposableRecordBase.StackInfo DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableRecordBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableRecordBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.EnsureUndisposed(in bool, in bool) DisposableRecordBase.IfUndisposed<T>(in T, in bool) DisposableRecordBase.IfUndisposed(in Action, in bool) DisposableRecordBase.IfUndisposed<T>(in Func<T>, in bool) DisposableRecordBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableRecordBase.DisposeAttributes() DisposableRecordBase.DisposeAttributesAsync() DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.DestructorDisposing DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public abstract record BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> : AsymmetricPrivateKeyBase<tPublic, tFinal>, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IAsymmetricPrivateKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricPrivateKeyBase<tPublic, tFinal>>, IEquatable<BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>> where tPublic : BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tPublic>, new() where tAlgo : IAsymmetricAlgorithm where tPublicKey : AsymmetricKeyParameter, ICipherParameters where tPrivateKey : AsymmetricKeyParameter where tFinal : BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal>, new() Type Parameters Name Description tPublic Public key type tAlgo Algorithm type tPublicKey Internal public key type tPrivateKey Internal private key type tFinal Final type Constructors | Edit this page View Source BouncyCastleAsymmetricPrivateKeyBase(string) Constructor Declaration protected BouncyCastleAsymmetricPrivateKeyBase(string algorithm) Parameters Type Name Description string algorithm Algorithm name | Edit this page View Source BouncyCastleAsymmetricPrivateKeyBase(string, AsymmetricCipherKeyPair) Constructor Declaration protected BouncyCastleAsymmetricPrivateKeyBase(string algorithm, AsymmetricCipherKeyPair keys) Parameters Type Name Description string algorithm Algorithm name AsymmetricCipherKeyPair keys Keys | Edit this page View Source BouncyCastleAsymmetricPrivateKeyBase(string, byte[]) Constructor Declaration protected BouncyCastleAsymmetricPrivateKeyBase(string algorithm, byte[] keyData) Parameters Type Name Description string algorithm Algorithm name byte[] keyData Key data | Edit this page View Source BouncyCastleAsymmetricPrivateKeyBase(string, tPrivateKey) Constructor Declaration protected BouncyCastleAsymmetricPrivateKeyBase(string algorithm, tPrivateKey privateKey) Parameters Type Name Description string algorithm Algorithm name tPrivateKey privateKey Private key Fields | Edit this page View Source Keys Keys Declaration protected AsymmetricCipherKeyPair? Keys Field Value Type Description AsymmetricCipherKeyPair Properties | Edit this page View Source Bits Key size in bits Declaration public override int Bits { get; } Property Value Type Description int Overrides wan24.Crypto.AsymmetricKeyBase.Bits | Edit this page View Source IsBcImportExportImplemented Is the key info export/import implemented in the Bouncy Castle library AND wan24-Crypto-BC? Declaration public static bool IsBcImportExportImplemented { get; } Property Value Type Description bool | Edit this page View Source PrivateKey Private key Declaration public tPrivateKey PrivateKey { get; } Property Value Type Description tPrivateKey | Edit this page View Source PublicKey Public key (don't dispose - the instance will be disposed if the private key instance is being disposed!) Declaration public override tPublic PublicKey { get; } Property Value Type Description tPublic Overrides wan24.Crypto.AsymmetricPrivateKeyBase<tPublic, tFinal>.PublicKey Methods | Edit this page View Source DeserializeFullKeyData() Deserialize the full key data (private and public key) Declaration protected abstract void DeserializeFullKeyData() | Edit this page View Source DeserializeKeyData() Deserialize the key data Declaration protected abstract void DeserializeKeyData() | Edit this page View Source ExportBc() Export the key in Bouncy Castle format, if possible Declaration public virtual byte[] ExportBc() Returns Type Description byte[] Serialized key data (DER encoded; don't forget to clear!) | Edit this page View Source GetPublicKey(tPrivateKey) Get the public key from a private key Declaration protected abstract tPublicKey GetPublicKey(tPrivateKey privateKey) Parameters Type Name Description tPrivateKey privateKey Private key Returns Type Description tPublicKey Public key | Edit this page View Source ImportBc(in byte[]) Import a key in Bouncy Castle format (created by ExportBc()) Declaration public static tFinal ImportBc(in byte[] keyInfo) Parameters Type Name Description byte[] keyInfo Serialized key data (created by ExportBc(); won't be cleared) Returns Type Description tFinal Key (don't forget to dispose!) | Edit this page View Source SerializeFullKeyData() Serialize the full key data (private and public key) Declaration protected abstract byte[] SerializeFullKeyData() Returns Type Description byte[] Serialized key data | Edit this page View Source SerializeKeyData() Serialize the key data Declaration protected abstract byte[] SerializeKeyData() Returns Type Description byte[] Serialized key data Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> wan24.Crypto.IAsymmetricPrivateKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.BouncyCastleAsymmetricPublicKeyBase-3.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleAsymmetricPublicKeyBase-3.html",
    "title": "Class BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal> | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal> Base class fo a Bouncy Castle asymmetric public key Inheritance object DisposableRecordBase DisposableStreamSerializerRecordBase AsymmetricKeyBase AsymmetricPublicKeyBase BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal> BouncyCastleAsymmetricNonPqcPublicKeyBase<tAlgo, tPublicKey, tFinal> BouncyCastleAsymmetricPqcPublicKeyBase<tAlgo, tPublicKey, tFinal> Implements IWillDispose IEquatable<DisposableRecordBase> IObjectValidatable IValidatableObject IEquatable<DisposableStreamSerializerRecordBase> IEquatable<AsymmetricKeyBase> IAsymmetricPublicKey IAsymmetricKey IDisposableObject IDisposable IAsyncDisposable IStreamSerializerVersion IStreamSerializer IStatusProvider IEquatable<AsymmetricPublicKeyBase> IEquatable<BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>> Inherited Members AsymmetricPublicKeyBase._ID AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, byte[], bool) AsymmetricPublicKeyBase.ValidateSignature(SignatureContainer, Stream, bool) AsymmetricPublicKeyBase.ValidateSignatureAsync(SignatureContainer, Stream, bool, CancellationToken) AsymmetricPublicKeyBase.ValidateSignatureRaw(byte[], byte[], bool) AsymmetricPublicKeyBase.ValidateSignatureInt(SignatureContainer, bool) AsymmetricPublicKeyBase.ToString() AsymmetricPublicKeyBase.PrintMembers(StringBuilder) AsymmetricPublicKeyBase.GetHashCode() AsymmetricPublicKeyBase.Equals(object) AsymmetricPublicKeyBase.Equals(AsymmetricKeyBase) AsymmetricPublicKeyBase.Equals(AsymmetricPublicKeyBase) AsymmetricPublicKeyBase.<Clone>$() AsymmetricPublicKeyBase.EqualityContract AsymmetricPublicKeyBase.ID AsymmetricKeyBase.VERSION AsymmetricKeyBase.Export() AsymmetricKeyBase.EnsurePqcRequirement(in bool) AsymmetricKeyBase.EnsureAllowedCurve(in bool) AsymmetricKeyBase.Serialize(Stream) AsymmetricKeyBase.SerializeAsync(Stream, CancellationToken) AsymmetricKeyBase.Deserialize(Stream, int) AsymmetricKeyBase.DeserializeAsync(Stream, int, CancellationToken) AsymmetricKeyBase.Dispose(bool) AsymmetricKeyBase.DisposeCore() AsymmetricKeyBase.Import<T>(byte[]) AsymmetricKeyBase.Import(byte[]) AsymmetricKeyBase.Equals(DisposableStreamSerializerRecordBase) AsymmetricKeyBase.MaxArrayLength AsymmetricKeyBase.Algorithm AsymmetricKeyBase.Bits AsymmetricKeyBase.KeyData AsymmetricKeyBase.State DisposableStreamSerializerRecordBase.BASE_VERSION DisposableStreamSerializerRecordBase.Equals(DisposableRecordBase) DisposableStreamSerializerRecordBase.SerializedObjectVersion DisposableStreamSerializerRecordBase.SerializerVersion DisposableRecordBase.DisposeSyncObject DisposableRecordBase.AsyncDisposing DisposableRecordBase.AllowFinalizer DisposableRecordBase.DisposeObjects DisposableRecordBase.StackInfo DisposableRecordBase.RegisterForDispose<T>(in T) DisposableRecordBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableRecordBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableRecordBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableRecordBase.EnsureUndisposed(in bool, in bool) DisposableRecordBase.IfUndisposed<T>(in T, in bool) DisposableRecordBase.IfUndisposed(in Action, in bool) DisposableRecordBase.IfUndisposed<T>(in Func<T>, in bool) DisposableRecordBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableRecordBase.DisposeAttributes() DisposableRecordBase.DisposeAttributesAsync() DisposableRecordBase.Dispose() DisposableRecordBase.DisposeAsync() DisposableRecordBase.CreateStackInfo DisposableRecordBase.DestructorDisposing DisposableRecordBase.IsDisposing DisposableRecordBase.IsDisposed DisposableRecordBase.OnDisposing DisposableRecordBase.OnDisposed object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public abstract record BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal> : AsymmetricPublicKeyBase, IWillDispose, IEquatable<DisposableRecordBase>, IObjectValidatable, IValidatableObject, IEquatable<DisposableStreamSerializerRecordBase>, IEquatable<AsymmetricKeyBase>, IAsymmetricPublicKey, IAsymmetricKey, IDisposableObject, IDisposable, IAsyncDisposable, IStreamSerializerVersion, IStreamSerializer, IStatusProvider, IEquatable<AsymmetricPublicKeyBase>, IEquatable<BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>> where tAlgo : IAsymmetricAlgorithm where tPublicKey : AsymmetricKeyParameter, ICipherParameters where tFinal : BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal>, new() Type Parameters Name Description tAlgo Algorithm type tPublicKey Internal public key type tFinal Final type Constructors | Edit this page View Source BouncyCastleAsymmetricPublicKeyBase(string) Constructor Declaration protected BouncyCastleAsymmetricPublicKeyBase(string algorithm) Parameters Type Name Description string algorithm Algorithm name | Edit this page View Source BouncyCastleAsymmetricPublicKeyBase(string, byte[]) Constructor Declaration protected BouncyCastleAsymmetricPublicKeyBase(string algorithm, byte[] keyData) Parameters Type Name Description string algorithm Algorithm name byte[] keyData Key data | Edit this page View Source BouncyCastleAsymmetricPublicKeyBase(string, tPublicKey) Constructor Declaration protected BouncyCastleAsymmetricPublicKeyBase(string algorithm, tPublicKey publicKey) Parameters Type Name Description string algorithm Algorithm name tPublicKey publicKey Public key Fields | Edit this page View Source _PublicKey Public key Declaration protected tPublicKey? _PublicKey Field Value Type Description tPublicKey Properties | Edit this page View Source IsBcImportExportImplemented Is the key info export/import implemented in the Bouncy Castle library AND wan24-Crypto-BC? Declaration public static bool IsBcImportExportImplemented { get; } Property Value Type Description bool | Edit this page View Source PublicKey Public key Declaration public tPublicKey PublicKey { get; } Property Value Type Description tPublicKey Methods | Edit this page View Source DeserializeKeyData() Deserialize the key data Declaration protected abstract void DeserializeKeyData() | Edit this page View Source ExportBc() Export the key in Bouncy Castle format, if possible Declaration public virtual byte[] ExportBc() Returns Type Description byte[] Serialized key data (DER encoded; don't forget to clear!) | Edit this page View Source GetCopy() Get a copy Declaration public override sealed IAsymmetricPublicKey GetCopy() Returns Type Description IAsymmetricPublicKey Copy Overrides wan24.Crypto.AsymmetricPublicKeyBase.GetCopy() | Edit this page View Source ImportBc(in byte[]) Import a key in Bouncy Castle format (created by ExportBc()) Declaration public static tFinal ImportBc(in byte[] keyInfo) Parameters Type Name Description byte[] keyInfo Serialized key data (created by ExportBc(); won't be cleared) Returns Type Description tFinal Key (don't forget to dispose!) | Edit this page View Source SerializeKeyData() Serialize the key data Declaration protected abstract byte[] SerializeKeyData() Returns Type Description byte[] Serialized key data Implements wan24.Core.IWillDispose IEquatable<T> wan24.ObjectValidation.IObjectValidatable IValidatableObject IEquatable<T> IEquatable<T> wan24.Crypto.IAsymmetricPublicKey wan24.Crypto.IAsymmetricKey wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.StreamSerializerExtensions.IStreamSerializerVersion wan24.StreamSerializerExtensions.IStreamSerializer wan24.Core.IStatusProvider IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.BouncyCastleBlockCipherAlgorithmBase-1.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleBlockCipherAlgorithmBase-1.html",
    "title": "Class BouncyCastleBlockCipherAlgorithmBase<T> | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleBlockCipherAlgorithmBase<T> Base class for a Bouncy Castle block cipher Inheritance object CryptoAlgorithmBase EncryptionAlgorithmBase BouncyCastleBlockCipherAlgorithmBase<T> Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<EncryptionAlgorithmBase> IEquatable<BouncyCastleBlockCipherAlgorithmBase<T>> Inherited Members EncryptionAlgorithmBase._DefaultOptions EncryptionAlgorithmBase.EnsureDefaultOptions(CryptoOptions) EncryptionAlgorithmBase.EnsureAllowed(in bool) EncryptionAlgorithmBase.EnsureValidKeyLength(byte[]) EncryptionAlgorithmBase.IsKeyLengthValid(int) EncryptionAlgorithmBase.CreateIvBytes() EncryptionAlgorithmBase.ReadFixedIvBytes(Stream, CryptoOptions) EncryptionAlgorithmBase.ReadFixedIvBytesAsync(Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ReadVariableIvBytes(Stream, CryptoOptions) EncryptionAlgorithmBase.ReadVariableIvBytesAsync(Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.EncodeFlags(CryptoFlags, Span<byte>) EncryptionAlgorithmBase.DecodeFlags(ReadOnlySpan<byte>) EncryptionAlgorithmBase.Decrypt(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.Encrypt(Stream, Stream, byte[], CryptoOptions, MacStreams) EncryptionAlgorithmBase.Encrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Encrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, byte[], CryptoOptions, MacStreams, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.WriteOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.WriteOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ReadOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.ReadOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetEncryptionStream(Stream, Stream, MacStreams, CryptoOptions) EncryptionAlgorithmBase.GetEncryptionStreamAsync(Stream, Stream, MacStreams, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetDecryptionStream(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.GetDecryptionStreamAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ToString() EncryptionAlgorithmBase.PrintMembers(StringBuilder) EncryptionAlgorithmBase.GetHashCode() EncryptionAlgorithmBase.Equals(object) EncryptionAlgorithmBase.Equals(CryptoAlgorithmBase) EncryptionAlgorithmBase.Equals(EncryptionAlgorithmBase) EncryptionAlgorithmBase.<Clone>$() EncryptionAlgorithmBase.EqualityContract EncryptionAlgorithmBase.KeySize EncryptionAlgorithmBase.IvSize EncryptionAlgorithmBase.BlockSize EncryptionAlgorithmBase.RequireMacAuthentication EncryptionAlgorithmBase.DefaultOptions EncryptionAlgorithmBase.IsDenied EncryptionAlgorithmBase.State CryptoAlgorithmBase.EnsurePqcRequirement(in bool) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.DisplayName object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public abstract record BouncyCastleBlockCipherAlgorithmBase<T> : EncryptionAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<EncryptionAlgorithmBase>, IEquatable<BouncyCastleBlockCipherAlgorithmBase<T>> where T : BouncyCastleBlockCipherAlgorithmBase<T>, new() Type Parameters Name Description T Final type Constructors | Edit this page View Source BouncyCastleBlockCipherAlgorithmBase(string, int) Constructor Declaration protected BouncyCastleBlockCipherAlgorithmBase(string name, int value) Parameters Type Name Description string name Algorithm name int value Algorithm value Properties | Edit this page View Source Instance Instance Declaration public static T Instance { get; } Property Value Type Description T Methods | Edit this page View Source CreateCipher(bool, CryptoOptions) Create the cipher engine Declaration protected abstract IBlockCipher CreateCipher(bool forEncryption, CryptoOptions options) Parameters Type Name Description bool forEncryption For encryption? CryptoOptions options Options Returns Type Description IBlockCipher Block cipher | Edit this page View Source CreateParameters(byte[], CryptoOptions) Create cipher parameters Declaration protected virtual ICipherParameters CreateParameters(byte[] iv, CryptoOptions options) Parameters Type Name Description byte[] iv IV bytes CryptoOptions options Options Returns Type Description ICipherParameters Parameters | Edit this page View Source GetDecryptor(Stream, CryptoOptions) Get the decryptor Declaration protected override sealed ICryptoTransform GetDecryptor(Stream cipherData, CryptoOptions options) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options Returns Type Description ICryptoTransform Transform Overrides EncryptionAlgorithmBase.GetDecryptor(Stream, CryptoOptions) | Edit this page View Source GetDecryptorAsync(Stream, CryptoOptions, CancellationToken) Get the decryptor Declaration protected override sealed Task<ICryptoTransform> GetDecryptorAsync(Stream cipherData, CryptoOptions options, CancellationToken cancellationToken) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<ICryptoTransform> Transform Overrides EncryptionAlgorithmBase.GetDecryptorAsync(Stream, CryptoOptions, CancellationToken) | Edit this page View Source GetEncryptor(Stream, CryptoOptions) Get the encryptor (need to write the information (IV bytes etc.) which is required to create a decryptor) Declaration protected override sealed ICryptoTransform GetEncryptor(Stream cipherData, CryptoOptions options) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options Returns Type Description ICryptoTransform Transform Overrides EncryptionAlgorithmBase.GetEncryptor(Stream, CryptoOptions) | Edit this page View Source GetEncryptorAsync(Stream, CryptoOptions, CancellationToken) Get the encryptor (need to write the information (IV bytes etc.) which is required to create a decryptor) Declaration protected override sealed Task<ICryptoTransform> GetEncryptorAsync(Stream cipherData, CryptoOptions options, CancellationToken cancellationToken) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<ICryptoTransform> Transform Overrides EncryptionAlgorithmBase.GetEncryptorAsync(Stream, CryptoOptions, CancellationToken) | Edit this page View Source GetValidLengthKey(byte[], int) Get a key with a valid length Declaration protected override byte[] GetValidLengthKey(byte[] key, int len) Parameters Type Name Description byte[] key Key (won't be cleared) int len Required key length in bytes Returns Type Description byte[] Key with a valid length (if the given key had a valid length already, this is a copy; should be cleared) Overrides EncryptionAlgorithmBase.GetValidLengthKey(byte[], int) | Edit this page View Source Register() Register the algorithm to the CryptoConfig Declaration public static void Register() Implements wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.BouncyCastleBufferedCipherAlgorithmBase-1.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleBufferedCipherAlgorithmBase-1.html",
    "title": "Class BouncyCastleBufferedCipherAlgorithmBase<T> | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleBufferedCipherAlgorithmBase<T> Base class for a Bouncy Castle buffered block cipher Inheritance object CryptoAlgorithmBase EncryptionAlgorithmBase BouncyCastleCipherAlgorithmBase<T> BouncyCastleBufferedCipherAlgorithmBase<T> EncryptionBcAes256CbcAlgorithm EncryptionSerpent256CbcAlgorithm EncryptionTwofish256CbcAlgorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<EncryptionAlgorithmBase> IEquatable<BouncyCastleCipherAlgorithmBase<T>> IEquatable<BouncyCastleBufferedCipherAlgorithmBase<T>> Inherited Members BouncyCastleCipherAlgorithmBase<T>.Instance BouncyCastleCipherAlgorithmBase<T>.GetValidLengthKey(byte[], int) BouncyCastleCipherAlgorithmBase<T>.CreateParameters(byte[], CryptoOptions) BouncyCastleCipherAlgorithmBase<T>.CreateIvParameters(byte[], CryptoOptions) BouncyCastleCipherAlgorithmBase<T>.CreateKeyParameters(byte[], CryptoOptions, HashAlgorithmBase) BouncyCastleCipherAlgorithmBase<T>.Register() EncryptionAlgorithmBase._DefaultOptions EncryptionAlgorithmBase.EnsureDefaultOptions(CryptoOptions) EncryptionAlgorithmBase.EnsureAllowed(in bool) EncryptionAlgorithmBase.EnsureValidKeyLength(byte[]) EncryptionAlgorithmBase.IsKeyLengthValid(int) EncryptionAlgorithmBase.CreateIvBytes() EncryptionAlgorithmBase.ReadFixedIvBytes(Stream, CryptoOptions) EncryptionAlgorithmBase.ReadFixedIvBytesAsync(Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ReadVariableIvBytes(Stream, CryptoOptions) EncryptionAlgorithmBase.ReadVariableIvBytesAsync(Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.EncodeFlags(CryptoFlags, Span<byte>) EncryptionAlgorithmBase.DecodeFlags(ReadOnlySpan<byte>) EncryptionAlgorithmBase.Decrypt(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.Encrypt(Stream, Stream, byte[], CryptoOptions, MacStreams) EncryptionAlgorithmBase.Encrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Encrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, byte[], CryptoOptions, MacStreams, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.WriteOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.WriteOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ReadOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.ReadOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetEncryptionStream(Stream, Stream, MacStreams, CryptoOptions) EncryptionAlgorithmBase.GetEncryptionStreamAsync(Stream, Stream, MacStreams, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetDecryptionStream(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.GetDecryptionStreamAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ToString() EncryptionAlgorithmBase.PrintMembers(StringBuilder) EncryptionAlgorithmBase.GetHashCode() EncryptionAlgorithmBase.Equals(object) EncryptionAlgorithmBase.Equals(CryptoAlgorithmBase) EncryptionAlgorithmBase.Equals(EncryptionAlgorithmBase) EncryptionAlgorithmBase.<Clone>$() EncryptionAlgorithmBase.EqualityContract EncryptionAlgorithmBase.KeySize EncryptionAlgorithmBase.IvSize EncryptionAlgorithmBase.BlockSize EncryptionAlgorithmBase.RequireMacAuthentication EncryptionAlgorithmBase.DefaultOptions EncryptionAlgorithmBase.IsDenied EncryptionAlgorithmBase.State CryptoAlgorithmBase.EnsurePqcRequirement(in bool) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.DisplayName object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public abstract record BouncyCastleBufferedCipherAlgorithmBase<T> : BouncyCastleCipherAlgorithmBase<T>, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<EncryptionAlgorithmBase>, IEquatable<BouncyCastleCipherAlgorithmBase<T>>, IEquatable<BouncyCastleBufferedCipherAlgorithmBase<T>> where T : BouncyCastleBufferedCipherAlgorithmBase<T> Type Parameters Name Description T Final type Constructors | Edit this page View Source BouncyCastleBufferedCipherAlgorithmBase(string, int) Constructor Declaration protected BouncyCastleBufferedCipherAlgorithmBase(string name, int value) Parameters Type Name Description string name Algorithm name int value Algorithm value Methods | Edit this page View Source CreateCipher(bool, CryptoOptions) Create the cipher engine Declaration protected abstract IBufferedCipher CreateCipher(bool forEncryption, CryptoOptions options) Parameters Type Name Description bool forEncryption For encryption? CryptoOptions options Options Returns Type Description IBufferedCipher Block cipher | Edit this page View Source GetDecryptor(Stream, CryptoOptions) Get the decryptor Declaration protected override sealed ICryptoTransform GetDecryptor(Stream cipherData, CryptoOptions options) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options Returns Type Description ICryptoTransform Transform Overrides EncryptionAlgorithmBase.GetDecryptor(Stream, CryptoOptions) | Edit this page View Source GetDecryptorAsync(Stream, CryptoOptions, CancellationToken) Get the decryptor Declaration protected override sealed Task<ICryptoTransform> GetDecryptorAsync(Stream cipherData, CryptoOptions options, CancellationToken cancellationToken) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<ICryptoTransform> Transform Overrides EncryptionAlgorithmBase.GetDecryptorAsync(Stream, CryptoOptions, CancellationToken) | Edit this page View Source GetEncryptor(Stream, CryptoOptions) Get the encryptor (need to write the information (IV bytes etc.) which is required to create a decryptor) Declaration protected override sealed ICryptoTransform GetEncryptor(Stream cipherData, CryptoOptions options) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options Returns Type Description ICryptoTransform Transform Overrides EncryptionAlgorithmBase.GetEncryptor(Stream, CryptoOptions) | Edit this page View Source GetEncryptorAsync(Stream, CryptoOptions, CancellationToken) Get the encryptor (need to write the information (IV bytes etc.) which is required to create a decryptor) Declaration protected override sealed Task<ICryptoTransform> GetEncryptorAsync(Stream cipherData, CryptoOptions options, CancellationToken cancellationToken) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<ICryptoTransform> Transform Overrides EncryptionAlgorithmBase.GetEncryptorAsync(Stream, CryptoOptions, CancellationToken) Implements wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.BouncyCastleCipherAlgorithmBase-1.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleCipherAlgorithmBase-1.html",
    "title": "Class BouncyCastleCipherAlgorithmBase<T> | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleCipherAlgorithmBase<T> Base class for a Bouncy Castle cipher Inheritance object CryptoAlgorithmBase EncryptionAlgorithmBase BouncyCastleCipherAlgorithmBase<T> BouncyCastleAeadCipherAlgorithmBase<T> BouncyCastleBufferedCipherAlgorithmBase<T> Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<EncryptionAlgorithmBase> IEquatable<BouncyCastleCipherAlgorithmBase<T>> Inherited Members EncryptionAlgorithmBase._DefaultOptions EncryptionAlgorithmBase.GetEncryptor(Stream, CryptoOptions) EncryptionAlgorithmBase.GetEncryptorAsync(Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetDecryptor(Stream, CryptoOptions) EncryptionAlgorithmBase.GetDecryptorAsync(Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.EnsureDefaultOptions(CryptoOptions) EncryptionAlgorithmBase.EnsureAllowed(in bool) EncryptionAlgorithmBase.EnsureValidKeyLength(byte[]) EncryptionAlgorithmBase.IsKeyLengthValid(int) EncryptionAlgorithmBase.CreateIvBytes() EncryptionAlgorithmBase.ReadFixedIvBytes(Stream, CryptoOptions) EncryptionAlgorithmBase.ReadFixedIvBytesAsync(Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ReadVariableIvBytes(Stream, CryptoOptions) EncryptionAlgorithmBase.ReadVariableIvBytesAsync(Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.EncodeFlags(CryptoFlags, Span<byte>) EncryptionAlgorithmBase.DecodeFlags(ReadOnlySpan<byte>) EncryptionAlgorithmBase.Decrypt(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.Encrypt(Stream, Stream, byte[], CryptoOptions, MacStreams) EncryptionAlgorithmBase.Encrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Encrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, byte[], CryptoOptions, MacStreams, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.WriteOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.WriteOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ReadOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.ReadOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetEncryptionStream(Stream, Stream, MacStreams, CryptoOptions) EncryptionAlgorithmBase.GetEncryptionStreamAsync(Stream, Stream, MacStreams, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetDecryptionStream(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.GetDecryptionStreamAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ToString() EncryptionAlgorithmBase.PrintMembers(StringBuilder) EncryptionAlgorithmBase.GetHashCode() EncryptionAlgorithmBase.Equals(object) EncryptionAlgorithmBase.Equals(CryptoAlgorithmBase) EncryptionAlgorithmBase.Equals(EncryptionAlgorithmBase) EncryptionAlgorithmBase.<Clone>$() EncryptionAlgorithmBase.EqualityContract EncryptionAlgorithmBase.KeySize EncryptionAlgorithmBase.IvSize EncryptionAlgorithmBase.BlockSize EncryptionAlgorithmBase.RequireMacAuthentication EncryptionAlgorithmBase.DefaultOptions EncryptionAlgorithmBase.IsDenied EncryptionAlgorithmBase.State CryptoAlgorithmBase.EnsurePqcRequirement(in bool) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.DisplayName object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public abstract record BouncyCastleCipherAlgorithmBase<T> : EncryptionAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<EncryptionAlgorithmBase>, IEquatable<BouncyCastleCipherAlgorithmBase<T>> where T : BouncyCastleCipherAlgorithmBase<T> Type Parameters Name Description T Final type Constructors | Edit this page View Source BouncyCastleCipherAlgorithmBase(string, int) Constructor Declaration protected BouncyCastleCipherAlgorithmBase(string name, int value) Parameters Type Name Description string name Algorithm name int value Algorithm value Properties | Edit this page View Source Instance Instance Declaration public static T Instance { get; } Property Value Type Description T Methods | Edit this page View Source CreateIvParameters(byte[], CryptoOptions) Create cipher parameters Declaration protected virtual ParametersWithIV CreateIvParameters(byte[] iv, CryptoOptions options) Parameters Type Name Description byte[] iv IV bytes CryptoOptions options Options Returns Type Description ParametersWithIV Parameters | Edit this page View Source CreateKeyParameters(byte[], CryptoOptions, HashAlgorithmBase) Create cipher parameters Declaration protected virtual KeyParameter CreateKeyParameters(byte[] iv, CryptoOptions options, HashAlgorithmBase hashAlgo) Parameters Type Name Description byte[] iv IV bytes CryptoOptions options Options HashAlgorithmBase hashAlgo Hash algorithm Returns Type Description KeyParameter Parameters | Edit this page View Source CreateParameters(byte[], CryptoOptions) Create cipher parameters Declaration protected virtual ICipherParameters CreateParameters(byte[] iv, CryptoOptions options) Parameters Type Name Description byte[] iv IV bytes CryptoOptions options Options Returns Type Description ICipherParameters Parameters | Edit this page View Source GetValidLengthKey(byte[], int) Get a key with a valid length Declaration protected override byte[] GetValidLengthKey(byte[] key, int len) Parameters Type Name Description byte[] key Key (won't be cleared) int len Required key length in bytes Returns Type Description byte[] Key with a valid length (if the given key had a valid length already, this is a copy; should be cleared) Overrides EncryptionAlgorithmBase.GetValidLengthKey(byte[], int) | Edit this page View Source Register() Register the algorithm to the CryptoConfig Declaration public static void Register() Implements wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.BouncyCastleCryptoTransform.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleCryptoTransform.html",
    "title": "Class BouncyCastleCryptoTransform | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleCryptoTransform Bouncy Castle crypto transform Inheritance object BouncyCastleCryptoTransform Implements ICryptoTransform IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed class BouncyCastleCryptoTransform : ICryptoTransform, IDisposable Constructors | Edit this page View Source BouncyCastleCryptoTransform(IBlockCipher) Constructor Declaration public BouncyCastleCryptoTransform(IBlockCipher cipher) Parameters Type Name Description IBlockCipher cipher Cipher | Edit this page View Source BouncyCastleCryptoTransform(IBufferedCipher) Constructor Declaration public BouncyCastleCryptoTransform(IBufferedCipher cipher) Parameters Type Name Description IBufferedCipher cipher Cipher | Edit this page View Source BouncyCastleCryptoTransform(IDigest) Constructor Declaration public BouncyCastleCryptoTransform(IDigest digest) Parameters Type Name Description IDigest digest Digest | Edit this page View Source BouncyCastleCryptoTransform(IMac) Constructor Declaration public BouncyCastleCryptoTransform(IMac mac) Parameters Type Name Description IMac mac MAC | Edit this page View Source BouncyCastleCryptoTransform(IStreamCipher) Constructor Declaration public BouncyCastleCryptoTransform(IStreamCipher cipher) Parameters Type Name Description IStreamCipher cipher Cipher Fields | Edit this page View Source BlockCipher Block cipher Declaration public readonly IBlockCipher? BlockCipher Field Value Type Description IBlockCipher | Edit this page View Source BufferedCipher Stream cipher Declaration public readonly IBufferedCipher? BufferedCipher Field Value Type Description IBufferedCipher | Edit this page View Source Digest Digest Declaration public readonly IDigest? Digest Field Value Type Description IDigest | Edit this page View Source Mac MAC Declaration public readonly IMac? Mac Field Value Type Description IMac | Edit this page View Source StreamCipher Stream cipher Declaration public readonly IStreamCipher? StreamCipher Field Value Type Description IStreamCipher Properties | Edit this page View Source CanReuseTransform Gets a value indicating whether the current transform can be reused. Declaration public bool CanReuseTransform { get; } Property Value Type Description bool true if the current transform can be reused; otherwise, false. | Edit this page View Source CanTransformMultipleBlocks Gets a value indicating whether multiple blocks can be transformed. Declaration public bool CanTransformMultipleBlocks { get; } Property Value Type Description bool true if multiple blocks can be transformed; otherwise, false. | Edit this page View Source InputBlockSize Gets the input block size. Declaration public int InputBlockSize { get; } Property Value Type Description int The size of the input data blocks in bytes. | Edit this page View Source OutputBlockSize Gets the output block size. Declaration public int OutputBlockSize { get; } Property Value Type Description int The size of the output data blocks in bytes. Methods | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Edit this page View Source TransformBlock(byte[], int, int, byte[], int) Transforms the specified region of the input byte array and copies the resulting transform to the specified region of the output byte array. Declaration public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) Parameters Type Name Description byte[] inputBuffer The input for which to compute the transform. int inputOffset The offset into the input byte array from which to begin using data. int inputCount The number of bytes in the input byte array to use as data. byte[] outputBuffer The output to which to write the transform. int outputOffset The offset into the output byte array from which to begin writing data. Returns Type Description int The number of bytes written. | Edit this page View Source TransformFinalBlock(byte[], int, int) Transforms the specified region of the specified byte array. Declaration public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) Parameters Type Name Description byte[] inputBuffer The input for which to compute the transform. int inputOffset The offset into the byte array from which to begin using data. int inputCount The number of bytes in the byte array to use as data. Returns Type Description byte[] The computed transform. Implements ICryptoTransform IDisposable"
  },
  "api/wan24.Crypto.BC.BouncyCastleHashAlgorithm.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleHashAlgorithm.html",
    "title": "Class BouncyCastleHashAlgorithm | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleHashAlgorithm Bouncy Castle hash algorithm Inheritance object HashAlgorithm BouncyCastleHashAlgorithm HashBcSha3_256Algorithm.SHA3_256 HashBcSha3_384Algorithm.SHA3_384 HashBcSha3_512Algorithm.SHA3_512 Implements ICryptoTransform IDisposable Inherited Members HashAlgorithm.HashSizeValue HashAlgorithm.HashValue HashAlgorithm.State HashAlgorithm.Clear() HashAlgorithm.ComputeHash(byte[]) HashAlgorithm.ComputeHash(byte[], int, int) HashAlgorithm.ComputeHash(Stream) HashAlgorithm.ComputeHashAsync(Stream, CancellationToken) HashAlgorithm.Create() HashAlgorithm.Create(string) HashAlgorithm.Dispose() HashAlgorithm.TransformBlock(byte[], int, int, byte[], int) HashAlgorithm.TransformFinalBlock(byte[], int, int) HashAlgorithm.TryComputeHash(ReadOnlySpan<byte>, Span<byte>, out int) HashAlgorithm.CanReuseTransform HashAlgorithm.CanTransformMultipleBlocks HashAlgorithm.Hash HashAlgorithm.InputBlockSize HashAlgorithm.OutputBlockSize object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public class BouncyCastleHashAlgorithm : HashAlgorithm, ICryptoTransform, IDisposable Remarks Constructor Constructors | Edit this page View Source BouncyCastleHashAlgorithm(IDigest) Bouncy Castle hash algorithm Declaration public BouncyCastleHashAlgorithm(IDigest digest) Parameters Type Name Description IDigest digest Digest Remarks Constructor Fields | Edit this page View Source Digest Digest Declaration protected readonly IDigest Digest Field Value Type Description IDigest Properties | Edit this page View Source HashSize Gets the size, in bits, of the computed hash code. Declaration public override int HashSize { get; } Property Value Type Description int The size, in bits, of the computed hash code. Overrides HashAlgorithm.HashSize Methods | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the HashAlgorithm and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides HashAlgorithm.Dispose(bool) | Edit this page View Source HashCore(byte[], int, int) When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash. Declaration protected override void HashCore(byte[] array, int ibStart, int cbSize) Parameters Type Name Description byte[] array The input to compute the hash code for. int ibStart The offset into the byte array from which to begin using data. int cbSize The number of bytes in the byte array to use as data. Overrides HashAlgorithm.HashCore(byte[], int, int) | Edit this page View Source HashCore(ReadOnlySpan<byte>) Routes data written to the object into the hash algorithm for computing the hash. Declaration protected override void HashCore(ReadOnlySpan<byte> source) Parameters Type Name Description ReadOnlySpan<byte> source The input to compute the hash code for. Overrides HashAlgorithm.HashCore(ReadOnlySpan<byte>) | Edit this page View Source HashFinal() When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic hash algorithm. Declaration protected override byte[] HashFinal() Returns Type Description byte[] The computed hash code. Overrides HashAlgorithm.HashFinal() | Edit this page View Source Initialize() Resets the hash algorithm to its initial state. Declaration public override void Initialize() Overrides HashAlgorithm.Initialize() | Edit this page View Source TryHashFinal(Span<byte>, out int) Attempts to finalize the hash computation after the last data is processed by the hash algorithm. Declaration protected override bool TryHashFinal(Span<byte> destination, out int bytesWritten) Parameters Type Name Description Span<byte> destination The buffer to receive the hash value. int bytesWritten When this method returns, the total number of bytes written into destination. This parameter is treated as uninitialized. Returns Type Description bool true if destination is long enough to receive the hash value; otherwise, false. Overrides HashAlgorithm.TryHashFinal(Span<byte>, out int) Implements ICryptoTransform IDisposable"
  },
  "api/wan24.Crypto.BC.BouncyCastleHashAlgorithmBase-1.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleHashAlgorithmBase-1.html",
    "title": "Class BouncyCastleHashAlgorithmBase<T> | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleHashAlgorithmBase<T> Base class for a Bouncy Castle hash algorithm Inheritance object CryptoAlgorithmBase HashAlgorithmBase BouncyCastleHashAlgorithmBase<T> HashBcSha3_256Algorithm HashBcSha3_384Algorithm HashBcSha3_512Algorithm HashBcShake128Algorithm HashBcShake256Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<HashAlgorithmBase> IEquatable<BouncyCastleHashAlgorithmBase<T>> Inherited Members HashAlgorithmBase._DefaultOptions HashAlgorithmBase.EnsureDefaultOptions(CryptoOptions) HashAlgorithmBase.GetHashAlgorithm(CryptoOptions) HashAlgorithmBase.GetHashStream(Stream, bool, CryptoOptions) HashAlgorithmBase.Hash(byte[], CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, Span<byte>, CryptoOptions) HashAlgorithmBase.Hash(Stream, CryptoOptions) HashAlgorithmBase.HashAsync(Stream, CryptoOptions, CancellationToken) HashAlgorithmBase.GetHashAlgorithmInt(CryptoOptions) HashAlgorithmBase.ToString() HashAlgorithmBase.PrintMembers(StringBuilder) HashAlgorithmBase.GetHashCode() HashAlgorithmBase.Equals(object) HashAlgorithmBase.Equals(CryptoAlgorithmBase) HashAlgorithmBase.Equals(HashAlgorithmBase) HashAlgorithmBase.<Clone>$() HashAlgorithmBase.EqualityContract HashAlgorithmBase.DefaultOptions HashAlgorithmBase.HashLength HashAlgorithmBase.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.EnsurePqcRequirement(in bool) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.DisplayName object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public abstract record BouncyCastleHashAlgorithmBase<T> : HashAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<HashAlgorithmBase>, IEquatable<BouncyCastleHashAlgorithmBase<T>> where T : BouncyCastleHashAlgorithmBase<T> Type Parameters Name Description T Final type Constructors | Edit this page View Source BouncyCastleHashAlgorithmBase(string, int) Constructor Declaration protected BouncyCastleHashAlgorithmBase(string name, int value) Parameters Type Name Description string name Algorithm name int value Algorithm value Properties | Edit this page View Source Instance Instance Declaration public static T Instance { get; } Property Value Type Description T Methods | Edit this page View Source Register() Register the algorithm to the CryptoConfig Declaration public static void Register() Implements wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.BouncyCastleHmacAlgorithm.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleHmacAlgorithm.html",
    "title": "Class BouncyCastleHmacAlgorithm | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleHmacAlgorithm Bouncy Castle HMAC algorithm Inheritance object HashAlgorithm KeyedHashAlgorithm BouncyCastleHmacAlgorithm MacBcHmacSha3_256Algorithm.HMACSHA3_256 MacBcHmacSha3_384Algorithm.HMACSHA3_384 MacBcHmacSha3_512Algorithm.HMACSHA3_512 Implements ICryptoTransform IDisposable Inherited Members KeyedHashAlgorithm.KeyValue KeyedHashAlgorithm.Create() KeyedHashAlgorithm.Create(string) KeyedHashAlgorithm.Key HashAlgorithm.HashSizeValue HashAlgorithm.HashValue HashAlgorithm.State HashAlgorithm.Clear() HashAlgorithm.ComputeHash(byte[]) HashAlgorithm.ComputeHash(byte[], int, int) HashAlgorithm.ComputeHash(Stream) HashAlgorithm.ComputeHashAsync(Stream, CancellationToken) HashAlgorithm.Dispose() HashAlgorithm.TransformBlock(byte[], int, int, byte[], int) HashAlgorithm.TransformFinalBlock(byte[], int, int) HashAlgorithm.TryComputeHash(ReadOnlySpan<byte>, Span<byte>, out int) HashAlgorithm.CanReuseTransform HashAlgorithm.CanTransformMultipleBlocks HashAlgorithm.Hash HashAlgorithm.HashSize HashAlgorithm.InputBlockSize HashAlgorithm.OutputBlockSize object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public class BouncyCastleHmacAlgorithm : KeyedHashAlgorithm, ICryptoTransform, IDisposable Remarks Constructor Constructors | Edit this page View Source BouncyCastleHmacAlgorithm(IMac) Bouncy Castle HMAC algorithm Declaration public BouncyCastleHmacAlgorithm(IMac mac) Parameters Type Name Description IMac mac MAC Remarks Constructor Fields | Edit this page View Source Mac MAC Declaration protected readonly IMac Mac Field Value Type Description IMac Methods | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the KeyedHashAlgorithm and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides KeyedHashAlgorithm.Dispose(bool) | Edit this page View Source HashCore(byte[], int, int) When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash. Declaration protected override void HashCore(byte[] array, int ibStart, int cbSize) Parameters Type Name Description byte[] array The input to compute the hash code for. int ibStart The offset into the byte array from which to begin using data. int cbSize The number of bytes in the byte array to use as data. Overrides HashAlgorithm.HashCore(byte[], int, int) | Edit this page View Source HashCore(ReadOnlySpan<byte>) Routes data written to the object into the hash algorithm for computing the hash. Declaration protected override void HashCore(ReadOnlySpan<byte> source) Parameters Type Name Description ReadOnlySpan<byte> source The input to compute the hash code for. Overrides HashAlgorithm.HashCore(ReadOnlySpan<byte>) | Edit this page View Source HashFinal() When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic hash algorithm. Declaration protected override byte[] HashFinal() Returns Type Description byte[] The computed hash code. Overrides HashAlgorithm.HashFinal() | Edit this page View Source Initialize() Resets the hash algorithm to its initial state. Declaration public override void Initialize() Overrides HashAlgorithm.Initialize() | Edit this page View Source TryHashFinal(Span<byte>, out int) Attempts to finalize the hash computation after the last data is processed by the hash algorithm. Declaration protected override bool TryHashFinal(Span<byte> destination, out int bytesWritten) Parameters Type Name Description Span<byte> destination The buffer to receive the hash value. int bytesWritten When this method returns, the total number of bytes written into destination. This parameter is treated as uninitialized. Returns Type Description bool true if destination is long enough to receive the hash value; otherwise, false. Overrides HashAlgorithm.TryHashFinal(Span<byte>, out int) Implements ICryptoTransform IDisposable"
  },
  "api/wan24.Crypto.BC.BouncyCastleHmacAlgorithmBase-1.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleHmacAlgorithmBase-1.html",
    "title": "Class BouncyCastleHmacAlgorithmBase<T> | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleHmacAlgorithmBase<T> Base class for a Bouncy Castle MAC algorithm Inheritance object CryptoAlgorithmBase MacAlgorithmBase BouncyCastleHmacAlgorithmBase<T> MacBcHmacSha3_256Algorithm MacBcHmacSha3_384Algorithm MacBcHmacSha3_512Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<MacAlgorithmBase> IEquatable<BouncyCastleHmacAlgorithmBase<T>> Inherited Members MacAlgorithmBase._DefaultOptions MacAlgorithmBase.EnsureDefaultOptions(CryptoOptions) MacAlgorithmBase.GetMacAlgorithm(byte[], CryptoOptions) MacAlgorithmBase.GetMacStream(byte[], Stream, bool, CryptoOptions) MacAlgorithmBase.Mac(ReadOnlySpan<byte>, byte[], CryptoOptions) MacAlgorithmBase.Mac(ReadOnlySpan<byte>, byte[], Span<byte>, CryptoOptions) MacAlgorithmBase.Mac(Stream, byte[], CryptoOptions) MacAlgorithmBase.MacAsync(Stream, byte[], CryptoOptions, CancellationToken) MacAlgorithmBase.GetMacAlgorithmInt(byte[], CryptoOptions) MacAlgorithmBase.ToString() MacAlgorithmBase.PrintMembers(StringBuilder) MacAlgorithmBase.GetHashCode() MacAlgorithmBase.Equals(object) MacAlgorithmBase.Equals(CryptoAlgorithmBase) MacAlgorithmBase.Equals(MacAlgorithmBase) MacAlgorithmBase.<Clone>$() MacAlgorithmBase.EqualityContract MacAlgorithmBase.DefaultOptions MacAlgorithmBase.MacLength MacAlgorithmBase.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.EnsurePqcRequirement(in bool) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.DisplayName object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public abstract record BouncyCastleHmacAlgorithmBase<T> : MacAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<MacAlgorithmBase>, IEquatable<BouncyCastleHmacAlgorithmBase<T>> where T : BouncyCastleHmacAlgorithmBase<T> Type Parameters Name Description T Final type Constructors | Edit this page View Source BouncyCastleHmacAlgorithmBase(string, int) Constructor Declaration protected BouncyCastleHmacAlgorithmBase(string name, int value) Parameters Type Name Description string name Algorithm name int value Algorithm value Properties | Edit this page View Source Instance Instance Declaration public static T Instance { get; } Property Value Type Description T Methods | Edit this page View Source Register() Register the algorithm to the CryptoConfig Declaration public static void Register() Implements wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.BouncyCastleRandomGenerator.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleRandomGenerator.html",
    "title": "Class BouncyCastleRandomGenerator | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleRandomGenerator Random number generator for Bouncy Castle, which adopts wan24.Crypto.RND Inheritance object BouncyCastleRandomGenerator Implements IBouncyCastleRng IRandomGenerator ISeedableRng IRng ISeedConsumer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed class BouncyCastleRandomGenerator : IBouncyCastleRng, IRandomGenerator, ISeedableRng, IRng, ISeedConsumer Constructors | Edit this page View Source BouncyCastleRandomGenerator() Constructor Declaration public BouncyCastleRandomGenerator() Properties | Edit this page View Source Instance Instance factory Declaration public static Func<IRandomGenerator> Instance { get; set; } Property Value Type Description Func<IRandomGenerator> Methods | Edit this page View Source AddSeed(ReadOnlySpan<byte>) Add seed to the RNG Declaration public void AddSeed(ReadOnlySpan<byte> seed) Parameters Type Name Description ReadOnlySpan<byte> seed Seed | Edit this page View Source AddSeedAsync(ReadOnlyMemory<byte>, CancellationToken) Add seed to the RNG Declaration public Task AddSeedAsync(ReadOnlyMemory<byte> seed, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> seed Seed CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source AddSeedMaterial(byte[]) Add more seed material to the generator. Declaration public void AddSeedMaterial(byte[] seed) Parameters Type Name Description byte[] seed A byte array to be mixed into the generator's state. | Edit this page View Source AddSeedMaterial(long) Add more seed material to the generator. Declaration public void AddSeedMaterial(long seed) Parameters Type Name Description long seed A long value to be mixed into the generator's state. | Edit this page View Source AddSeedMaterial(ReadOnlySpan<byte>) Declaration public void AddSeedMaterial(ReadOnlySpan<byte> seed) Parameters Type Name Description ReadOnlySpan<byte> seed | Edit this page View Source FillBytes(in Span<byte>) Fill random bytes Declaration public Span<byte> FillBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description Span<byte> Random bytes | Edit this page View Source FillBytesAsync(Memory<byte>, CancellationToken) Fill random bytes Declaration public Task<Memory<byte>> FillBytesAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description Task<Memory<byte>> Random bytes | Edit this page View Source GetBytes(in int) Get random bytes Declaration public byte[] GetBytes(in int count) Parameters Type Name Description int count Count Returns Type Description byte[] Random bytes | Edit this page View Source GetBytesAsync(int, CancellationToken) Get random bytes Declaration public Task<byte[]> GetBytesAsync(int count, CancellationToken cancellationToken = default) Parameters Type Name Description int count Count CancellationToken cancellationToken Cancellation token Returns Type Description Task<byte[]> Random bytes | Edit this page View Source NextBytes(byte[]) Fill byte array with random values. Declaration public void NextBytes(byte[] bytes) Parameters Type Name Description byte[] bytes Array to be filled. | Edit this page View Source NextBytes(byte[], int, int) Fill byte array with random values. Declaration public void NextBytes(byte[] bytes, int start, int len) Parameters Type Name Description byte[] bytes Array to receive bytes. int start Index to start filling at. int len Length of segment to fill. | Edit this page View Source NextBytes(Span<byte>) Declaration public void NextBytes(Span<byte> bytes) Parameters Type Name Description Span<byte> bytes Implements IBouncyCastleRng Org.BouncyCastle.Crypto.Prng.IRandomGenerator wan24.Crypto.ISeedableRng wan24.Crypto.IRng wan24.Crypto.ISeedConsumer"
  },
  "api/wan24.Crypto.BC.BouncyCastleRngWrapper.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleRngWrapper.html",
    "title": "Class BouncyCastleRngWrapper | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleRngWrapper Bouncy Castle RNG wrapper for wan24-Crypto Inheritance object BouncyCastleRngWrapper Implements IBouncyCastleRng IRandomGenerator ISeedableRng IRng ISeedConsumer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed class BouncyCastleRngWrapper : IBouncyCastleRng, IRandomGenerator, ISeedableRng, IRng, ISeedConsumer Remarks Constructor Constructors | Edit this page View Source BouncyCastleRngWrapper(in IRandomGenerator) Bouncy Castle RNG wrapper for wan24-Crypto Declaration public BouncyCastleRngWrapper(in IRandomGenerator rng) Parameters Type Name Description IRandomGenerator rng RNG Remarks Constructor Properties | Edit this page View Source RNG Wrapped RNG Declaration public IRandomGenerator RNG { get; } Property Value Type Description IRandomGenerator Methods | Edit this page View Source AddSeed(ReadOnlySpan<byte>) Add seed to the RNG Declaration public void AddSeed(ReadOnlySpan<byte> seed) Parameters Type Name Description ReadOnlySpan<byte> seed Seed | Edit this page View Source AddSeedAsync(ReadOnlyMemory<byte>, CancellationToken) Add seed to the RNG Declaration public Task AddSeedAsync(ReadOnlyMemory<byte> seed, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> seed Seed CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source AddSeedMaterial(byte[]) Add more seed material to the generator. Declaration public void AddSeedMaterial(byte[] seed) Parameters Type Name Description byte[] seed A byte array to be mixed into the generator's state. | Edit this page View Source AddSeedMaterial(long) Add more seed material to the generator. Declaration public void AddSeedMaterial(long seed) Parameters Type Name Description long seed A long value to be mixed into the generator's state. | Edit this page View Source AddSeedMaterial(ReadOnlySpan<byte>) Declaration public void AddSeedMaterial(ReadOnlySpan<byte> seed) Parameters Type Name Description ReadOnlySpan<byte> seed | Edit this page View Source FillBytes(in Span<byte>) Fill random bytes Declaration public Span<byte> FillBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description Span<byte> Random bytes | Edit this page View Source FillBytesAsync(Memory<byte>, CancellationToken) Fill random bytes Declaration public Task<Memory<byte>> FillBytesAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description Task<Memory<byte>> Random bytes | Edit this page View Source GetBytes(in int) Get random bytes Declaration public byte[] GetBytes(in int count) Parameters Type Name Description int count Count Returns Type Description byte[] Random bytes | Edit this page View Source GetBytesAsync(int, CancellationToken) Get random bytes Declaration public Task<byte[]> GetBytesAsync(int count, CancellationToken cancellationToken = default) Parameters Type Name Description int count Count CancellationToken cancellationToken Cancellation token Returns Type Description Task<byte[]> Random bytes | Edit this page View Source NextBytes(byte[]) Fill byte array with random values. Declaration public void NextBytes(byte[] bytes) Parameters Type Name Description byte[] bytes Array to be filled. | Edit this page View Source NextBytes(byte[], int, int) Fill byte array with random values. Declaration public void NextBytes(byte[] bytes, int start, int len) Parameters Type Name Description byte[] bytes Array to receive bytes. int start Index to start filling at. int len Length of segment to fill. | Edit this page View Source NextBytes(Span<byte>) Declaration public void NextBytes(Span<byte> bytes) Parameters Type Name Description Span<byte> bytes Implements IBouncyCastleRng Org.BouncyCastle.Crypto.Prng.IRandomGenerator wan24.Crypto.ISeedableRng wan24.Crypto.IRng wan24.Crypto.ISeedConsumer"
  },
  "api/wan24.Crypto.BC.BouncyCastleStreamCipherAlgorithmBase-1.html": {
    "href": "api/wan24.Crypto.BC.BouncyCastleStreamCipherAlgorithmBase-1.html",
    "title": "Class BouncyCastleStreamCipherAlgorithmBase<T> | wan24-Crypto-BC",
    "keywords": "Class BouncyCastleStreamCipherAlgorithmBase<T> Base class for a Bouncy Castle stream cipher Inheritance object CryptoAlgorithmBase EncryptionAlgorithmBase BouncyCastleStreamCipherAlgorithmBase<T> EncryptionChaCha20Algorithm EncryptionXSalsa20Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<EncryptionAlgorithmBase> IEquatable<BouncyCastleStreamCipherAlgorithmBase<T>> Inherited Members EncryptionAlgorithmBase._DefaultOptions EncryptionAlgorithmBase.EnsureDefaultOptions(CryptoOptions) EncryptionAlgorithmBase.EnsureAllowed(in bool) EncryptionAlgorithmBase.EnsureValidKeyLength(byte[]) EncryptionAlgorithmBase.IsKeyLengthValid(int) EncryptionAlgorithmBase.CreateIvBytes() EncryptionAlgorithmBase.GetValidLengthKey(byte[], int) EncryptionAlgorithmBase.ReadFixedIvBytes(Stream, CryptoOptions) EncryptionAlgorithmBase.ReadFixedIvBytesAsync(Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ReadVariableIvBytes(Stream, CryptoOptions) EncryptionAlgorithmBase.ReadVariableIvBytesAsync(Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.EncodeFlags(CryptoFlags, Span<byte>) EncryptionAlgorithmBase.DecodeFlags(ReadOnlySpan<byte>) EncryptionAlgorithmBase.Decrypt(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.Encrypt(Stream, Stream, byte[], CryptoOptions, MacStreams) EncryptionAlgorithmBase.Encrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Encrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, byte[], CryptoOptions, MacStreams, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.WriteOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.WriteOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ReadOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.ReadOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetEncryptionStream(Stream, Stream, MacStreams, CryptoOptions) EncryptionAlgorithmBase.GetEncryptionStreamAsync(Stream, Stream, MacStreams, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetDecryptionStream(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.GetDecryptionStreamAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ToString() EncryptionAlgorithmBase.PrintMembers(StringBuilder) EncryptionAlgorithmBase.GetHashCode() EncryptionAlgorithmBase.Equals(object) EncryptionAlgorithmBase.Equals(CryptoAlgorithmBase) EncryptionAlgorithmBase.Equals(EncryptionAlgorithmBase) EncryptionAlgorithmBase.<Clone>$() EncryptionAlgorithmBase.EqualityContract EncryptionAlgorithmBase.KeySize EncryptionAlgorithmBase.IvSize EncryptionAlgorithmBase.BlockSize EncryptionAlgorithmBase.RequireMacAuthentication EncryptionAlgorithmBase.DefaultOptions EncryptionAlgorithmBase.IsDenied EncryptionAlgorithmBase.State CryptoAlgorithmBase.EnsurePqcRequirement(in bool) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.IsPostQuantum CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported CryptoAlgorithmBase.DisplayName object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public abstract record BouncyCastleStreamCipherAlgorithmBase<T> : EncryptionAlgorithmBase, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<EncryptionAlgorithmBase>, IEquatable<BouncyCastleStreamCipherAlgorithmBase<T>> where T : BouncyCastleStreamCipherAlgorithmBase<T> Type Parameters Name Description T Final type Constructors | Edit this page View Source BouncyCastleStreamCipherAlgorithmBase(string, int) Constructor Declaration protected BouncyCastleStreamCipherAlgorithmBase(string name, int value) Parameters Type Name Description string name Algorithm name int value Algorithm value Properties | Edit this page View Source Instance Instance Declaration public static T Instance { get; } Property Value Type Description T Methods | Edit this page View Source CreateCipher(bool, CryptoOptions) Create the cipher engine Declaration protected abstract IStreamCipher CreateCipher(bool forEncryption, CryptoOptions options) Parameters Type Name Description bool forEncryption For encryption? CryptoOptions options Options Returns Type Description IStreamCipher Stream cipher | Edit this page View Source CreateParameters(byte[], CryptoOptions) Create cipher parameters Declaration protected virtual ICipherParameters CreateParameters(byte[] iv, CryptoOptions options) Parameters Type Name Description byte[] iv IV bytes CryptoOptions options Options Returns Type Description ICipherParameters Parameters | Edit this page View Source GetDecryptor(Stream, CryptoOptions) Get the decryptor Declaration protected override sealed ICryptoTransform GetDecryptor(Stream cipherData, CryptoOptions options) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options Returns Type Description ICryptoTransform Transform Overrides EncryptionAlgorithmBase.GetDecryptor(Stream, CryptoOptions) | Edit this page View Source GetDecryptorAsync(Stream, CryptoOptions, CancellationToken) Get the decryptor Declaration protected override sealed Task<ICryptoTransform> GetDecryptorAsync(Stream cipherData, CryptoOptions options, CancellationToken cancellationToken) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<ICryptoTransform> Transform Overrides EncryptionAlgorithmBase.GetDecryptorAsync(Stream, CryptoOptions, CancellationToken) | Edit this page View Source GetEncryptor(Stream, CryptoOptions) Get the encryptor (need to write the information (IV bytes etc.) which is required to create a decryptor) Declaration protected override sealed ICryptoTransform GetEncryptor(Stream cipherData, CryptoOptions options) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options Returns Type Description ICryptoTransform Transform Overrides EncryptionAlgorithmBase.GetEncryptor(Stream, CryptoOptions) | Edit this page View Source GetEncryptorAsync(Stream, CryptoOptions, CancellationToken) Get the encryptor (need to write the information (IV bytes etc.) which is required to create a decryptor) Declaration protected override sealed Task<ICryptoTransform> GetEncryptorAsync(Stream cipherData, CryptoOptions options, CancellationToken cancellationToken) Parameters Type Name Description Stream cipherData Cipher data CryptoOptions options Options CancellationToken cancellationToken Cancellation token Returns Type Description Task<ICryptoTransform> Transform Overrides EncryptionAlgorithmBase.GetEncryptorAsync(Stream, CryptoOptions, CancellationToken) | Edit this page View Source Register() Register the algorithm to the CryptoConfig Declaration public static void Register() Implements wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.ChaCha20Rng.html": {
    "href": "api/wan24.Crypto.BC.ChaCha20Rng.html",
    "title": "Class ChaCha20Rng | wan24-Crypto-BC",
    "keywords": "Class ChaCha20Rng ChaCha20 CSRNG Inheritance object DisposableBase DisposableRngBase DisposableSeedableRngBase StreamCipherRng ChaCha20Rng Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IBouncyCastleRng IRandomGenerator ISeedableRng IRng ISeedConsumer Inherited Members StreamCipherRng.Algorithm StreamCipherRng.AddSeed(ReadOnlySpan<byte>) StreamCipherRng.AddSeedAsync(ReadOnlyMemory<byte>, CancellationToken) StreamCipherRng.AddSeedMaterial(byte[]) StreamCipherRng.AddSeedMaterial(ReadOnlySpan<byte>) StreamCipherRng.AddSeedMaterial(long) StreamCipherRng.FillBytes(in Span<byte>) StreamCipherRng.FillBytesAsync(Memory<byte>, CancellationToken) StreamCipherRng.NextBytes(byte[]) StreamCipherRng.NextBytes(byte[], int, int) StreamCipherRng.NextBytes(Span<byte>) DisposableRngBase.GetBytes(in int) DisposableRngBase.GetBytesAsync(int, CancellationToken) DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed class ChaCha20Rng : StreamCipherRng, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IBouncyCastleRng, IRandomGenerator, ISeedableRng, IRng, ISeedConsumer Remarks Constructor Constructors | Edit this page View Source ChaCha20Rng(in ISeedableRng?, in int?, in int?) ChaCha20 CSRNG Declaration public ChaCha20Rng(in ISeedableRng? rng = null, in int? bufferSize = null, in int? seedLength = 256) Parameters Type Name Description ISeedableRng rng Internal RNG to use (will be disposed, if possible!) int? bufferSize Buffer size in bytes (min. IV_SIZE) int? seedLength Seed the given RNG with N byte from wan24.Crypto.RND (skipped, if null or <1) Remarks Constructor Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IBouncyCastleRng Org.BouncyCastle.Crypto.Prng.IRandomGenerator wan24.Crypto.ISeedableRng wan24.Crypto.IRng wan24.Crypto.ISeedConsumer"
  },
  "api/wan24.Crypto.BC.DisposableRngWrapper.html": {
    "href": "api/wan24.Crypto.BC.DisposableRngWrapper.html",
    "title": "Class DisposableRngWrapper | wan24-Crypto-BC",
    "keywords": "Class DisposableRngWrapper Bouncy Castle disposable RNG wrapper for wan24-Crypto Inheritance object DisposableBase DisposableRngBase DisposableSeedableRngBase DisposableRngWrapper Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable ISeedableRng IRng ISeedConsumer IRandomGenerator Inherited Members DisposableRngBase.GetBytes(in int) DisposableRngBase.GetBytesAsync(int, CancellationToken) DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed class DisposableRngWrapper : DisposableSeedableRngBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, ISeedableRng, IRng, ISeedConsumer, IRandomGenerator Remarks Constructor Constructors | Edit this page View Source DisposableRngWrapper(IRandomGenerator) Bouncy Castle disposable RNG wrapper for wan24-Crypto Declaration public DisposableRngWrapper(IRandomGenerator rng) Parameters Type Name Description IRandomGenerator rng RNG Remarks Constructor Properties | Edit this page View Source RNG Wrapped RNG Declaration public IRandomGenerator RNG { get; } Property Value Type Description IRandomGenerator Methods | Edit this page View Source AddSeed(ReadOnlySpan<byte>) Add seed to the RNG Declaration public override void AddSeed(ReadOnlySpan<byte> seed) Parameters Type Name Description ReadOnlySpan<byte> seed Seed Overrides DisposableSeedableRngBase.AddSeed(ReadOnlySpan<byte>) | Edit this page View Source AddSeedAsync(ReadOnlyMemory<byte>, CancellationToken) Add seed to the RNG Declaration public override Task AddSeedAsync(ReadOnlyMemory<byte> seed, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> seed Seed CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableSeedableRngBase.AddSeedAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source AddSeedMaterial(byte[]) Add more seed material to the generator. Declaration public void AddSeedMaterial(byte[] seed) Parameters Type Name Description byte[] seed A byte array to be mixed into the generator's state. | Edit this page View Source AddSeedMaterial(long) Add more seed material to the generator. Declaration public void AddSeedMaterial(long seed) Parameters Type Name Description long seed A long value to be mixed into the generator's state. | Edit this page View Source AddSeedMaterial(ReadOnlySpan<byte>) Declaration public void AddSeedMaterial(ReadOnlySpan<byte> seed) Parameters Type Name Description ReadOnlySpan<byte> seed | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Core.DisposableBase.DisposeCore() | Edit this page View Source FillBytes(in Span<byte>) Fill random bytes Declaration public override Span<byte> FillBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description Span<byte> Random bytes Overrides DisposableRngBase.FillBytes(in Span<byte>) | Edit this page View Source FillBytesAsync(Memory<byte>, CancellationToken) Fill random bytes Declaration public override Task<Memory<byte>> FillBytesAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description Task<Memory<byte>> Random bytes Overrides DisposableRngBase.FillBytesAsync(Memory<byte>, CancellationToken) | Edit this page View Source NextBytes(byte[]) Fill byte array with random values. Declaration public void NextBytes(byte[] bytes) Parameters Type Name Description byte[] bytes Array to be filled. | Edit this page View Source NextBytes(byte[], int, int) Fill byte array with random values. Declaration public void NextBytes(byte[] bytes, int start, int len) Parameters Type Name Description byte[] bytes Array to receive bytes. int start Index to start filling at. int len Length of segment to fill. | Edit this page View Source NextBytes(Span<byte>) Declaration public void NextBytes(Span<byte> bytes) Parameters Type Name Description Span<byte> bytes Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable wan24.Crypto.ISeedableRng wan24.Crypto.IRng wan24.Crypto.ISeedConsumer Org.BouncyCastle.Crypto.Prng.IRandomGenerator"
  },
  "api/wan24.Crypto.BC.EncryptionAes256GcmAlgorithm.html": {
    "href": "api/wan24.Crypto.BC.EncryptionAes256GcmAlgorithm.html",
    "title": "Class EncryptionAes256GcmAlgorithm | wan24-Crypto-BC",
    "keywords": "Class EncryptionAes256GcmAlgorithm AES-256-GCM AEAD symmetric encryption algorithm (using 128 bit MAC) Inheritance object CryptoAlgorithmBase EncryptionAlgorithmBase BouncyCastleCipherAlgorithmBase<EncryptionAes256GcmAlgorithm> BouncyCastleAeadCipherAlgorithmBase<EncryptionAes256GcmAlgorithm> EncryptionAes256GcmAlgorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<EncryptionAlgorithmBase> IEquatable<BouncyCastleCipherAlgorithmBase<EncryptionAes256GcmAlgorithm>> IEquatable<BouncyCastleAeadCipherAlgorithmBase<EncryptionAes256GcmAlgorithm>> IEquatable<EncryptionAes256GcmAlgorithm> Inherited Members BouncyCastleCipherAlgorithmBase<EncryptionAes256GcmAlgorithm>.Instance BouncyCastleCipherAlgorithmBase<EncryptionAes256GcmAlgorithm>.Register() EncryptionAlgorithmBase.EnsureDefaultOptions(CryptoOptions) EncryptionAlgorithmBase.EnsureAllowed(in bool) EncryptionAlgorithmBase.Decrypt(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.Encrypt(Stream, Stream, byte[], CryptoOptions, MacStreams) EncryptionAlgorithmBase.Encrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Encrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, byte[], CryptoOptions, MacStreams, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.WriteOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.WriteOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ReadOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.ReadOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetEncryptionStream(Stream, Stream, MacStreams, CryptoOptions) EncryptionAlgorithmBase.GetEncryptionStreamAsync(Stream, Stream, MacStreams, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetDecryptionStream(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.GetDecryptionStreamAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ToString() EncryptionAlgorithmBase.GetHashCode() EncryptionAlgorithmBase.Equals(object) EncryptionAlgorithmBase.Equals(CryptoAlgorithmBase) EncryptionAlgorithmBase.Equals(EncryptionAlgorithmBase) EncryptionAlgorithmBase.<Clone>$() EncryptionAlgorithmBase.DefaultOptions EncryptionAlgorithmBase.IsDenied EncryptionAlgorithmBase.State CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record EncryptionAes256GcmAlgorithm : BouncyCastleAeadCipherAlgorithmBase<EncryptionAes256GcmAlgorithm>, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<EncryptionAlgorithmBase>, IEquatable<BouncyCastleCipherAlgorithmBase<EncryptionAes256GcmAlgorithm>>, IEquatable<BouncyCastleAeadCipherAlgorithmBase<EncryptionAes256GcmAlgorithm>>, IEquatable<EncryptionAes256GcmAlgorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"AES256GCM\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 3 Field Value Type Description int | Edit this page View Source BLOCK_SIZE Block size in bytes Declaration public const int BLOCK_SIZE = 1 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"AES-256-GCM\" Field Value Type Description string | Edit this page View Source IV_SIZE IV size in bytes Declaration public const int IV_SIZE = 12 Field Value Type Description int | Edit this page View Source KEY_SIZE Key size in bytes Declaration public const int KEY_SIZE = 32 Field Value Type Description int | Edit this page View Source PROFILE_AES256GCM_RAW AES-256-GCM raw (without header) and uncompressed profile key Declaration public const string PROFILE_AES256GCM_RAW = \"AES256GCM_RAW\" Field Value Type Description string Properties | Edit this page View Source BlockSize Block size in bytes Declaration public override int BlockSize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.BlockSize | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides wan24.Crypto.CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source IvSize IV size in bytes Declaration public override int IvSize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.IvSize | Edit this page View Source KeySize Key size in bytes Declaration public override int KeySize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.KeySize | Edit this page View Source RequireMacAuthentication Is a MAC authentication required? Declaration public override bool RequireMacAuthentication { get; } Property Value Type Description bool Overrides wan24.Crypto.EncryptionAlgorithmBase.RequireMacAuthentication Methods | Edit this page View Source CreateAes(CryptoOptions) Create the AES engine Declaration public static AesEngine CreateAes(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description AesEngine AES instance (not yet initialized) | Edit this page View Source CreateCipher(bool, CryptoOptions) Create the cipher engine Declaration protected override IBufferedCipher CreateCipher(bool forEncryption, CryptoOptions options) Parameters Type Name Description bool forEncryption For encryption? CryptoOptions options Options Returns Type Description IBufferedCipher Stream cipher Overrides BouncyCastleAeadCipherAlgorithmBase<EncryptionAes256GcmAlgorithm>.CreateCipher(bool, CryptoOptions) | Edit this page View Source EnsureValidKeyLength(byte[]) Ensure a key with a valid length Declaration public override byte[] EnsureValidKeyLength(byte[] key) Parameters Type Name Description byte[] key Key (won't be cleared) Returns Type Description byte[] Key with a valid length (if the given key had a valid length already, this is a copy; should be cleared) Overrides EncryptionAlgorithmBase.EnsureValidKeyLength(byte[]) | Edit this page View Source IsKeyLengthValid(int) Determine if a key length is valid Declaration public override bool IsKeyLengthValid(int len) Parameters Type Name Description int len Key length in bytes Returns Type Description bool If the key length is valid Overrides EncryptionAlgorithmBase.IsKeyLengthValid(int) Implements wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.EncryptionBcAes256CbcAlgorithm.html": {
    "href": "api/wan24.Crypto.BC.EncryptionBcAes256CbcAlgorithm.html",
    "title": "Class EncryptionBcAes256CbcAlgorithm | wan24-Crypto-BC",
    "keywords": "Class EncryptionBcAes256CbcAlgorithm AES-256-CBC symmetric encryption algorithm (using ISO10126 padding; may be used as replacement, if the .NET algorithm isn't available on the current platform) Inheritance object CryptoAlgorithmBase EncryptionAlgorithmBase BouncyCastleCipherAlgorithmBase<EncryptionBcAes256CbcAlgorithm> BouncyCastleBufferedCipherAlgorithmBase<EncryptionBcAes256CbcAlgorithm> EncryptionBcAes256CbcAlgorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<EncryptionAlgorithmBase> IEquatable<BouncyCastleCipherAlgorithmBase<EncryptionBcAes256CbcAlgorithm>> IEquatable<BouncyCastleBufferedCipherAlgorithmBase<EncryptionBcAes256CbcAlgorithm>> IEquatable<EncryptionBcAes256CbcAlgorithm> Inherited Members BouncyCastleCipherAlgorithmBase<EncryptionBcAes256CbcAlgorithm>.Instance BouncyCastleCipherAlgorithmBase<EncryptionBcAes256CbcAlgorithm>.Register() EncryptionAlgorithmBase.EnsureDefaultOptions(CryptoOptions) EncryptionAlgorithmBase.EnsureAllowed(in bool) EncryptionAlgorithmBase.Decrypt(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.Encrypt(Stream, Stream, byte[], CryptoOptions, MacStreams) EncryptionAlgorithmBase.Encrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Encrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, byte[], CryptoOptions, MacStreams, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.WriteOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.WriteOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ReadOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.ReadOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetEncryptionStream(Stream, Stream, MacStreams, CryptoOptions) EncryptionAlgorithmBase.GetEncryptionStreamAsync(Stream, Stream, MacStreams, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetDecryptionStream(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.GetDecryptionStreamAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ToString() EncryptionAlgorithmBase.GetHashCode() EncryptionAlgorithmBase.Equals(object) EncryptionAlgorithmBase.Equals(CryptoAlgorithmBase) EncryptionAlgorithmBase.Equals(EncryptionAlgorithmBase) EncryptionAlgorithmBase.<Clone>$() EncryptionAlgorithmBase.DefaultOptions EncryptionAlgorithmBase.IsDenied EncryptionAlgorithmBase.State CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record EncryptionBcAes256CbcAlgorithm : BouncyCastleBufferedCipherAlgorithmBase<EncryptionBcAes256CbcAlgorithm>, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<EncryptionAlgorithmBase>, IEquatable<BouncyCastleCipherAlgorithmBase<EncryptionBcAes256CbcAlgorithm>>, IEquatable<BouncyCastleBufferedCipherAlgorithmBase<EncryptionBcAes256CbcAlgorithm>>, IEquatable<EncryptionBcAes256CbcAlgorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"AES256CBC\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 0 Field Value Type Description int | Edit this page View Source BLOCK_SIZE Block size in bytes Declaration public const int BLOCK_SIZE = 16 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"AES-256-CBC\" Field Value Type Description string | Edit this page View Source IV_SIZE IV size in bytes Declaration public const int IV_SIZE = 16 Field Value Type Description int | Edit this page View Source KEY_SIZE Key size in bytes Declaration public const int KEY_SIZE = 32 Field Value Type Description int Properties | Edit this page View Source BlockSize Block size in bytes Declaration public override int BlockSize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.BlockSize | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides wan24.Crypto.CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source IvSize IV size in bytes Declaration public override int IvSize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.IvSize | Edit this page View Source KeySize Key size in bytes Declaration public override int KeySize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.KeySize | Edit this page View Source RequireMacAuthentication Is a MAC authentication required? Declaration public override bool RequireMacAuthentication { get; } Property Value Type Description bool Overrides wan24.Crypto.EncryptionAlgorithmBase.RequireMacAuthentication Methods | Edit this page View Source CreateAes(CryptoOptions) Create the AES engine Declaration public static AesEngine CreateAes(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description AesEngine AES instance (not yet initialized) | Edit this page View Source CreateCipher(bool, CryptoOptions) Create the cipher engine Declaration protected override IBufferedCipher CreateCipher(bool forEncryption, CryptoOptions options) Parameters Type Name Description bool forEncryption For encryption? CryptoOptions options Options Returns Type Description IBufferedCipher Block cipher Overrides BouncyCastleBufferedCipherAlgorithmBase<EncryptionBcAes256CbcAlgorithm>.CreateCipher(bool, CryptoOptions) | Edit this page View Source EnsureValidKeyLength(byte[]) Ensure a key with a valid length Declaration public override byte[] EnsureValidKeyLength(byte[] key) Parameters Type Name Description byte[] key Key (won't be cleared) Returns Type Description byte[] Key with a valid length (if the given key had a valid length already, this is a copy; should be cleared) Overrides EncryptionAlgorithmBase.EnsureValidKeyLength(byte[]) | Edit this page View Source IsKeyLengthValid(int) Determine if a key length is valid Declaration public override bool IsKeyLengthValid(int len) Parameters Type Name Description int len Key length in bytes Returns Type Description bool If the key length is valid Overrides EncryptionAlgorithmBase.IsKeyLengthValid(int) Implements wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.EncryptionChaCha20Algorithm.html": {
    "href": "api/wan24.Crypto.BC.EncryptionChaCha20Algorithm.html",
    "title": "Class EncryptionChaCha20Algorithm | wan24-Crypto-BC",
    "keywords": "Class EncryptionChaCha20Algorithm ChaCha20 symmetric encryption algorithm (using 256 bit key) Inheritance object CryptoAlgorithmBase EncryptionAlgorithmBase BouncyCastleStreamCipherAlgorithmBase<EncryptionChaCha20Algorithm> EncryptionChaCha20Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<EncryptionAlgorithmBase> IEquatable<BouncyCastleStreamCipherAlgorithmBase<EncryptionChaCha20Algorithm>> IEquatable<EncryptionChaCha20Algorithm> Inherited Members BouncyCastleStreamCipherAlgorithmBase<EncryptionChaCha20Algorithm>.Instance BouncyCastleStreamCipherAlgorithmBase<EncryptionChaCha20Algorithm>.Register() EncryptionAlgorithmBase.EnsureDefaultOptions(CryptoOptions) EncryptionAlgorithmBase.EnsureAllowed(in bool) EncryptionAlgorithmBase.Decrypt(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.Encrypt(Stream, Stream, byte[], CryptoOptions, MacStreams) EncryptionAlgorithmBase.Encrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Encrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, byte[], CryptoOptions, MacStreams, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.WriteOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.WriteOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ReadOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.ReadOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetEncryptionStream(Stream, Stream, MacStreams, CryptoOptions) EncryptionAlgorithmBase.GetEncryptionStreamAsync(Stream, Stream, MacStreams, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetDecryptionStream(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.GetDecryptionStreamAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ToString() EncryptionAlgorithmBase.GetHashCode() EncryptionAlgorithmBase.Equals(object) EncryptionAlgorithmBase.Equals(CryptoAlgorithmBase) EncryptionAlgorithmBase.Equals(EncryptionAlgorithmBase) EncryptionAlgorithmBase.<Clone>$() EncryptionAlgorithmBase.DefaultOptions EncryptionAlgorithmBase.IsDenied EncryptionAlgorithmBase.State CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record EncryptionChaCha20Algorithm : BouncyCastleStreamCipherAlgorithmBase<EncryptionChaCha20Algorithm>, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<EncryptionAlgorithmBase>, IEquatable<BouncyCastleStreamCipherAlgorithmBase<EncryptionChaCha20Algorithm>>, IEquatable<EncryptionChaCha20Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"CHACHA20\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 1 Field Value Type Description int | Edit this page View Source BLOCK_SIZE Block size in bytes Declaration public const int BLOCK_SIZE = 1 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"ChaCha20\" Field Value Type Description string | Edit this page View Source IV_SIZE IV size in bytes Declaration public const int IV_SIZE = 8 Field Value Type Description int | Edit this page View Source KEY_SIZE Key size in bytes Declaration public const int KEY_SIZE = 32 Field Value Type Description int | Edit this page View Source PROFILE_CHACHA20_RAW ChaCha20 raw (without header) and uncompressed profile key Declaration public const string PROFILE_CHACHA20_RAW = \"CHACHA20_RAW\" Field Value Type Description string Properties | Edit this page View Source BlockSize Block size in bytes Declaration public override int BlockSize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.BlockSize | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides wan24.Crypto.CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source IvSize IV size in bytes Declaration public override int IvSize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.IvSize | Edit this page View Source KeySize Key size in bytes Declaration public override int KeySize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.KeySize | Edit this page View Source RequireMacAuthentication Is a MAC authentication required? Declaration public override bool RequireMacAuthentication { get; } Property Value Type Description bool Overrides wan24.Crypto.EncryptionAlgorithmBase.RequireMacAuthentication Methods | Edit this page View Source CreateChaCha(CryptoOptions) Create the ChaCha engine Declaration public static ChaChaEngine CreateChaCha(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description ChaChaEngine ChaCha instance (not yet initialized) | Edit this page View Source CreateCipher(bool, CryptoOptions) Create the cipher engine Declaration protected override IStreamCipher CreateCipher(bool forEncryption, CryptoOptions options) Parameters Type Name Description bool forEncryption For encryption? CryptoOptions options Options Returns Type Description IStreamCipher Stream cipher Overrides BouncyCastleStreamCipherAlgorithmBase<EncryptionChaCha20Algorithm>.CreateCipher(bool, CryptoOptions) | Edit this page View Source EnsureValidKeyLength(byte[]) Ensure a key with a valid length Declaration public override byte[] EnsureValidKeyLength(byte[] key) Parameters Type Name Description byte[] key Key (won't be cleared) Returns Type Description byte[] Key with a valid length (if the given key had a valid length already, this is a copy; should be cleared) Overrides EncryptionAlgorithmBase.EnsureValidKeyLength(byte[]) | Edit this page View Source IsKeyLengthValid(int) Determine if a key length is valid Declaration public override bool IsKeyLengthValid(int len) Parameters Type Name Description int len Key length in bytes Returns Type Description bool If the key length is valid Overrides EncryptionAlgorithmBase.IsKeyLengthValid(int) Implements wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.EncryptionSerpent256CbcAlgorithm.html": {
    "href": "api/wan24.Crypto.BC.EncryptionSerpent256CbcAlgorithm.html",
    "title": "Class EncryptionSerpent256CbcAlgorithm | wan24-Crypto-BC",
    "keywords": "Class EncryptionSerpent256CbcAlgorithm Serpent 256 CBC symmetric encryption algorithm (using ISO10126 padding) Inheritance object CryptoAlgorithmBase EncryptionAlgorithmBase BouncyCastleCipherAlgorithmBase<EncryptionSerpent256CbcAlgorithm> BouncyCastleBufferedCipherAlgorithmBase<EncryptionSerpent256CbcAlgorithm> EncryptionSerpent256CbcAlgorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<EncryptionAlgorithmBase> IEquatable<BouncyCastleCipherAlgorithmBase<EncryptionSerpent256CbcAlgorithm>> IEquatable<BouncyCastleBufferedCipherAlgorithmBase<EncryptionSerpent256CbcAlgorithm>> IEquatable<EncryptionSerpent256CbcAlgorithm> Inherited Members BouncyCastleCipherAlgorithmBase<EncryptionSerpent256CbcAlgorithm>.Instance BouncyCastleCipherAlgorithmBase<EncryptionSerpent256CbcAlgorithm>.Register() EncryptionAlgorithmBase.EnsureDefaultOptions(CryptoOptions) EncryptionAlgorithmBase.EnsureAllowed(in bool) EncryptionAlgorithmBase.Decrypt(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.Encrypt(Stream, Stream, byte[], CryptoOptions, MacStreams) EncryptionAlgorithmBase.Encrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Encrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, byte[], CryptoOptions, MacStreams, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.WriteOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.WriteOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ReadOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.ReadOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetEncryptionStream(Stream, Stream, MacStreams, CryptoOptions) EncryptionAlgorithmBase.GetEncryptionStreamAsync(Stream, Stream, MacStreams, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetDecryptionStream(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.GetDecryptionStreamAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ToString() EncryptionAlgorithmBase.GetHashCode() EncryptionAlgorithmBase.Equals(object) EncryptionAlgorithmBase.Equals(CryptoAlgorithmBase) EncryptionAlgorithmBase.Equals(EncryptionAlgorithmBase) EncryptionAlgorithmBase.<Clone>$() EncryptionAlgorithmBase.DefaultOptions EncryptionAlgorithmBase.IsDenied EncryptionAlgorithmBase.State CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record EncryptionSerpent256CbcAlgorithm : BouncyCastleBufferedCipherAlgorithmBase<EncryptionSerpent256CbcAlgorithm>, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<EncryptionAlgorithmBase>, IEquatable<BouncyCastleCipherAlgorithmBase<EncryptionSerpent256CbcAlgorithm>>, IEquatable<BouncyCastleBufferedCipherAlgorithmBase<EncryptionSerpent256CbcAlgorithm>>, IEquatable<EncryptionSerpent256CbcAlgorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"SERPENT256CBC\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 5 Field Value Type Description int | Edit this page View Source BLOCK_SIZE Block size in bytes Declaration public const int BLOCK_SIZE = 16 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"Serpent 256 bit CBC\" Field Value Type Description string | Edit this page View Source IV_SIZE IV size in bytes Declaration public const int IV_SIZE = 16 Field Value Type Description int | Edit this page View Source KEY_SIZE Key size in bytes Declaration public const int KEY_SIZE = 32 Field Value Type Description int | Edit this page View Source PROFILE_SERPENT256CBC_RAW Serpent 256 CBC raw (without header) and uncompressed profile key Declaration public const string PROFILE_SERPENT256CBC_RAW = \"SERPENT256CBC_RAW\" Field Value Type Description string Properties | Edit this page View Source BlockSize Block size in bytes Declaration public override int BlockSize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.BlockSize | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides wan24.Crypto.CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source IvSize IV size in bytes Declaration public override int IvSize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.IvSize | Edit this page View Source KeySize Key size in bytes Declaration public override int KeySize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.KeySize | Edit this page View Source RequireMacAuthentication Is a MAC authentication required? Declaration public override bool RequireMacAuthentication { get; } Property Value Type Description bool Overrides wan24.Crypto.EncryptionAlgorithmBase.RequireMacAuthentication Methods | Edit this page View Source CreateCipher(bool, CryptoOptions) Create the cipher engine Declaration protected override IBufferedCipher CreateCipher(bool forEncryption, CryptoOptions options) Parameters Type Name Description bool forEncryption For encryption? CryptoOptions options Options Returns Type Description IBufferedCipher Block cipher Overrides BouncyCastleBufferedCipherAlgorithmBase<EncryptionSerpent256CbcAlgorithm>.CreateCipher(bool, CryptoOptions) | Edit this page View Source CreateParameters(byte[], CryptoOptions) Create cipher parameters Declaration protected override ICipherParameters CreateParameters(byte[] iv, CryptoOptions options) Parameters Type Name Description byte[] iv IV bytes CryptoOptions options Options Returns Type Description ICipherParameters Parameters Overrides BouncyCastleCipherAlgorithmBase<EncryptionSerpent256CbcAlgorithm>.CreateParameters(byte[], CryptoOptions) | Edit this page View Source CreateSerpent(CryptoOptions) Create the Serpent engine Declaration public static SerpentEngine CreateSerpent(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description SerpentEngine Serpent instance (not yet initialized) | Edit this page View Source EnsureValidKeyLength(byte[]) Ensure a key with a valid length Declaration public override byte[] EnsureValidKeyLength(byte[] key) Parameters Type Name Description byte[] key Key (won't be cleared) Returns Type Description byte[] Key with a valid length (if the given key had a valid length already, this is a copy; should be cleared) Overrides EncryptionAlgorithmBase.EnsureValidKeyLength(byte[]) | Edit this page View Source IsKeyLengthValid(int) Determine if a key length is valid Declaration public override bool IsKeyLengthValid(int len) Parameters Type Name Description int len Key length in bytes Returns Type Description bool If the key length is valid Overrides EncryptionAlgorithmBase.IsKeyLengthValid(int) Implements wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.EncryptionSerpent256GcmAlgorithm.html": {
    "href": "api/wan24.Crypto.BC.EncryptionSerpent256GcmAlgorithm.html",
    "title": "Class EncryptionSerpent256GcmAlgorithm | wan24-Crypto-BC",
    "keywords": "Class EncryptionSerpent256GcmAlgorithm Serpent 256 GCM symmetric encryption algorithm (using 128 bit MAC) Inheritance object CryptoAlgorithmBase EncryptionAlgorithmBase BouncyCastleCipherAlgorithmBase<EncryptionSerpent256GcmAlgorithm> BouncyCastleAeadCipherAlgorithmBase<EncryptionSerpent256GcmAlgorithm> EncryptionSerpent256GcmAlgorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<EncryptionAlgorithmBase> IEquatable<BouncyCastleCipherAlgorithmBase<EncryptionSerpent256GcmAlgorithm>> IEquatable<BouncyCastleAeadCipherAlgorithmBase<EncryptionSerpent256GcmAlgorithm>> IEquatable<EncryptionSerpent256GcmAlgorithm> Inherited Members BouncyCastleCipherAlgorithmBase<EncryptionSerpent256GcmAlgorithm>.Instance BouncyCastleCipherAlgorithmBase<EncryptionSerpent256GcmAlgorithm>.Register() EncryptionAlgorithmBase.EnsureDefaultOptions(CryptoOptions) EncryptionAlgorithmBase.EnsureAllowed(in bool) EncryptionAlgorithmBase.Decrypt(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.Encrypt(Stream, Stream, byte[], CryptoOptions, MacStreams) EncryptionAlgorithmBase.Encrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Encrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, byte[], CryptoOptions, MacStreams, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.WriteOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.WriteOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ReadOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.ReadOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetEncryptionStream(Stream, Stream, MacStreams, CryptoOptions) EncryptionAlgorithmBase.GetEncryptionStreamAsync(Stream, Stream, MacStreams, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetDecryptionStream(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.GetDecryptionStreamAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ToString() EncryptionAlgorithmBase.GetHashCode() EncryptionAlgorithmBase.Equals(object) EncryptionAlgorithmBase.Equals(CryptoAlgorithmBase) EncryptionAlgorithmBase.Equals(EncryptionAlgorithmBase) EncryptionAlgorithmBase.<Clone>$() EncryptionAlgorithmBase.DefaultOptions EncryptionAlgorithmBase.IsDenied EncryptionAlgorithmBase.State CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record EncryptionSerpent256GcmAlgorithm : BouncyCastleAeadCipherAlgorithmBase<EncryptionSerpent256GcmAlgorithm>, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<EncryptionAlgorithmBase>, IEquatable<BouncyCastleCipherAlgorithmBase<EncryptionSerpent256GcmAlgorithm>>, IEquatable<BouncyCastleAeadCipherAlgorithmBase<EncryptionSerpent256GcmAlgorithm>>, IEquatable<EncryptionSerpent256GcmAlgorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"SERPENT256GCM\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 6 Field Value Type Description int | Edit this page View Source BLOCK_SIZE Block size in bytes Declaration public const int BLOCK_SIZE = 16 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"Serpent 256 bit GCM\" Field Value Type Description string | Edit this page View Source IV_SIZE IV size in bytes Declaration public const int IV_SIZE = 16 Field Value Type Description int | Edit this page View Source KEY_SIZE Key size in bytes Declaration public const int KEY_SIZE = 32 Field Value Type Description int | Edit this page View Source PROFILE_SERPENT256GCM_RAW Serpent 256 GCM raw (without header) and uncompressed profile key Declaration public const string PROFILE_SERPENT256GCM_RAW = \"SERPENT256GCM_RAW\" Field Value Type Description string Properties | Edit this page View Source BlockSize Block size in bytes Declaration public override int BlockSize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.BlockSize | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides wan24.Crypto.CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source IvSize IV size in bytes Declaration public override int IvSize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.IvSize | Edit this page View Source KeySize Key size in bytes Declaration public override int KeySize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.KeySize | Edit this page View Source RequireMacAuthentication Is a MAC authentication required? Declaration public override bool RequireMacAuthentication { get; } Property Value Type Description bool Overrides wan24.Crypto.EncryptionAlgorithmBase.RequireMacAuthentication Methods | Edit this page View Source CreateCipher(bool, CryptoOptions) Create the cipher engine Declaration protected override IBufferedCipher CreateCipher(bool forEncryption, CryptoOptions options) Parameters Type Name Description bool forEncryption For encryption? CryptoOptions options Options Returns Type Description IBufferedCipher Stream cipher Overrides BouncyCastleAeadCipherAlgorithmBase<EncryptionSerpent256GcmAlgorithm>.CreateCipher(bool, CryptoOptions) | Edit this page View Source CreateSerpent(CryptoOptions) Create the Serpent engine Declaration public static SerpentEngine CreateSerpent(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description SerpentEngine Serpent instance (not yet initialized) | Edit this page View Source EnsureValidKeyLength(byte[]) Ensure a key with a valid length Declaration public override byte[] EnsureValidKeyLength(byte[] key) Parameters Type Name Description byte[] key Key (won't be cleared) Returns Type Description byte[] Key with a valid length (if the given key had a valid length already, this is a copy; should be cleared) Overrides EncryptionAlgorithmBase.EnsureValidKeyLength(byte[]) | Edit this page View Source IsKeyLengthValid(int) Determine if a key length is valid Declaration public override bool IsKeyLengthValid(int len) Parameters Type Name Description int len Key length in bytes Returns Type Description bool If the key length is valid Overrides EncryptionAlgorithmBase.IsKeyLengthValid(int) Implements wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.EncryptionTwofish256CbcAlgorithm.html": {
    "href": "api/wan24.Crypto.BC.EncryptionTwofish256CbcAlgorithm.html",
    "title": "Class EncryptionTwofish256CbcAlgorithm | wan24-Crypto-BC",
    "keywords": "Class EncryptionTwofish256CbcAlgorithm Twofish 256 CBC symmetric encryption algorithm (using ISO10126 padding) Inheritance object CryptoAlgorithmBase EncryptionAlgorithmBase BouncyCastleCipherAlgorithmBase<EncryptionTwofish256CbcAlgorithm> BouncyCastleBufferedCipherAlgorithmBase<EncryptionTwofish256CbcAlgorithm> EncryptionTwofish256CbcAlgorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<EncryptionAlgorithmBase> IEquatable<BouncyCastleCipherAlgorithmBase<EncryptionTwofish256CbcAlgorithm>> IEquatable<BouncyCastleBufferedCipherAlgorithmBase<EncryptionTwofish256CbcAlgorithm>> IEquatable<EncryptionTwofish256CbcAlgorithm> Inherited Members BouncyCastleCipherAlgorithmBase<EncryptionTwofish256CbcAlgorithm>.Instance BouncyCastleCipherAlgorithmBase<EncryptionTwofish256CbcAlgorithm>.Register() EncryptionAlgorithmBase.EnsureDefaultOptions(CryptoOptions) EncryptionAlgorithmBase.EnsureAllowed(in bool) EncryptionAlgorithmBase.Decrypt(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.Encrypt(Stream, Stream, byte[], CryptoOptions, MacStreams) EncryptionAlgorithmBase.Encrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Encrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, byte[], CryptoOptions, MacStreams, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.WriteOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.WriteOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ReadOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.ReadOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetEncryptionStream(Stream, Stream, MacStreams, CryptoOptions) EncryptionAlgorithmBase.GetEncryptionStreamAsync(Stream, Stream, MacStreams, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetDecryptionStream(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.GetDecryptionStreamAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ToString() EncryptionAlgorithmBase.GetHashCode() EncryptionAlgorithmBase.Equals(object) EncryptionAlgorithmBase.Equals(CryptoAlgorithmBase) EncryptionAlgorithmBase.Equals(EncryptionAlgorithmBase) EncryptionAlgorithmBase.<Clone>$() EncryptionAlgorithmBase.DefaultOptions EncryptionAlgorithmBase.IsDenied EncryptionAlgorithmBase.State CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record EncryptionTwofish256CbcAlgorithm : BouncyCastleBufferedCipherAlgorithmBase<EncryptionTwofish256CbcAlgorithm>, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<EncryptionAlgorithmBase>, IEquatable<BouncyCastleCipherAlgorithmBase<EncryptionTwofish256CbcAlgorithm>>, IEquatable<BouncyCastleBufferedCipherAlgorithmBase<EncryptionTwofish256CbcAlgorithm>>, IEquatable<EncryptionTwofish256CbcAlgorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"TWOFISH256CBC\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 6 Field Value Type Description int | Edit this page View Source BLOCK_SIZE Block size in bytes Declaration public const int BLOCK_SIZE = 16 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"Twofish 256 bit CBC\" Field Value Type Description string | Edit this page View Source IV_SIZE IV size in bytes Declaration public const int IV_SIZE = 16 Field Value Type Description int | Edit this page View Source KEY_SIZE Key size in bytes Declaration public const int KEY_SIZE = 32 Field Value Type Description int | Edit this page View Source PROFILE_TWOFISH256CBC_RAW Twofish 256 CBC raw (without header) and uncompressed profile key Declaration public const string PROFILE_TWOFISH256CBC_RAW = \"TWOFISH256CBC_RAW\" Field Value Type Description string Properties | Edit this page View Source BlockSize Block size in bytes Declaration public override int BlockSize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.BlockSize | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides wan24.Crypto.CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source IvSize IV size in bytes Declaration public override int IvSize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.IvSize | Edit this page View Source KeySize Key size in bytes Declaration public override int KeySize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.KeySize | Edit this page View Source RequireMacAuthentication Is a MAC authentication required? Declaration public override bool RequireMacAuthentication { get; } Property Value Type Description bool Overrides wan24.Crypto.EncryptionAlgorithmBase.RequireMacAuthentication Methods | Edit this page View Source CreateCipher(bool, CryptoOptions) Create the cipher engine Declaration protected override IBufferedCipher CreateCipher(bool forEncryption, CryptoOptions options) Parameters Type Name Description bool forEncryption For encryption? CryptoOptions options Options Returns Type Description IBufferedCipher Block cipher Overrides BouncyCastleBufferedCipherAlgorithmBase<EncryptionTwofish256CbcAlgorithm>.CreateCipher(bool, CryptoOptions) | Edit this page View Source CreateParameters(byte[], CryptoOptions) Create cipher parameters Declaration protected override ICipherParameters CreateParameters(byte[] iv, CryptoOptions options) Parameters Type Name Description byte[] iv IV bytes CryptoOptions options Options Returns Type Description ICipherParameters Parameters Overrides BouncyCastleCipherAlgorithmBase<EncryptionTwofish256CbcAlgorithm>.CreateParameters(byte[], CryptoOptions) | Edit this page View Source CreateTwofish(CryptoOptions) Create the Twofish engine Declaration public static TwofishEngine CreateTwofish(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description TwofishEngine Twofish instance (not yet initialized) | Edit this page View Source EnsureValidKeyLength(byte[]) Ensure a key with a valid length Declaration public override byte[] EnsureValidKeyLength(byte[] key) Parameters Type Name Description byte[] key Key (won't be cleared) Returns Type Description byte[] Key with a valid length (if the given key had a valid length already, this is a copy; should be cleared) Overrides EncryptionAlgorithmBase.EnsureValidKeyLength(byte[]) | Edit this page View Source IsKeyLengthValid(int) Determine if a key length is valid Declaration public override bool IsKeyLengthValid(int len) Parameters Type Name Description int len Key length in bytes Returns Type Description bool If the key length is valid Overrides EncryptionAlgorithmBase.IsKeyLengthValid(int) Implements wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.EncryptionTwofish256GcmAlgorithm.html": {
    "href": "api/wan24.Crypto.BC.EncryptionTwofish256GcmAlgorithm.html",
    "title": "Class EncryptionTwofish256GcmAlgorithm | wan24-Crypto-BC",
    "keywords": "Class EncryptionTwofish256GcmAlgorithm Twofish 256 GCM symmetric encryption algorithm (using 128 bit MAC) Inheritance object CryptoAlgorithmBase EncryptionAlgorithmBase BouncyCastleCipherAlgorithmBase<EncryptionTwofish256GcmAlgorithm> BouncyCastleAeadCipherAlgorithmBase<EncryptionTwofish256GcmAlgorithm> EncryptionTwofish256GcmAlgorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<EncryptionAlgorithmBase> IEquatable<BouncyCastleCipherAlgorithmBase<EncryptionTwofish256GcmAlgorithm>> IEquatable<BouncyCastleAeadCipherAlgorithmBase<EncryptionTwofish256GcmAlgorithm>> IEquatable<EncryptionTwofish256GcmAlgorithm> Inherited Members BouncyCastleCipherAlgorithmBase<EncryptionTwofish256GcmAlgorithm>.Instance BouncyCastleCipherAlgorithmBase<EncryptionTwofish256GcmAlgorithm>.Register() EncryptionAlgorithmBase.EnsureDefaultOptions(CryptoOptions) EncryptionAlgorithmBase.EnsureAllowed(in bool) EncryptionAlgorithmBase.Decrypt(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.Encrypt(Stream, Stream, byte[], CryptoOptions, MacStreams) EncryptionAlgorithmBase.Encrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Encrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, byte[], CryptoOptions, MacStreams, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.WriteOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.WriteOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ReadOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.ReadOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetEncryptionStream(Stream, Stream, MacStreams, CryptoOptions) EncryptionAlgorithmBase.GetEncryptionStreamAsync(Stream, Stream, MacStreams, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetDecryptionStream(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.GetDecryptionStreamAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ToString() EncryptionAlgorithmBase.GetHashCode() EncryptionAlgorithmBase.Equals(object) EncryptionAlgorithmBase.Equals(CryptoAlgorithmBase) EncryptionAlgorithmBase.Equals(EncryptionAlgorithmBase) EncryptionAlgorithmBase.<Clone>$() EncryptionAlgorithmBase.DefaultOptions EncryptionAlgorithmBase.IsDenied EncryptionAlgorithmBase.State CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record EncryptionTwofish256GcmAlgorithm : BouncyCastleAeadCipherAlgorithmBase<EncryptionTwofish256GcmAlgorithm>, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<EncryptionAlgorithmBase>, IEquatable<BouncyCastleCipherAlgorithmBase<EncryptionTwofish256GcmAlgorithm>>, IEquatable<BouncyCastleAeadCipherAlgorithmBase<EncryptionTwofish256GcmAlgorithm>>, IEquatable<EncryptionTwofish256GcmAlgorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"TWOFISH256GCM\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 6 Field Value Type Description int | Edit this page View Source BLOCK_SIZE Block size in bytes Declaration public const int BLOCK_SIZE = 16 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"Twofish 256 bit GCM\" Field Value Type Description string | Edit this page View Source IV_SIZE IV size in bytes Declaration public const int IV_SIZE = 16 Field Value Type Description int | Edit this page View Source KEY_SIZE Key size in bytes Declaration public const int KEY_SIZE = 32 Field Value Type Description int | Edit this page View Source PROFILE_TWOFISH256GCM_RAW Twofish 256 GCM raw (without header) and uncompressed profile key Declaration public const string PROFILE_TWOFISH256GCM_RAW = \"TWOFISH256GCM_RAW\" Field Value Type Description string Properties | Edit this page View Source BlockSize Block size in bytes Declaration public override int BlockSize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.BlockSize | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides wan24.Crypto.CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source IvSize IV size in bytes Declaration public override int IvSize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.IvSize | Edit this page View Source KeySize Key size in bytes Declaration public override int KeySize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.KeySize | Edit this page View Source RequireMacAuthentication Is a MAC authentication required? Declaration public override bool RequireMacAuthentication { get; } Property Value Type Description bool Overrides wan24.Crypto.EncryptionAlgorithmBase.RequireMacAuthentication Methods | Edit this page View Source CreateCipher(bool, CryptoOptions) Create the cipher engine Declaration protected override IBufferedCipher CreateCipher(bool forEncryption, CryptoOptions options) Parameters Type Name Description bool forEncryption For encryption? CryptoOptions options Options Returns Type Description IBufferedCipher Stream cipher Overrides BouncyCastleAeadCipherAlgorithmBase<EncryptionTwofish256GcmAlgorithm>.CreateCipher(bool, CryptoOptions) | Edit this page View Source CreateTwofish(CryptoOptions) Create the Twofish engine Declaration public static TwofishEngine CreateTwofish(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description TwofishEngine Twofish instance (not yet initialized) | Edit this page View Source EnsureValidKeyLength(byte[]) Ensure a key with a valid length Declaration public override byte[] EnsureValidKeyLength(byte[] key) Parameters Type Name Description byte[] key Key (won't be cleared) Returns Type Description byte[] Key with a valid length (if the given key had a valid length already, this is a copy; should be cleared) Overrides EncryptionAlgorithmBase.EnsureValidKeyLength(byte[]) | Edit this page View Source IsKeyLengthValid(int) Determine if a key length is valid Declaration public override bool IsKeyLengthValid(int len) Parameters Type Name Description int len Key length in bytes Returns Type Description bool If the key length is valid Overrides EncryptionAlgorithmBase.IsKeyLengthValid(int) Implements wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.EncryptionXSalsa20Algorithm.html": {
    "href": "api/wan24.Crypto.BC.EncryptionXSalsa20Algorithm.html",
    "title": "Class EncryptionXSalsa20Algorithm | wan24-Crypto-BC",
    "keywords": "Class EncryptionXSalsa20Algorithm XSalsa20 symmetric encryption algorithm (using 256 bit key) Inheritance object CryptoAlgorithmBase EncryptionAlgorithmBase BouncyCastleStreamCipherAlgorithmBase<EncryptionXSalsa20Algorithm> EncryptionXSalsa20Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<EncryptionAlgorithmBase> IEquatable<BouncyCastleStreamCipherAlgorithmBase<EncryptionXSalsa20Algorithm>> IEquatable<EncryptionXSalsa20Algorithm> Inherited Members BouncyCastleStreamCipherAlgorithmBase<EncryptionXSalsa20Algorithm>.Instance BouncyCastleStreamCipherAlgorithmBase<EncryptionXSalsa20Algorithm>.Register() EncryptionAlgorithmBase.EnsureDefaultOptions(CryptoOptions) EncryptionAlgorithmBase.EnsureAllowed(in bool) EncryptionAlgorithmBase.Decrypt(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Decrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.DecryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.Encrypt(Stream, Stream, byte[], CryptoOptions, MacStreams) EncryptionAlgorithmBase.Encrypt(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions) EncryptionAlgorithmBase.Encrypt(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, byte[], CryptoOptions, MacStreams, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, IAsymmetricPrivateKey, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.EncryptAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.WriteOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.WriteOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ReadOptions(Stream, Stream, byte[], CryptoOptions) EncryptionAlgorithmBase.ReadOptionsAsync(Stream, Stream, byte[], CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetEncryptionStream(Stream, Stream, MacStreams, CryptoOptions) EncryptionAlgorithmBase.GetEncryptionStreamAsync(Stream, Stream, MacStreams, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.GetDecryptionStream(Stream, Stream, CryptoOptions) EncryptionAlgorithmBase.GetDecryptionStreamAsync(Stream, Stream, CryptoOptions, CancellationToken) EncryptionAlgorithmBase.ToString() EncryptionAlgorithmBase.GetHashCode() EncryptionAlgorithmBase.Equals(object) EncryptionAlgorithmBase.Equals(CryptoAlgorithmBase) EncryptionAlgorithmBase.Equals(EncryptionAlgorithmBase) EncryptionAlgorithmBase.<Clone>$() EncryptionAlgorithmBase.DefaultOptions EncryptionAlgorithmBase.IsDenied EncryptionAlgorithmBase.State CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record EncryptionXSalsa20Algorithm : BouncyCastleStreamCipherAlgorithmBase<EncryptionXSalsa20Algorithm>, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<EncryptionAlgorithmBase>, IEquatable<BouncyCastleStreamCipherAlgorithmBase<EncryptionXSalsa20Algorithm>>, IEquatable<EncryptionXSalsa20Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"XSALSA20\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 2 Field Value Type Description int | Edit this page View Source BLOCK_SIZE Block size in bytes Declaration public const int BLOCK_SIZE = 1 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"XSalsa20\" Field Value Type Description string | Edit this page View Source IV_SIZE IV size in bytes Declaration public const int IV_SIZE = 24 Field Value Type Description int | Edit this page View Source KEY_SIZE Key size in bytes Declaration public const int KEY_SIZE = 32 Field Value Type Description int | Edit this page View Source PROFILE_XSALSA20_RAW XSalsa20 raw (without header) and uncompressed profile key Declaration public const string PROFILE_XSALSA20_RAW = \"XSALSA20_RAW\" Field Value Type Description string Properties | Edit this page View Source BlockSize Block size in bytes Declaration public override int BlockSize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.BlockSize | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides wan24.Crypto.CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source IvSize IV size in bytes Declaration public override int IvSize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.IvSize | Edit this page View Source KeySize Key size in bytes Declaration public override int KeySize { get; } Property Value Type Description int Overrides wan24.Crypto.EncryptionAlgorithmBase.KeySize | Edit this page View Source RequireMacAuthentication Is a MAC authentication required? Declaration public override bool RequireMacAuthentication { get; } Property Value Type Description bool Overrides wan24.Crypto.EncryptionAlgorithmBase.RequireMacAuthentication Methods | Edit this page View Source CreateCipher(bool, CryptoOptions) Create the cipher engine Declaration protected override IStreamCipher CreateCipher(bool forEncryption, CryptoOptions options) Parameters Type Name Description bool forEncryption For encryption? CryptoOptions options Options Returns Type Description IStreamCipher Stream cipher Overrides BouncyCastleStreamCipherAlgorithmBase<EncryptionXSalsa20Algorithm>.CreateCipher(bool, CryptoOptions) | Edit this page View Source CreateXSalsa20(CryptoOptions) Create the XSalsa20 engine Declaration public static XSalsa20Engine CreateXSalsa20(CryptoOptions options) Parameters Type Name Description CryptoOptions options Options Returns Type Description XSalsa20Engine ChaCha instance (not yet initialized) | Edit this page View Source EnsureValidKeyLength(byte[]) Ensure a key with a valid length Declaration public override byte[] EnsureValidKeyLength(byte[] key) Parameters Type Name Description byte[] key Key (won't be cleared) Returns Type Description byte[] Key with a valid length (if the given key had a valid length already, this is a copy; should be cleared) Overrides EncryptionAlgorithmBase.EnsureValidKeyLength(byte[]) | Edit this page View Source IsKeyLengthValid(int) Determine if a key length is valid Declaration public override bool IsKeyLengthValid(int len) Parameters Type Name Description int len Key length in bytes Returns Type Description bool If the key length is valid Overrides EncryptionAlgorithmBase.IsKeyLengthValid(int) Implements wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.Extensions.html": {
    "href": "api/wan24.Crypto.BC.Extensions.html",
    "title": "Class Extensions | wan24-Crypto-BC",
    "keywords": "Class Extensions Extension methods Inheritance object Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public static class Extensions Methods | Edit this page View Source GetState(VmpcRandomGenerator) Get the internal state (you shouldn't add seed during this method is being executed!) Declaration public static byte[] GetState(this VmpcRandomGenerator rng) Parameters Type Name Description VmpcRandomGenerator rng RNG Returns Type Description byte[] Internal state | Edit this page View Source RestoreState(VmpcRandomGenerator, ReadOnlySpan<byte>) Restore the internal state (you shouldn't add seed during this method is being executed!) Declaration public static void RestoreState(this VmpcRandomGenerator rng, ReadOnlySpan<byte> state) Parameters Type Name Description VmpcRandomGenerator rng RNG ReadOnlySpan<byte> state Stored internal state | Edit this page View Source ToX25519PrivateKey(Ed25519PrivateKeyParameters) Convert to Org.BouncyCastle.Crypto.Parameters.X25519PrivateKeyParameters Declaration public static X25519PrivateKeyParameters ToX25519PrivateKey(this Ed25519PrivateKeyParameters key) Parameters Type Name Description Ed25519PrivateKeyParameters key Private key Returns Type Description X25519PrivateKeyParameters X25519 private key | Edit this page View Source ToX448PrivateKey(Ed448PrivateKeyParameters) Convert to Org.BouncyCastle.Crypto.Parameters.X448PrivateKeyParameters Declaration public static X448PrivateKeyParameters ToX448PrivateKey(this Ed448PrivateKeyParameters key) Parameters Type Name Description Ed448PrivateKeyParameters key Private key Returns Type Description X448PrivateKeyParameters X448 private key"
  },
  "api/wan24.Crypto.BC.HashBcSha3_256Algorithm.SHA3_256.html": {
    "href": "api/wan24.Crypto.BC.HashBcSha3_256Algorithm.SHA3_256.html",
    "title": "Class HashBcSha3_256Algorithm.SHA3_256 | wan24-Crypto-BC",
    "keywords": "Class HashBcSha3_256Algorithm.SHA3_256 SHA3-256 Inheritance object HashAlgorithm BouncyCastleHashAlgorithm HashBcSha3_256Algorithm.SHA3_256 Implements ICryptoTransform IDisposable Inherited Members BouncyCastleHashAlgorithm.HashSize BouncyCastleHashAlgorithm.Initialize() HashAlgorithm.Clear() HashAlgorithm.ComputeHash(byte[]) HashAlgorithm.ComputeHash(byte[], int, int) HashAlgorithm.ComputeHash(Stream) HashAlgorithm.ComputeHashAsync(Stream, CancellationToken) HashAlgorithm.Create() HashAlgorithm.Create(string) HashAlgorithm.Dispose() HashAlgorithm.TransformBlock(byte[], int, int, byte[], int) HashAlgorithm.TransformFinalBlock(byte[], int, int) HashAlgorithm.TryComputeHash(ReadOnlySpan<byte>, Span<byte>, out int) HashAlgorithm.CanReuseTransform HashAlgorithm.CanTransformMultipleBlocks HashAlgorithm.Hash HashAlgorithm.InputBlockSize HashAlgorithm.OutputBlockSize object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed class HashBcSha3_256Algorithm.SHA3_256 : BouncyCastleHashAlgorithm, ICryptoTransform, IDisposable Constructors | Edit this page View Source SHA3_256() SHA3-256 Declaration public SHA3_256() Methods | Edit this page View Source Register() Register to the CryptoConfig Declaration public static void Register() Implements ICryptoTransform IDisposable"
  },
  "api/wan24.Crypto.BC.HashBcSha3_256Algorithm.html": {
    "href": "api/wan24.Crypto.BC.HashBcSha3_256Algorithm.html",
    "title": "Class HashBcSha3_256Algorithm | wan24-Crypto-BC",
    "keywords": "Class HashBcSha3_256Algorithm SHA3-256 hash algorithm (may be used as replacement, if the .NET algorithm isn't available on the current platform) Inheritance object CryptoAlgorithmBase HashAlgorithmBase BouncyCastleHashAlgorithmBase<HashBcSha3_256Algorithm> HashBcSha3_256Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<HashAlgorithmBase> IEquatable<BouncyCastleHashAlgorithmBase<HashBcSha3_256Algorithm>> IEquatable<HashBcSha3_256Algorithm> Inherited Members BouncyCastleHashAlgorithmBase<HashBcSha3_256Algorithm>.Instance BouncyCastleHashAlgorithmBase<HashBcSha3_256Algorithm>.Register() HashAlgorithmBase.EnsureDefaultOptions(CryptoOptions) HashAlgorithmBase.GetHashAlgorithm(CryptoOptions) HashAlgorithmBase.GetHashStream(Stream, bool, CryptoOptions) HashAlgorithmBase.Hash(byte[], CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, Span<byte>, CryptoOptions) HashAlgorithmBase.Hash(Stream, CryptoOptions) HashAlgorithmBase.HashAsync(Stream, CryptoOptions, CancellationToken) HashAlgorithmBase.ToString() HashAlgorithmBase.GetHashCode() HashAlgorithmBase.Equals(object) HashAlgorithmBase.Equals(CryptoAlgorithmBase) HashAlgorithmBase.Equals(HashAlgorithmBase) HashAlgorithmBase.<Clone>$() HashAlgorithmBase.DefaultOptions HashAlgorithmBase.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record HashBcSha3_256Algorithm : BouncyCastleHashAlgorithmBase<HashBcSha3_256Algorithm>, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<HashAlgorithmBase>, IEquatable<BouncyCastleHashAlgorithmBase<HashBcSha3_256Algorithm>>, IEquatable<HashBcSha3_256Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"SHA3-256\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 5 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"SHA3-256\" Field Value Type Description string | Edit this page View Source HASH_LENGTH Hash length in bytes Declaration public const int HASH_LENGTH = 32 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source HashLength Hash length in bytes Declaration public override int HashLength { get; } Property Value Type Description int Overrides wan24.Crypto.HashAlgorithmBase.HashLength | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides wan24.Crypto.CryptoAlgorithmBase.IsPostQuantum Methods | Edit this page View Source GetHashAlgorithmInt(CryptoOptions?) Get the hash algorithm Declaration protected override HashAlgorithm GetHashAlgorithmInt(CryptoOptions? options) Parameters Type Name Description CryptoOptions options Options Returns Type Description HashAlgorithm Algorithm Overrides wan24.Crypto.HashAlgorithmBase.GetHashAlgorithmInt(wan24.Crypto.CryptoOptions) Implements wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.HashBcSha3_384Algorithm.SHA3_384.html": {
    "href": "api/wan24.Crypto.BC.HashBcSha3_384Algorithm.SHA3_384.html",
    "title": "Class HashBcSha3_384Algorithm.SHA3_384 | wan24-Crypto-BC",
    "keywords": "Class HashBcSha3_384Algorithm.SHA3_384 SHA3-384 Inheritance object HashAlgorithm BouncyCastleHashAlgorithm HashBcSha3_384Algorithm.SHA3_384 Implements ICryptoTransform IDisposable Inherited Members BouncyCastleHashAlgorithm.HashSize BouncyCastleHashAlgorithm.Initialize() HashAlgorithm.Clear() HashAlgorithm.ComputeHash(byte[]) HashAlgorithm.ComputeHash(byte[], int, int) HashAlgorithm.ComputeHash(Stream) HashAlgorithm.ComputeHashAsync(Stream, CancellationToken) HashAlgorithm.Create() HashAlgorithm.Create(string) HashAlgorithm.Dispose() HashAlgorithm.TransformBlock(byte[], int, int, byte[], int) HashAlgorithm.TransformFinalBlock(byte[], int, int) HashAlgorithm.TryComputeHash(ReadOnlySpan<byte>, Span<byte>, out int) HashAlgorithm.CanReuseTransform HashAlgorithm.CanTransformMultipleBlocks HashAlgorithm.Hash HashAlgorithm.InputBlockSize HashAlgorithm.OutputBlockSize object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed class HashBcSha3_384Algorithm.SHA3_384 : BouncyCastleHashAlgorithm, ICryptoTransform, IDisposable Constructors | Edit this page View Source SHA3_384() SHA3-384 Declaration public SHA3_384() Methods | Edit this page View Source Register() Register to the CryptoConfig Declaration public static void Register() Implements ICryptoTransform IDisposable"
  },
  "api/wan24.Crypto.BC.HashBcSha3_384Algorithm.html": {
    "href": "api/wan24.Crypto.BC.HashBcSha3_384Algorithm.html",
    "title": "Class HashBcSha3_384Algorithm | wan24-Crypto-BC",
    "keywords": "Class HashBcSha3_384Algorithm SHA3-384 hash algorithm (may be used as replacement, if the .NET algorithm isn't available on the current platform) Inheritance object CryptoAlgorithmBase HashAlgorithmBase BouncyCastleHashAlgorithmBase<HashBcSha3_384Algorithm> HashBcSha3_384Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<HashAlgorithmBase> IEquatable<BouncyCastleHashAlgorithmBase<HashBcSha3_384Algorithm>> IEquatable<HashBcSha3_384Algorithm> Inherited Members BouncyCastleHashAlgorithmBase<HashBcSha3_384Algorithm>.Instance BouncyCastleHashAlgorithmBase<HashBcSha3_384Algorithm>.Register() HashAlgorithmBase.EnsureDefaultOptions(CryptoOptions) HashAlgorithmBase.GetHashAlgorithm(CryptoOptions) HashAlgorithmBase.GetHashStream(Stream, bool, CryptoOptions) HashAlgorithmBase.Hash(byte[], CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, Span<byte>, CryptoOptions) HashAlgorithmBase.Hash(Stream, CryptoOptions) HashAlgorithmBase.HashAsync(Stream, CryptoOptions, CancellationToken) HashAlgorithmBase.ToString() HashAlgorithmBase.GetHashCode() HashAlgorithmBase.Equals(object) HashAlgorithmBase.Equals(CryptoAlgorithmBase) HashAlgorithmBase.Equals(HashAlgorithmBase) HashAlgorithmBase.<Clone>$() HashAlgorithmBase.DefaultOptions HashAlgorithmBase.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record HashBcSha3_384Algorithm : BouncyCastleHashAlgorithmBase<HashBcSha3_384Algorithm>, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<HashAlgorithmBase>, IEquatable<BouncyCastleHashAlgorithmBase<HashBcSha3_384Algorithm>>, IEquatable<HashBcSha3_384Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"SHA3-384\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 6 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"SHA3-384\" Field Value Type Description string | Edit this page View Source HASH_LENGTH Hash length in bytes Declaration public const int HASH_LENGTH = 48 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source HashLength Hash length in bytes Declaration public override int HashLength { get; } Property Value Type Description int Overrides wan24.Crypto.HashAlgorithmBase.HashLength | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides wan24.Crypto.CryptoAlgorithmBase.IsPostQuantum Methods | Edit this page View Source GetHashAlgorithmInt(CryptoOptions?) Get the hash algorithm Declaration protected override HashAlgorithm GetHashAlgorithmInt(CryptoOptions? options) Parameters Type Name Description CryptoOptions options Options Returns Type Description HashAlgorithm Algorithm Overrides wan24.Crypto.HashAlgorithmBase.GetHashAlgorithmInt(wan24.Crypto.CryptoOptions) Implements wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.HashBcSha3_512Algorithm.SHA3_512.html": {
    "href": "api/wan24.Crypto.BC.HashBcSha3_512Algorithm.SHA3_512.html",
    "title": "Class HashBcSha3_512Algorithm.SHA3_512 | wan24-Crypto-BC",
    "keywords": "Class HashBcSha3_512Algorithm.SHA3_512 SHA3-512 Inheritance object HashAlgorithm BouncyCastleHashAlgorithm HashBcSha3_512Algorithm.SHA3_512 Implements ICryptoTransform IDisposable Inherited Members BouncyCastleHashAlgorithm.HashSize BouncyCastleHashAlgorithm.Initialize() HashAlgorithm.Clear() HashAlgorithm.ComputeHash(byte[]) HashAlgorithm.ComputeHash(byte[], int, int) HashAlgorithm.ComputeHash(Stream) HashAlgorithm.ComputeHashAsync(Stream, CancellationToken) HashAlgorithm.Create() HashAlgorithm.Create(string) HashAlgorithm.Dispose() HashAlgorithm.TransformBlock(byte[], int, int, byte[], int) HashAlgorithm.TransformFinalBlock(byte[], int, int) HashAlgorithm.TryComputeHash(ReadOnlySpan<byte>, Span<byte>, out int) HashAlgorithm.CanReuseTransform HashAlgorithm.CanTransformMultipleBlocks HashAlgorithm.Hash HashAlgorithm.InputBlockSize HashAlgorithm.OutputBlockSize object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed class HashBcSha3_512Algorithm.SHA3_512 : BouncyCastleHashAlgorithm, ICryptoTransform, IDisposable Constructors | Edit this page View Source SHA3_512() SHA3-512 Declaration public SHA3_512() Methods | Edit this page View Source Register() Register to the CryptoConfig Declaration public static void Register() Implements ICryptoTransform IDisposable"
  },
  "api/wan24.Crypto.BC.HashBcSha3_512Algorithm.html": {
    "href": "api/wan24.Crypto.BC.HashBcSha3_512Algorithm.html",
    "title": "Class HashBcSha3_512Algorithm | wan24-Crypto-BC",
    "keywords": "Class HashBcSha3_512Algorithm SHA3-512 hash algorithm (may be used as replacement, if the .NET algorithm isn't available on the current platform) Inheritance object CryptoAlgorithmBase HashAlgorithmBase BouncyCastleHashAlgorithmBase<HashBcSha3_512Algorithm> HashBcSha3_512Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<HashAlgorithmBase> IEquatable<BouncyCastleHashAlgorithmBase<HashBcSha3_512Algorithm>> IEquatable<HashBcSha3_512Algorithm> Inherited Members BouncyCastleHashAlgorithmBase<HashBcSha3_512Algorithm>.Instance BouncyCastleHashAlgorithmBase<HashBcSha3_512Algorithm>.Register() HashAlgorithmBase.EnsureDefaultOptions(CryptoOptions) HashAlgorithmBase.GetHashAlgorithm(CryptoOptions) HashAlgorithmBase.GetHashStream(Stream, bool, CryptoOptions) HashAlgorithmBase.Hash(byte[], CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, Span<byte>, CryptoOptions) HashAlgorithmBase.Hash(Stream, CryptoOptions) HashAlgorithmBase.HashAsync(Stream, CryptoOptions, CancellationToken) HashAlgorithmBase.ToString() HashAlgorithmBase.GetHashCode() HashAlgorithmBase.Equals(object) HashAlgorithmBase.Equals(CryptoAlgorithmBase) HashAlgorithmBase.Equals(HashAlgorithmBase) HashAlgorithmBase.<Clone>$() HashAlgorithmBase.DefaultOptions HashAlgorithmBase.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record HashBcSha3_512Algorithm : BouncyCastleHashAlgorithmBase<HashBcSha3_512Algorithm>, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<HashAlgorithmBase>, IEquatable<BouncyCastleHashAlgorithmBase<HashBcSha3_512Algorithm>>, IEquatable<HashBcSha3_512Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"SHA3-512\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 7 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"SHA3-512\" Field Value Type Description string | Edit this page View Source HASH_LENGTH Hash length in bytes Declaration public const int HASH_LENGTH = 64 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source HashLength Hash length in bytes Declaration public override int HashLength { get; } Property Value Type Description int Overrides wan24.Crypto.HashAlgorithmBase.HashLength | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides wan24.Crypto.CryptoAlgorithmBase.IsPostQuantum Methods | Edit this page View Source GetHashAlgorithmInt(CryptoOptions?) Get the hash algorithm Declaration protected override HashAlgorithm GetHashAlgorithmInt(CryptoOptions? options) Parameters Type Name Description CryptoOptions options Options Returns Type Description HashAlgorithm Algorithm Overrides wan24.Crypto.HashAlgorithmBase.GetHashAlgorithmInt(wan24.Crypto.CryptoOptions) Implements wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.HashBcShake128Algorithm.html": {
    "href": "api/wan24.Crypto.BC.HashBcShake128Algorithm.html",
    "title": "Class HashBcShake128Algorithm | wan24-Crypto-BC",
    "keywords": "Class HashBcShake128Algorithm Shake128 hash algorithm (may be used as replacement, if the .NET algorithm isn't available on the current platform) Inheritance object CryptoAlgorithmBase HashAlgorithmBase BouncyCastleHashAlgorithmBase<HashBcShake128Algorithm> HashBcShake128Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<HashAlgorithmBase> IEquatable<BouncyCastleHashAlgorithmBase<HashBcShake128Algorithm>> IEquatable<HashBcShake128Algorithm> Inherited Members BouncyCastleHashAlgorithmBase<HashBcShake128Algorithm>.Instance BouncyCastleHashAlgorithmBase<HashBcShake128Algorithm>.Register() HashAlgorithmBase.EnsureDefaultOptions(CryptoOptions) HashAlgorithmBase.GetHashAlgorithm(CryptoOptions) HashAlgorithmBase.GetHashStream(Stream, bool, CryptoOptions) HashAlgorithmBase.Hash(byte[], CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, Span<byte>, CryptoOptions) HashAlgorithmBase.Hash(Stream, CryptoOptions) HashAlgorithmBase.HashAsync(Stream, CryptoOptions, CancellationToken) HashAlgorithmBase.ToString() HashAlgorithmBase.GetHashCode() HashAlgorithmBase.Equals(object) HashAlgorithmBase.Equals(CryptoAlgorithmBase) HashAlgorithmBase.Equals(HashAlgorithmBase) HashAlgorithmBase.<Clone>$() HashAlgorithmBase.DefaultOptions HashAlgorithmBase.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record HashBcShake128Algorithm : BouncyCastleHashAlgorithmBase<HashBcShake128Algorithm>, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<HashAlgorithmBase>, IEquatable<BouncyCastleHashAlgorithmBase<HashBcShake128Algorithm>>, IEquatable<HashBcShake128Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"SHAKE128\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 8 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"Shake128\" Field Value Type Description string | Edit this page View Source HASH_LENGTH Hash length in bytes Declaration public const int HASH_LENGTH = 32 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source HashLength Hash length in bytes Declaration public override int HashLength { get; } Property Value Type Description int Overrides wan24.Crypto.HashAlgorithmBase.HashLength | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides wan24.Crypto.CryptoAlgorithmBase.IsPostQuantum Methods | Edit this page View Source GetHashAlgorithmInt(CryptoOptions?) Get the hash algorithm Declaration protected override HashAlgorithm GetHashAlgorithmInt(CryptoOptions? options) Parameters Type Name Description CryptoOptions options Options Returns Type Description HashAlgorithm Algorithm Overrides wan24.Crypto.HashAlgorithmBase.GetHashAlgorithmInt(wan24.Crypto.CryptoOptions) Implements wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.HashBcShake256Algorithm.html": {
    "href": "api/wan24.Crypto.BC.HashBcShake256Algorithm.html",
    "title": "Class HashBcShake256Algorithm | wan24-Crypto-BC",
    "keywords": "Class HashBcShake256Algorithm Shake256 hash algorithm (may be used as replacement, if the .NET algorithm isn't available on the current platform) Inheritance object CryptoAlgorithmBase HashAlgorithmBase BouncyCastleHashAlgorithmBase<HashBcShake256Algorithm> HashBcShake256Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<HashAlgorithmBase> IEquatable<BouncyCastleHashAlgorithmBase<HashBcShake256Algorithm>> IEquatable<HashBcShake256Algorithm> Inherited Members BouncyCastleHashAlgorithmBase<HashBcShake256Algorithm>.Instance BouncyCastleHashAlgorithmBase<HashBcShake256Algorithm>.Register() HashAlgorithmBase.EnsureDefaultOptions(CryptoOptions) HashAlgorithmBase.GetHashAlgorithm(CryptoOptions) HashAlgorithmBase.GetHashStream(Stream, bool, CryptoOptions) HashAlgorithmBase.Hash(byte[], CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, CryptoOptions) HashAlgorithmBase.Hash(ReadOnlySpan<byte>, Span<byte>, CryptoOptions) HashAlgorithmBase.Hash(Stream, CryptoOptions) HashAlgorithmBase.HashAsync(Stream, CryptoOptions, CancellationToken) HashAlgorithmBase.ToString() HashAlgorithmBase.GetHashCode() HashAlgorithmBase.Equals(object) HashAlgorithmBase.Equals(CryptoAlgorithmBase) HashAlgorithmBase.Equals(HashAlgorithmBase) HashAlgorithmBase.<Clone>$() HashAlgorithmBase.DefaultOptions HashAlgorithmBase.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record HashBcShake256Algorithm : BouncyCastleHashAlgorithmBase<HashBcShake256Algorithm>, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<HashAlgorithmBase>, IEquatable<BouncyCastleHashAlgorithmBase<HashBcShake256Algorithm>>, IEquatable<HashBcShake256Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"SHAKE256\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 9 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"Shake256\" Field Value Type Description string | Edit this page View Source HASH_LENGTH Hash length in bytes Declaration public const int HASH_LENGTH = 64 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source HashLength Hash length in bytes Declaration public override int HashLength { get; } Property Value Type Description int Overrides wan24.Crypto.HashAlgorithmBase.HashLength | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides wan24.Crypto.CryptoAlgorithmBase.IsPostQuantum Methods | Edit this page View Source GetHashAlgorithmInt(CryptoOptions?) Get the hash algorithm Declaration protected override HashAlgorithm GetHashAlgorithmInt(CryptoOptions? options) Parameters Type Name Description CryptoOptions options Options Returns Type Description HashAlgorithm Algorithm Overrides wan24.Crypto.HashAlgorithmBase.GetHashAlgorithmInt(wan24.Crypto.CryptoOptions) Implements wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.IBouncyCastleRng.html": {
    "href": "api/wan24.Crypto.BC.IBouncyCastleRng.html",
    "title": "Interface IBouncyCastleRng | wan24-Crypto-BC",
    "keywords": "Interface IBouncyCastleRng Interface for a seedable Bouncy Castle supporting RNG Inherited Members IRandomGenerator.AddSeedMaterial(byte[]) IRandomGenerator.AddSeedMaterial(ReadOnlySpan<byte>) IRandomGenerator.AddSeedMaterial(long) IRandomGenerator.NextBytes(byte[]) IRandomGenerator.NextBytes(byte[], int, int) IRandomGenerator.NextBytes(Span<byte>) IRng.GetBytes(in int) IRng.GetBytesAsync(int, CancellationToken) IRng.FillBytes(in Span<byte>) IRng.FillBytesAsync(Memory<byte>, CancellationToken) ISeedConsumer.AddSeed(ReadOnlySpan<byte>) ISeedConsumer.AddSeedAsync(ReadOnlyMemory<byte>, CancellationToken) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public interface IBouncyCastleRng : IRandomGenerator, ISeedableRng, IRng, ISeedConsumer"
  },
  "api/wan24.Crypto.BC.MacBcHmacSha3_256Algorithm.HMACSHA3_256.html": {
    "href": "api/wan24.Crypto.BC.MacBcHmacSha3_256Algorithm.HMACSHA3_256.html",
    "title": "Class MacBcHmacSha3_256Algorithm.HMACSHA3_256 | wan24-Crypto-BC",
    "keywords": "Class MacBcHmacSha3_256Algorithm.HMACSHA3_256 HMACSHA3-256 Inheritance object HashAlgorithm KeyedHashAlgorithm BouncyCastleHmacAlgorithm MacBcHmacSha3_256Algorithm.HMACSHA3_256 Implements ICryptoTransform IDisposable Inherited Members BouncyCastleHmacAlgorithm.Initialize() KeyedHashAlgorithm.Create() KeyedHashAlgorithm.Create(string) KeyedHashAlgorithm.Key HashAlgorithm.Clear() HashAlgorithm.ComputeHash(byte[]) HashAlgorithm.ComputeHash(byte[], int, int) HashAlgorithm.ComputeHash(Stream) HashAlgorithm.ComputeHashAsync(Stream, CancellationToken) HashAlgorithm.Dispose() HashAlgorithm.TransformBlock(byte[], int, int, byte[], int) HashAlgorithm.TransformFinalBlock(byte[], int, int) HashAlgorithm.TryComputeHash(ReadOnlySpan<byte>, Span<byte>, out int) HashAlgorithm.CanReuseTransform HashAlgorithm.CanTransformMultipleBlocks HashAlgorithm.Hash HashAlgorithm.HashSize HashAlgorithm.InputBlockSize HashAlgorithm.OutputBlockSize object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed class MacBcHmacSha3_256Algorithm.HMACSHA3_256 : BouncyCastleHmacAlgorithm, ICryptoTransform, IDisposable Constructors | Edit this page View Source HMACSHA3_256(byte[]) Constructor Declaration public HMACSHA3_256(byte[] pwd) Parameters Type Name Description byte[] pwd Password Methods | Edit this page View Source Register() Register to the CryptoConfig Declaration public static void Register() Implements ICryptoTransform IDisposable"
  },
  "api/wan24.Crypto.BC.MacBcHmacSha3_256Algorithm.html": {
    "href": "api/wan24.Crypto.BC.MacBcHmacSha3_256Algorithm.html",
    "title": "Class MacBcHmacSha3_256Algorithm | wan24-Crypto-BC",
    "keywords": "Class MacBcHmacSha3_256Algorithm HMAC-SHA3-256 MAC algorithm (may be used as replacement, if the .NET algorithm isn't available on the current platform) Inheritance object CryptoAlgorithmBase MacAlgorithmBase BouncyCastleHmacAlgorithmBase<MacBcHmacSha3_256Algorithm> MacBcHmacSha3_256Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<MacAlgorithmBase> IEquatable<BouncyCastleHmacAlgorithmBase<MacBcHmacSha3_256Algorithm>> IEquatable<MacBcHmacSha3_256Algorithm> Inherited Members BouncyCastleHmacAlgorithmBase<MacBcHmacSha3_256Algorithm>.Instance BouncyCastleHmacAlgorithmBase<MacBcHmacSha3_256Algorithm>.Register() MacAlgorithmBase.EnsureDefaultOptions(CryptoOptions) MacAlgorithmBase.GetMacAlgorithm(byte[], CryptoOptions) MacAlgorithmBase.GetMacStream(byte[], Stream, bool, CryptoOptions) MacAlgorithmBase.Mac(ReadOnlySpan<byte>, byte[], CryptoOptions) MacAlgorithmBase.Mac(ReadOnlySpan<byte>, byte[], Span<byte>, CryptoOptions) MacAlgorithmBase.Mac(Stream, byte[], CryptoOptions) MacAlgorithmBase.MacAsync(Stream, byte[], CryptoOptions, CancellationToken) MacAlgorithmBase.ToString() MacAlgorithmBase.GetHashCode() MacAlgorithmBase.Equals(object) MacAlgorithmBase.Equals(CryptoAlgorithmBase) MacAlgorithmBase.Equals(MacAlgorithmBase) MacAlgorithmBase.<Clone>$() MacAlgorithmBase.DefaultOptions MacAlgorithmBase.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record MacBcHmacSha3_256Algorithm : BouncyCastleHmacAlgorithmBase<MacBcHmacSha3_256Algorithm>, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<MacAlgorithmBase>, IEquatable<BouncyCastleHmacAlgorithmBase<MacBcHmacSha3_256Algorithm>>, IEquatable<MacBcHmacSha3_256Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"HMAC-SHA3-256\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 4 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"HMAC SHA3-256\" Field Value Type Description string | Edit this page View Source MAC_LENGTH MAC length in bytes Declaration public const int MAC_LENGTH = 32 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides wan24.Crypto.CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source MacLength MAC length in bytes Declaration public override int MacLength { get; } Property Value Type Description int Overrides wan24.Crypto.MacAlgorithmBase.MacLength Methods | Edit this page View Source GetMacAlgorithmInt(byte[], CryptoOptions?) Get the MAC algorithm Declaration protected override KeyedHashAlgorithm GetMacAlgorithmInt(byte[] pwd, CryptoOptions? options) Parameters Type Name Description byte[] pwd Password CryptoOptions options Options Returns Type Description KeyedHashAlgorithm Algorithm Overrides MacAlgorithmBase.GetMacAlgorithmInt(byte[], CryptoOptions) Implements wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.MacBcHmacSha3_384Algorithm.HMACSHA3_384.html": {
    "href": "api/wan24.Crypto.BC.MacBcHmacSha3_384Algorithm.HMACSHA3_384.html",
    "title": "Class MacBcHmacSha3_384Algorithm.HMACSHA3_384 | wan24-Crypto-BC",
    "keywords": "Class MacBcHmacSha3_384Algorithm.HMACSHA3_384 HMACSHA3-384 Inheritance object HashAlgorithm KeyedHashAlgorithm BouncyCastleHmacAlgorithm MacBcHmacSha3_384Algorithm.HMACSHA3_384 Implements ICryptoTransform IDisposable Inherited Members BouncyCastleHmacAlgorithm.Initialize() KeyedHashAlgorithm.Create() KeyedHashAlgorithm.Create(string) KeyedHashAlgorithm.Key HashAlgorithm.Clear() HashAlgorithm.ComputeHash(byte[]) HashAlgorithm.ComputeHash(byte[], int, int) HashAlgorithm.ComputeHash(Stream) HashAlgorithm.ComputeHashAsync(Stream, CancellationToken) HashAlgorithm.Dispose() HashAlgorithm.TransformBlock(byte[], int, int, byte[], int) HashAlgorithm.TransformFinalBlock(byte[], int, int) HashAlgorithm.TryComputeHash(ReadOnlySpan<byte>, Span<byte>, out int) HashAlgorithm.CanReuseTransform HashAlgorithm.CanTransformMultipleBlocks HashAlgorithm.Hash HashAlgorithm.HashSize HashAlgorithm.InputBlockSize HashAlgorithm.OutputBlockSize object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed class MacBcHmacSha3_384Algorithm.HMACSHA3_384 : BouncyCastleHmacAlgorithm, ICryptoTransform, IDisposable Constructors | Edit this page View Source HMACSHA3_384(byte[]) Constructor Declaration public HMACSHA3_384(byte[] pwd) Parameters Type Name Description byte[] pwd Password Methods | Edit this page View Source Register() Register to the CryptoConfig Declaration public static void Register() Implements ICryptoTransform IDisposable"
  },
  "api/wan24.Crypto.BC.MacBcHmacSha3_384Algorithm.html": {
    "href": "api/wan24.Crypto.BC.MacBcHmacSha3_384Algorithm.html",
    "title": "Class MacBcHmacSha3_384Algorithm | wan24-Crypto-BC",
    "keywords": "Class MacBcHmacSha3_384Algorithm HMAC-SHA3-384 MAC algorithm (may be used as replacement, if the .NET algorithm isn't available on the current platform) Inheritance object CryptoAlgorithmBase MacAlgorithmBase BouncyCastleHmacAlgorithmBase<MacBcHmacSha3_384Algorithm> MacBcHmacSha3_384Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<MacAlgorithmBase> IEquatable<BouncyCastleHmacAlgorithmBase<MacBcHmacSha3_384Algorithm>> IEquatable<MacBcHmacSha3_384Algorithm> Inherited Members BouncyCastleHmacAlgorithmBase<MacBcHmacSha3_384Algorithm>.Instance BouncyCastleHmacAlgorithmBase<MacBcHmacSha3_384Algorithm>.Register() MacAlgorithmBase.EnsureDefaultOptions(CryptoOptions) MacAlgorithmBase.GetMacAlgorithm(byte[], CryptoOptions) MacAlgorithmBase.GetMacStream(byte[], Stream, bool, CryptoOptions) MacAlgorithmBase.Mac(ReadOnlySpan<byte>, byte[], CryptoOptions) MacAlgorithmBase.Mac(ReadOnlySpan<byte>, byte[], Span<byte>, CryptoOptions) MacAlgorithmBase.Mac(Stream, byte[], CryptoOptions) MacAlgorithmBase.MacAsync(Stream, byte[], CryptoOptions, CancellationToken) MacAlgorithmBase.ToString() MacAlgorithmBase.GetHashCode() MacAlgorithmBase.Equals(object) MacAlgorithmBase.Equals(CryptoAlgorithmBase) MacAlgorithmBase.Equals(MacAlgorithmBase) MacAlgorithmBase.<Clone>$() MacAlgorithmBase.DefaultOptions MacAlgorithmBase.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record MacBcHmacSha3_384Algorithm : BouncyCastleHmacAlgorithmBase<MacBcHmacSha3_384Algorithm>, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<MacAlgorithmBase>, IEquatable<BouncyCastleHmacAlgorithmBase<MacBcHmacSha3_384Algorithm>>, IEquatable<MacBcHmacSha3_384Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"HMAC-SHA3-384\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 5 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"HMAC SHA3-384\" Field Value Type Description string | Edit this page View Source MAC_LENGTH MAC length in bytes Declaration public const int MAC_LENGTH = 48 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides wan24.Crypto.CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source MacLength MAC length in bytes Declaration public override int MacLength { get; } Property Value Type Description int Overrides wan24.Crypto.MacAlgorithmBase.MacLength Methods | Edit this page View Source GetMacAlgorithmInt(byte[], CryptoOptions?) Get the MAC algorithm Declaration protected override KeyedHashAlgorithm GetMacAlgorithmInt(byte[] pwd, CryptoOptions? options) Parameters Type Name Description byte[] pwd Password CryptoOptions options Options Returns Type Description KeyedHashAlgorithm Algorithm Overrides MacAlgorithmBase.GetMacAlgorithmInt(byte[], CryptoOptions) Implements wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.MacBcHmacSha3_512Algorithm.HMACSHA3_512.html": {
    "href": "api/wan24.Crypto.BC.MacBcHmacSha3_512Algorithm.HMACSHA3_512.html",
    "title": "Class MacBcHmacSha3_512Algorithm.HMACSHA3_512 | wan24-Crypto-BC",
    "keywords": "Class MacBcHmacSha3_512Algorithm.HMACSHA3_512 HMACSHA3-512 Inheritance object HashAlgorithm KeyedHashAlgorithm BouncyCastleHmacAlgorithm MacBcHmacSha3_512Algorithm.HMACSHA3_512 Implements ICryptoTransform IDisposable Inherited Members BouncyCastleHmacAlgorithm.Initialize() KeyedHashAlgorithm.Create() KeyedHashAlgorithm.Create(string) KeyedHashAlgorithm.Key HashAlgorithm.Clear() HashAlgorithm.ComputeHash(byte[]) HashAlgorithm.ComputeHash(byte[], int, int) HashAlgorithm.ComputeHash(Stream) HashAlgorithm.ComputeHashAsync(Stream, CancellationToken) HashAlgorithm.Dispose() HashAlgorithm.TransformBlock(byte[], int, int, byte[], int) HashAlgorithm.TransformFinalBlock(byte[], int, int) HashAlgorithm.TryComputeHash(ReadOnlySpan<byte>, Span<byte>, out int) HashAlgorithm.CanReuseTransform HashAlgorithm.CanTransformMultipleBlocks HashAlgorithm.Hash HashAlgorithm.HashSize HashAlgorithm.InputBlockSize HashAlgorithm.OutputBlockSize object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed class MacBcHmacSha3_512Algorithm.HMACSHA3_512 : BouncyCastleHmacAlgorithm, ICryptoTransform, IDisposable Constructors | Edit this page View Source HMACSHA3_512(byte[]) Constructor Declaration public HMACSHA3_512(byte[] pwd) Parameters Type Name Description byte[] pwd Password Methods | Edit this page View Source Register() Register to the CryptoConfig Declaration public static void Register() Implements ICryptoTransform IDisposable"
  },
  "api/wan24.Crypto.BC.MacBcHmacSha3_512Algorithm.html": {
    "href": "api/wan24.Crypto.BC.MacBcHmacSha3_512Algorithm.html",
    "title": "Class MacBcHmacSha3_512Algorithm | wan24-Crypto-BC",
    "keywords": "Class MacBcHmacSha3_512Algorithm HMAC-SHA3-512 MAC algorithm (may be used as replacement, if the .NET algorithm isn't available on the current platform) Inheritance object CryptoAlgorithmBase MacAlgorithmBase BouncyCastleHmacAlgorithmBase<MacBcHmacSha3_512Algorithm> MacBcHmacSha3_512Algorithm Implements ICryptoAlgorithm IStatusProvider IEquatable<CryptoAlgorithmBase> IEquatable<MacAlgorithmBase> IEquatable<BouncyCastleHmacAlgorithmBase<MacBcHmacSha3_512Algorithm>> IEquatable<MacBcHmacSha3_512Algorithm> Inherited Members BouncyCastleHmacAlgorithmBase<MacBcHmacSha3_512Algorithm>.Instance BouncyCastleHmacAlgorithmBase<MacBcHmacSha3_512Algorithm>.Register() MacAlgorithmBase.EnsureDefaultOptions(CryptoOptions) MacAlgorithmBase.GetMacAlgorithm(byte[], CryptoOptions) MacAlgorithmBase.GetMacStream(byte[], Stream, bool, CryptoOptions) MacAlgorithmBase.Mac(ReadOnlySpan<byte>, byte[], CryptoOptions) MacAlgorithmBase.Mac(ReadOnlySpan<byte>, byte[], Span<byte>, CryptoOptions) MacAlgorithmBase.Mac(Stream, byte[], CryptoOptions) MacAlgorithmBase.MacAsync(Stream, byte[], CryptoOptions, CancellationToken) MacAlgorithmBase.ToString() MacAlgorithmBase.GetHashCode() MacAlgorithmBase.Equals(object) MacAlgorithmBase.Equals(CryptoAlgorithmBase) MacAlgorithmBase.Equals(MacAlgorithmBase) MacAlgorithmBase.<Clone>$() MacAlgorithmBase.DefaultOptions MacAlgorithmBase.State CryptoAlgorithmBase.EnsureAllowed(in bool) CryptoAlgorithmBase.Name CryptoAlgorithmBase.Value CryptoAlgorithmBase.UsesTpm CryptoAlgorithmBase.IsSupported object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed record MacBcHmacSha3_512Algorithm : BouncyCastleHmacAlgorithmBase<MacBcHmacSha3_512Algorithm>, ICryptoAlgorithm, IStatusProvider, IEquatable<CryptoAlgorithmBase>, IEquatable<MacAlgorithmBase>, IEquatable<BouncyCastleHmacAlgorithmBase<MacBcHmacSha3_512Algorithm>>, IEquatable<MacBcHmacSha3_512Algorithm> Fields | Edit this page View Source ALGORITHM_NAME Algorithm name Declaration public const string ALGORITHM_NAME = \"HMAC-SHA3-512\" Field Value Type Description string | Edit this page View Source ALGORITHM_VALUE Algorithm value Declaration public const int ALGORITHM_VALUE = 6 Field Value Type Description int | Edit this page View Source DISPLAY_NAME Display name Declaration public const string DISPLAY_NAME = \"HMAC SHA3-512\" Field Value Type Description string | Edit this page View Source MAC_LENGTH MAC length in bytes Declaration public const int MAC_LENGTH = 64 Field Value Type Description int Properties | Edit this page View Source DisplayName Display name Declaration public override string DisplayName { get; } Property Value Type Description string Overrides wan24.Crypto.CryptoAlgorithmBase.DisplayName | Edit this page View Source IsPostQuantum Is a post quantum algorithm (\"post quantum-safe\")? Declaration public override bool IsPostQuantum { get; } Property Value Type Description bool Overrides wan24.Crypto.CryptoAlgorithmBase.IsPostQuantum | Edit this page View Source MacLength MAC length in bytes Declaration public override int MacLength { get; } Property Value Type Description int Overrides wan24.Crypto.MacAlgorithmBase.MacLength Methods | Edit this page View Source GetMacAlgorithmInt(byte[], CryptoOptions?) Get the MAC algorithm Declaration protected override KeyedHashAlgorithm GetMacAlgorithmInt(byte[] pwd, CryptoOptions? options) Parameters Type Name Description byte[] pwd Password CryptoOptions options Options Returns Type Description KeyedHashAlgorithm Algorithm Overrides MacAlgorithmBase.GetMacAlgorithmInt(byte[], CryptoOptions) Implements wan24.Crypto.ICryptoAlgorithm wan24.Core.IStatusProvider IEquatable<T> IEquatable<T> IEquatable<T> IEquatable<T>"
  },
  "api/wan24.Crypto.BC.RandomDataProvider.SeedEventArgs.html": {
    "href": "api/wan24.Crypto.BC.RandomDataProvider.SeedEventArgs.html",
    "title": "Class RandomDataProvider.SeedEventArgs | wan24-Crypto-BC",
    "keywords": "Class RandomDataProvider.SeedEventArgs OnSeed event arguments Inheritance object EventArgs RandomDataProvider.SeedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public class RandomDataProvider.SeedEventArgs : EventArgs Constructors | Edit this page View Source SeedEventArgs() Constructor Declaration public SeedEventArgs() | Edit this page View Source SeedEventArgs(in ReadOnlyMemory<byte>) Constructor Declaration public SeedEventArgs(in ReadOnlyMemory<byte> seed) Parameters Type Name Description ReadOnlyMemory<byte> seed Seed Properties | Edit this page View Source Seed Seed Declaration public ReadOnlyMemory<byte> Seed { get; } Property Value Type Description ReadOnlyMemory<byte>"
  },
  "api/wan24.Crypto.BC.RandomDataProvider.Seed_Delegate.html": {
    "href": "api/wan24.Crypto.BC.RandomDataProvider.Seed_Delegate.html",
    "title": "Delegate RandomDataProvider.Seed_Delegate | wan24-Crypto-BC",
    "keywords": "Delegate RandomDataProvider.Seed_Delegate Delegate for a seed handler Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public delegate void RandomDataProvider.Seed_Delegate(RandomDataProvider rnp, RandomDataProvider.SeedEventArgs e) Parameters Type Name Description RandomDataProvider rnp Random number provider RandomDataProvider.SeedEventArgs e Arguments"
  },
  "api/wan24.Crypto.BC.RandomDataProvider.html": {
    "href": "api/wan24.Crypto.BC.RandomDataProvider.html",
    "title": "Class RandomDataProvider | wan24-Crypto-BC",
    "keywords": "Class RandomDataProvider Random data provider Inheritance object DisposableBase HostedServiceBase RandomDataGenerator RandomDataProvider Implements IWillDispose IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IBouncyCastleRng IRandomGenerator ISeedableRng IRng ISeedConsumer Inherited Members RandomDataGenerator.RandomData RandomDataGenerator.UseRng RandomDataGenerator.Rng RandomDataGenerator.RngAsync RandomDataGenerator.GetBytes(in int) RandomDataGenerator.GetBytesAsync(int, CancellationToken) RandomDataGenerator.FillBytes(in Span<byte>) RandomDataGenerator.FillBytesAsync(Memory<byte>, CancellationToken) RandomDataGenerator.Fill(in Span<byte>) RandomDataGenerator.FillAsync(Memory<byte>) RandomDataGenerator.UseFallback RandomDataGenerator.UseDevRandom HostedServiceBase.Sync HostedServiceBase.RunEvent HostedServiceBase.PauseEvent HostedServiceBase.StopTask HostedServiceBase.Cancellation HostedServiceBase.ServiceTask HostedServiceBase._LastException HostedServiceBase.StartAsync(CancellationToken) HostedServiceBase.StopAsync(CancellationToken) HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.BeforeStartAsync(CancellationToken) HostedServiceBase.StartingAsync(CancellationToken) HostedServiceBase.AfterStartAsync(CancellationToken) HostedServiceBase.BeforeStopAsync(CancellationToken) HostedServiceBase.StoppingAsync(CancellationToken) HostedServiceBase.AfterStopAsync(CancellationToken) HostedServiceBase.BeforePauseAsync(CancellationToken) HostedServiceBase.PausingAsync(CancellationToken) HostedServiceBase.AfterPauseAsync(CancellationToken) HostedServiceBase.BeforeResumeAsync(CancellationToken) HostedServiceBase.ResumingAsync(CancellationToken) HostedServiceBase.AfterResumeAsync(CancellationToken) HostedServiceBase.RunServiceAsync() HostedServiceBase.EnsureNotCanceled(in bool) HostedServiceBase.EnsureRunning(in bool) HostedServiceBase.RaiseOnException() HostedServiceBase.CanPause HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.CancelToken HostedServiceBase.OnException DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public class RandomDataProvider : RandomDataGenerator, IWillDispose, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IBouncyCastleRng, IRandomGenerator, ISeedableRng, IRng, ISeedConsumer Constructors | Edit this page View Source RandomDataProvider(in int, in RandomDataProvider?, in int?, in int?, in ISeedableRng?) Constructor Declaration public RandomDataProvider(in int capacity, in RandomDataProvider? rdp = null, in int? seed = null, in int? workerBufferSize = null, in ISeedableRng? rng = null) Parameters Type Name Description int capacity Buffer capacity in bytes RandomDataProvider rdp Random data provider to attach to (will be used for seeding, if available - otherwise fallback to wan24.Crypto.RND) int? seed Initial seed length in bytes int? workerBufferSize Worker buffer size in bytes ISeedableRng rng RNG to use (will be disposed) | Edit this page View Source RandomDataProvider(in RandomDataProvider?, in int, in int?, in ISeedableRng?) Constructor Declaration protected RandomDataProvider(in RandomDataProvider? rdp, in int capacity, in int? workerBufferSize, in ISeedableRng? rng = null) Parameters Type Name Description RandomDataProvider rdp Random data provider to attach to (will be used for seeding, if available - otherwise fallback to wan24.Crypto.RND) int capacity Buffer capacity in bytes int? workerBufferSize Worker buffer size in bytes ISeedableRng rng RNG to use (will be disposed, if possible) Fields | Edit this page View Source DidInit Did initialize? Declaration protected bool DidInit Field Value Type Description bool | Edit this page View Source RNG Random number generator (will be disposed) Declaration protected readonly ISeedableRng RNG Field Value Type Description ISeedableRng | Edit this page View Source RngSync RNG synchronization Declaration protected readonly SemaphoreSync RngSync Field Value Type Description SemaphoreSync | Edit this page View Source SeedProvider Seed provider Declaration protected readonly RandomDataProvider? SeedProvider Field Value Type Description RandomDataProvider | Edit this page View Source _OnSeedAsync Raised when seeded Declaration protected readonly AsyncEvent<RandomDataProvider, RandomDataProvider.SeedEventArgs> _OnSeedAsync Field Value Type Description AsyncEvent<RandomDataProvider, RandomDataProvider.SeedEventArgs> Properties | Edit this page View Source OnSeedAsync Raised when seeded Declaration public AsyncEvent<RandomDataProvider, RandomDataProvider.SeedEventArgs> OnSeedAsync { get; set; } Property Value Type Description AsyncEvent<RandomDataProvider, RandomDataProvider.SeedEventArgs> | Edit this page View Source WorkerBufferSize Worker buffer size in bytes Declaration public int WorkerBufferSize { get; } Property Value Type Description int Methods | Edit this page View Source AddSeed(ReadOnlySpan<byte>) Add seed to the RNG Declaration public override void AddSeed(ReadOnlySpan<byte> seed) Parameters Type Name Description ReadOnlySpan<byte> seed Seed Overrides RandomDataGenerator.AddSeed(ReadOnlySpan<byte>) | Edit this page View Source AddSeedAsync(ReadOnlyMemory<byte>, CancellationToken) Add seed to the RNG Declaration public override Task AddSeedAsync(ReadOnlyMemory<byte> seed, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> seed Seed CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides RandomDataGenerator.AddSeedAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source CreateAsync(int, RandomDataProvider?, int?, int?, ISeedableRng?, CancellationToken) Create an instance Declaration public static Task<RandomDataProvider> CreateAsync(int capacity, RandomDataProvider? rdp = null, int? seed = null, int? workerBufferSize = null, ISeedableRng? rng = null, CancellationToken cancellationToken = default) Parameters Type Name Description int capacity Buffer capacity in bytes RandomDataProvider rdp Random data provider to attach to (will be used for seeding, if available - otherwise fallback to wan24.Crypto.RND) int? seed Initial seed length in bytes int? workerBufferSize Worker buffer size in bytes ISeedableRng rng RNG to use CancellationToken cancellationToken Cancellation token Returns Type Description Task<RandomDataProvider> Instance (service is not started yet; don't forget to dispose!) | Edit this page View Source CreateFork(in int?, in int?, in int?, in ISeedableRng?) Create a fork instance, which attaches to this instances provided seeds Declaration public virtual RandomDataProvider CreateFork(in int? capacity = null, in int? seed = null, in int? workerBufferSize = null, in ISeedableRng? rng = null) Parameters Type Name Description int? capacity Buffer capacity in bytes int? seed Initial seed length in bytes int? workerBufferSize Worker buffer size in bytes ISeedableRng rng RNG to use (the RNG of this instance won't be used in the fork!) Returns Type Description RandomDataProvider Fork (service is not started yet; don't forget to dispose!) | Edit this page View Source CreateForkAsync(int?, int?, int?, ISeedableRng?, CancellationToken) Create a fork instance, which attaches to this instances provided seeds Declaration public virtual Task<RandomDataProvider> CreateForkAsync(int? capacity = null, int? seed = null, int? workerBufferSize = null, ISeedableRng? rng = null, CancellationToken cancellationToken = default) Parameters Type Name Description int? capacity Buffer capacity in bytes int? seed Initial seed length in bytes int? workerBufferSize Worker buffer size in bytes ISeedableRng rng RNG to use (the RNG of this instance won't be used in the fork!) CancellationToken cancellationToken Cancellation token Returns Type Description Task<RandomDataProvider> Fork (service is not started yet; don't forget to dispose!) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides RandomDataGenerator.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides wan24.Crypto.RandomDataGenerator.DisposeCore() | Edit this page View Source HandleSeedAsync(RandomDataProvider, SeedEventArgs, CancellationToken) Handle seed from the parent Declaration protected virtual Task HandleSeedAsync(RandomDataProvider rnp, RandomDataProvider.SeedEventArgs e, CancellationToken cancellationToken) Parameters Type Name Description RandomDataProvider rnp Random number provider RandomDataProvider.SeedEventArgs e Arguments CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source HandleSeedProviderDisposing(IDisposableObject, EventArgs) Handle a disposing seed provider Declaration protected virtual void HandleSeedProviderDisposing(IDisposableObject sender, EventArgs e) Parameters Type Name Description IDisposableObject sender Sender EventArgs e Arguments | Edit this page View Source InitialSeed(in int) Perform initial seeding Declaration protected virtual void InitialSeed(in int len) Parameters Type Name Description int len Initial seed length in bytes | Edit this page View Source InitialSeedAsync(int, CancellationToken) Perform initial seeding Declaration protected virtual Task InitialSeedAsync(int len, CancellationToken cancellationToken = default) Parameters Type Name Description int len Initial seed length in bytes CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source RaiseOnSeed(in ReadOnlyMemory<byte>) Raise the OnSeed event Declaration protected virtual void RaiseOnSeed(in ReadOnlyMemory<byte> seed) Parameters Type Name Description ReadOnlyMemory<byte> seed Seed | Edit this page View Source RaiseOnSeedAsync(ReadOnlyMemory<byte>, CancellationToken) Raise the OnSeed event Declaration protected virtual Task RaiseOnSeedAsync(ReadOnlyMemory<byte> seed, CancellationToken cancellationToken) Parameters Type Name Description ReadOnlyMemory<byte> seed Seed CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source WorkerAsync() Service worker Declaration protected override Task WorkerAsync() Returns Type Description Task Overrides wan24.Crypto.RandomDataGenerator.WorkerAsync() Events | Edit this page View Source OnSeed Raised when seeded Declaration public event RandomDataProvider.Seed_Delegate? OnSeed Event Type Type Description RandomDataProvider.Seed_Delegate Implements wan24.Core.IWillDispose wan24.Core.IServiceWorker IHostedService wan24.Core.IDisposableObject IDisposable IAsyncDisposable IBouncyCastleRng Org.BouncyCastle.Crypto.Prng.IRandomGenerator wan24.Crypto.ISeedableRng wan24.Crypto.IRng wan24.Crypto.ISeedConsumer"
  },
  "api/wan24.Crypto.BC.StreamCipherRng.html": {
    "href": "api/wan24.Crypto.BC.StreamCipherRng.html",
    "title": "Class StreamCipherRng | wan24-Crypto-BC",
    "keywords": "Class StreamCipherRng Stream cipher CSRNG Inheritance object DisposableBase DisposableRngBase DisposableSeedableRngBase StreamCipherRng ChaCha20Rng XSalsa20Rng Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IBouncyCastleRng IRandomGenerator ISeedableRng IRng ISeedConsumer Inherited Members DisposableRngBase.GetBytes(in int) DisposableRngBase.GetBytesAsync(int, CancellationToken) DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeCore() DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public class StreamCipherRng : DisposableSeedableRngBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IBouncyCastleRng, IRandomGenerator, ISeedableRng, IRng, ISeedConsumer Constructors | Edit this page View Source StreamCipherRng(in EncryptionAlgorithmBase, ISeedableRng?, in int?, in int?) Constructor Declaration public StreamCipherRng(in EncryptionAlgorithmBase algorithm, ISeedableRng? rng = null, in int? bufferSize = null, in int? seedLength = 256) Parameters Type Name Description EncryptionAlgorithmBase algorithm Encryption algorithm to use ISeedableRng rng Internal RNG to use (will be disposed, if possible!) int? bufferSize Buffer size in bytes (min. the IV byte length of the underlaying cipher) int? seedLength Seed the given RNG with N byte from wan24.Crypto.RND (skipped, if null or <1) Fields | Edit this page View Source Buffer Buffer Declaration protected readonly BlockingBufferStream Buffer Field Value Type Description BlockingBufferStream | Edit this page View Source Encryption Cipher stream Declaration protected readonly EncryptionStreams Encryption Field Value Type Description EncryptionStreams | Edit this page View Source RNG Internal RNG to use Declaration protected readonly ISeedableRng RNG Field Value Type Description ISeedableRng | Edit this page View Source RngSync RNG synchronization Declaration protected readonly SemaphoreSync RngSync Field Value Type Description SemaphoreSync Properties | Edit this page View Source Algorithm Encryption algorithm to use Declaration public EncryptionAlgorithmBase Algorithm { get; } Property Value Type Description EncryptionAlgorithmBase Methods | Edit this page View Source AddSeed(ReadOnlySpan<byte>) Add seed to the RNG Declaration public override void AddSeed(ReadOnlySpan<byte> seed) Parameters Type Name Description ReadOnlySpan<byte> seed Seed Overrides DisposableSeedableRngBase.AddSeed(ReadOnlySpan<byte>) | Edit this page View Source AddSeedAsync(ReadOnlyMemory<byte>, CancellationToken) Add seed to the RNG Declaration public override Task AddSeedAsync(ReadOnlyMemory<byte> seed, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> seed Seed CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides DisposableSeedableRngBase.AddSeedAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source AddSeedMaterial(byte[]) Add more seed material to the generator. Declaration public virtual void AddSeedMaterial(byte[] seed) Parameters Type Name Description byte[] seed A byte array to be mixed into the generator's state. | Edit this page View Source AddSeedMaterial(long) Add more seed material to the generator. Declaration public virtual void AddSeedMaterial(long seed) Parameters Type Name Description long seed A long value to be mixed into the generator's state. | Edit this page View Source AddSeedMaterial(ReadOnlySpan<byte>) Declaration public virtual void AddSeedMaterial(ReadOnlySpan<byte> seed) Parameters Type Name Description ReadOnlySpan<byte> seed | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source FillBytes(in Span<byte>) Fill random bytes Declaration public override Span<byte> FillBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description Span<byte> Random bytes Overrides DisposableRngBase.FillBytes(in Span<byte>) | Edit this page View Source FillBytesAsync(Memory<byte>, CancellationToken) Fill random bytes Declaration public override Task<Memory<byte>> FillBytesAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description Task<Memory<byte>> Random bytes Overrides DisposableRngBase.FillBytesAsync(Memory<byte>, CancellationToken) | Edit this page View Source NextBytes(byte[]) Fill byte array with random values. Declaration public void NextBytes(byte[] bytes) Parameters Type Name Description byte[] bytes Array to be filled. | Edit this page View Source NextBytes(byte[], int, int) Fill byte array with random values. Declaration public void NextBytes(byte[] bytes, int start, int len) Parameters Type Name Description byte[] bytes Array to receive bytes. int start Index to start filling at. int len Length of segment to fill. | Edit this page View Source NextBytes(Span<byte>) Declaration public virtual void NextBytes(Span<byte> bytes) Parameters Type Name Description Span<byte> bytes Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IBouncyCastleRng Org.BouncyCastle.Crypto.Prng.IRandomGenerator wan24.Crypto.ISeedableRng wan24.Crypto.IRng wan24.Crypto.ISeedConsumer"
  },
  "api/wan24.Crypto.BC.XSalsa20Rng.html": {
    "href": "api/wan24.Crypto.BC.XSalsa20Rng.html",
    "title": "Class XSalsa20Rng | wan24-Crypto-BC",
    "keywords": "Class XSalsa20Rng XSalsa20 CSRNG Inheritance object DisposableBase DisposableRngBase DisposableSeedableRngBase StreamCipherRng XSalsa20Rng Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IBouncyCastleRng IRandomGenerator ISeedableRng IRng ISeedConsumer Inherited Members StreamCipherRng.Algorithm StreamCipherRng.AddSeed(ReadOnlySpan<byte>) StreamCipherRng.AddSeedAsync(ReadOnlyMemory<byte>, CancellationToken) StreamCipherRng.AddSeedMaterial(byte[]) StreamCipherRng.AddSeedMaterial(ReadOnlySpan<byte>) StreamCipherRng.AddSeedMaterial(long) StreamCipherRng.FillBytes(in Span<byte>) StreamCipherRng.FillBytesAsync(Memory<byte>, CancellationToken) StreamCipherRng.NextBytes(byte[]) StreamCipherRng.NextBytes(byte[], int, int) StreamCipherRng.NextBytes(Span<byte>) DisposableRngBase.GetBytes(in int) DisposableRngBase.GetBytesAsync(int, CancellationToken) DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Crypto.BC Assembly: wan24CryptoBC.dll Syntax public sealed class XSalsa20Rng : StreamCipherRng, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IBouncyCastleRng, IRandomGenerator, ISeedableRng, IRng, ISeedConsumer Remarks Constructor Constructors | Edit this page View Source XSalsa20Rng(in ISeedableRng?, in int?, in int?) XSalsa20 CSRNG Declaration public XSalsa20Rng(in ISeedableRng? rng = null, in int? bufferSize = null, in int? seedLength = 256) Parameters Type Name Description ISeedableRng rng Internal RNG to use (will be disposed, if possible!) int? bufferSize Buffer size in bytes (min. IV_SIZE) int? seedLength Seed the given RNG with N byte from wan24.Crypto.RND (skipped, if null or <1) Remarks Constructor Implements wan24.Core.IWillDispose wan24.Core.IDisposableObject IDisposable IAsyncDisposable IBouncyCastleRng Org.BouncyCastle.Crypto.Prng.IRandomGenerator wan24.Crypto.ISeedableRng wan24.Crypto.IRng wan24.Crypto.ISeedConsumer"
  },
  "api/wan24.Crypto.BC.html": {
    "href": "api/wan24.Crypto.BC.html",
    "title": "Namespace wan24.Crypto.BC | wan24-Crypto-BC",
    "keywords": "Namespace wan24.Crypto.BC Classes AsymmetricBcEcDiffieHellmanAlgorithm EC Diffie Hellman asymmetric algorithm (may be used as replacement, if the .NET algorithm isn't available on the current platform) AsymmetricBcEcDiffieHellmanPrivateKey EC Diffie Hellman asymmetric private key AsymmetricBcEcDiffieHellmanPublicKey EC Diffie Hellman asymmetric public key AsymmetricBcEcDsaAlgorithm EC DSA asymmetric algorithm (may be used as replacement, if the .NET algorithm isn't available on the current platform) AsymmetricBcEcDsaPrivateKey Asymmetric EC DSA private key AsymmetricBcEcDsaPublicKey Asymmetric EC DSA public key AsymmetricBikeAlgorithm BIKE asymmetric algorithm AsymmetricBikeHelper BIKE asymmetric algorithm helper AsymmetricBikePrivateKey BIKE asymmetric private key AsymmetricBikePublicKey BIKE asymmetric public key AsymmetricDilithiumAlgorithm CRYSTALS-Dilithium asymmetric algorithm AsymmetricDilithiumHelper CRYSTALS-Dilithium helper AsymmetricDilithiumPrivateKey CRYSTALS-Dilithium asymmetric private key AsymmetricDilithiumPublicKey CRYSTALS-Dilithium asymmetric public key AsymmetricEd25519Algorithm Ed25519 asymmetric algorithm (128 bit security) AsymmetricEd25519PrivateKey Ed25519 asymmetric private key AsymmetricEd25519PublicKey Ed25519 asymmetric public key AsymmetricEd448Algorithm Ed448 asymmetric algorithm (224 bit security) AsymmetricEd448PrivateKey Ed448 asymmetric private key AsymmetricEd448PublicKey Ed448 asymmetric public key AsymmetricFalconAlgorithm FALCON asymmetric algorithm AsymmetricFalconHelper Asymmetric FALCON algorithm helper AsymmetricFalconPrivateKey Asymmetric FALCON private key AsymmetricFalconPublicKey Asymmetric FALCON public key AsymmetricFrodoKemAlgorithm FrodoKEM asymmetric algorithm AsymmetricFrodoKemHelper FrodoKEM helper AsymmetricFrodoKemPrivateKey FrodoKEM asymmetric private key AsymmetricFrodoKemPublicKey FrodoKEM asymmetric public key AsymmetricHqcAlgorithm HQC asymmetric algorithm AsymmetricHqcHelper HQC asymmetric algorithm helper AsymmetricHqcPrivateKey HQC asymmetric private key AsymmetricHqcPublicKey HQC asymmetric public key AsymmetricKyberAlgorithm CRYSTALS-Kyber asymmetric algorithm AsymmetricKyberHelper CRYSTALS-Kyber asymmetric algorithm helper AsymmetricKyberPrivateKey CRYSTALS-Kyber asymmetric private key AsymmetricKyberPublicKey CRYSTALS-Kyber asymmetric public key AsymmetricNtruEncryptAlgorithm NTRUEncrypt asymmetric algorithm AsymmetricNtruEncryptPrivateKey NTRUEncrypt asymmetric private key AsymmetricNtruEncryptPublicKey NTRUEncrypt asymmetric public key AsymmetricNtruHelper NTRU helper AsymmetricPicnicAlgorithm CRYSTALS-Dilithium asymmetric algorithm AsymmetricPicnicHelper Picnic helper AsymmetricPicnicPrivateKey Picnic asymmetric private key AsymmetricPicnicPublicKey Picnic asymmetric public key AsymmetricSNtruPrimeAlgorithm Streamlined NTRU Prime asymmetric algorithm AsymmetricSNtruPrimeHelper Streamlined NTRU Prime helper AsymmetricSNtruPrimePrivateKey Streamlined NTRU Prime asymmetric private key AsymmetricSNtruPrimePublicKey Streamlined NTRU Prime asymmetric public key AsymmetricSphincsPlusAlgorithm SPHINCS+ asymmetric algorithm AsymmetricSphincsPlusHelper SPHINCS+ asymmetric algorithm helper AsymmetricSphincsPlusPrivateKey SPHINCS+ asymmetric private key AsymmetricSphincsPlusPublicKey SPHINCS+ asymmetric public key AsymmetricX25519Algorithm X25519 asymmetric algorithm (128 bit security)) AsymmetricX25519PrivateKey X25519 asymmetric private key AsymmetricX25519PublicKey X25519 asymmetric public key AsymmetricX448Algorithm X448 asymmetric algorithm (224 bit security)) AsymmetricX448PrivateKey X448 asymmetric private key AsymmetricX448PublicKey X448 asymmetric public key AsymmetricXEd25519Algorithm XEd25519 asymmetric algorithm (converts the used Ed25519 private key to a X25519 private key for key exchange, 128 bit security) AsymmetricXEd25519PrivateKey XEd25519 asymmetric private key AsymmetricXEd25519PublicKey XEd25519 asymmetric public key AsymmetricXEd448Algorithm XEd448 asymmetric algorithm (converts the used Ed448 private key to a X448 private key for key exchange; 224 bit security) AsymmetricXEd448PrivateKey XEd448 asymmetric private key AsymmetricXEd448PublicKey XEd448 asymmetric public key BcEllipticCurves Bouncy Castle elliptic curves Bootstrap Bootstrapper BouncyCastle Bouncy Castle helper BouncyCastleAeadCipherAlgorithmBase<T> Base class for a Bouncy Castle AEAD stream cipher BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal> Base class for a Bouncy Castle asymmetric algorithm BouncyCastleAsymmetricAlgorithmBase<tPublic, tPrivate, tKeyGen, tKeyGenParam, tParam, tPublicKey, tPrivateKey, tFinal> Base class for a Bouncy Castle asymmetric algorithm BouncyCastleAsymmetricNonPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> Base class for a Bouncy Castle asymmetric non-PQC private key BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase2<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal> Base class for a Bouncy Castle asymmetric non-PQC private signature key (which requires a context constructor parameter) BouncyCastleAsymmetricNonPqcPrivateSignatureKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal> Base class for a Bouncy Castle asymmetric non-PQC private signature key BouncyCastleAsymmetricNonPqcPublicKeyBase<tAlgo, tPublicKey, tFinal> Base class fo a Bouncy Castle asymmetric non-PQC public key BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase2<tAlgo, tPublicKey, tSigner, tFinal> Base class for a Bouncy Castle asymmetric non-PQC public signature key (which requires a context constructor parameter) BouncyCastleAsymmetricNonPqcPublicSignatureKeyBase<tAlgo, tPublicKey, tSigner, tFinal> Base class for a Bouncy Castle asymmetric non-PQC public signature key BouncyCastleAsymmetricPqcPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> Base class for a Bouncy Castle asymmetric PQC private key BouncyCastleAsymmetricPqcPrivateKeyExchangeKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tGenerator, tExtractor, tFinal> Base class for a Bouncy Castle asymmetric PQC private key exchange key BouncyCastleAsymmetricPqcPrivateSignatureKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tSigner, tFinal> Base class for a Bouncy Castle asymmetric PQC private signature key BouncyCastleAsymmetricPqcPublicKeyBase<tAlgo, tPublicKey, tFinal> Base class fo a Bouncy Castle asymmetric PQC public key BouncyCastleAsymmetricPqcPublicSignatureKeyBase<tAlgo, tPublicKey, tSigner, tFinal> Base class for a Bouncy Castle asymmetric PQC public signature key BouncyCastleAsymmetricPrivateKeyBase<tPublic, tAlgo, tPublicKey, tPrivateKey, tFinal> Base class for a Bouncy Castle asymmetric private key BouncyCastleAsymmetricPublicKeyBase<tAlgo, tPublicKey, tFinal> Base class fo a Bouncy Castle asymmetric public key BouncyCastleBlockCipherAlgorithmBase<T> Base class for a Bouncy Castle block cipher BouncyCastleBufferedCipherAlgorithmBase<T> Base class for a Bouncy Castle buffered block cipher BouncyCastleCipherAlgorithmBase<T> Base class for a Bouncy Castle cipher BouncyCastleCryptoTransform Bouncy Castle crypto transform BouncyCastleHashAlgorithm Bouncy Castle hash algorithm BouncyCastleHashAlgorithmBase<T> Base class for a Bouncy Castle hash algorithm BouncyCastleHmacAlgorithm Bouncy Castle HMAC algorithm BouncyCastleHmacAlgorithmBase<T> Base class for a Bouncy Castle MAC algorithm BouncyCastleRandomGenerator Random number generator for Bouncy Castle, which adopts wan24.Crypto.RND BouncyCastleRngWrapper Bouncy Castle RNG wrapper for wan24-Crypto BouncyCastleStreamCipherAlgorithmBase<T> Base class for a Bouncy Castle stream cipher ChaCha20Rng ChaCha20 CSRNG DisposableRngWrapper Bouncy Castle disposable RNG wrapper for wan24-Crypto EncryptionAes256GcmAlgorithm AES-256-GCM AEAD symmetric encryption algorithm (using 128 bit MAC) EncryptionBcAes256CbcAlgorithm AES-256-CBC symmetric encryption algorithm (using ISO10126 padding; may be used as replacement, if the .NET algorithm isn't available on the current platform) EncryptionChaCha20Algorithm ChaCha20 symmetric encryption algorithm (using 256 bit key) EncryptionSerpent256CbcAlgorithm Serpent 256 CBC symmetric encryption algorithm (using ISO10126 padding) EncryptionSerpent256GcmAlgorithm Serpent 256 GCM symmetric encryption algorithm (using 128 bit MAC) EncryptionTwofish256CbcAlgorithm Twofish 256 CBC symmetric encryption algorithm (using ISO10126 padding) EncryptionTwofish256GcmAlgorithm Twofish 256 GCM symmetric encryption algorithm (using 128 bit MAC) EncryptionXSalsa20Algorithm XSalsa20 symmetric encryption algorithm (using 256 bit key) Extensions Extension methods HashBcSha3_256Algorithm SHA3-256 hash algorithm (may be used as replacement, if the .NET algorithm isn't available on the current platform) HashBcSha3_256Algorithm.SHA3_256 SHA3-256 HashBcSha3_384Algorithm SHA3-384 hash algorithm (may be used as replacement, if the .NET algorithm isn't available on the current platform) HashBcSha3_384Algorithm.SHA3_384 SHA3-384 HashBcSha3_512Algorithm SHA3-512 hash algorithm (may be used as replacement, if the .NET algorithm isn't available on the current platform) HashBcSha3_512Algorithm.SHA3_512 SHA3-512 HashBcShake128Algorithm Shake128 hash algorithm (may be used as replacement, if the .NET algorithm isn't available on the current platform) HashBcShake256Algorithm Shake256 hash algorithm (may be used as replacement, if the .NET algorithm isn't available on the current platform) MacBcHmacSha3_256Algorithm HMAC-SHA3-256 MAC algorithm (may be used as replacement, if the .NET algorithm isn't available on the current platform) MacBcHmacSha3_256Algorithm.HMACSHA3_256 HMACSHA3-256 MacBcHmacSha3_384Algorithm HMAC-SHA3-384 MAC algorithm (may be used as replacement, if the .NET algorithm isn't available on the current platform) MacBcHmacSha3_384Algorithm.HMACSHA3_384 HMACSHA3-384 MacBcHmacSha3_512Algorithm HMAC-SHA3-512 MAC algorithm (may be used as replacement, if the .NET algorithm isn't available on the current platform) MacBcHmacSha3_512Algorithm.HMACSHA3_512 HMACSHA3-512 RandomDataProvider Random data provider RandomDataProvider.SeedEventArgs OnSeed event arguments StreamCipherRng Stream cipher CSRNG XSalsa20Rng XSalsa20 CSRNG Interfaces IBouncyCastleRng Interface for a seedable Bouncy Castle supporting RNG Delegates RandomDataProvider.Seed_Delegate Delegate for a seed handler"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | wan24-Crypto-BC",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "wan24-Crypto-BC | wan24-Crypto-BC",
    "keywords": "wan24-Crypto-BC This library adopts The Bouncy Castle Cryptography Library For .NET to wan24-Crypto and extends the wan24-Crypto library with these algorithms: Algorithm ID Name Asymmetric CRYSTALS-Kyber 2 CRYSTALSKYBER CRYSTALS-Dilithium 3 CRYSTALSDILITHIUM FALCON 4 FALCON SPHINCS+ 5 SPHINCSPLUS FrodoKEM 6 FRODOKEM NTRUEncrypt 7 NTRUENCRYPT Ed25519 8 ED25519 Ed448 9 ED448 X25519 10 X25519 X448 11 X448 XEd25519 12 XED25519 XEd448 13 XED448 Streamlined NTRU Prime 14 SNTRUP BIKE 15 BIKE HQC 16 HQC Picnic 17 PICNIC Symmetric ChaCha20 1 CHACHA20 XSalsa20 2 XSALSA20 AES-256-GCM AEAD (128 bit MAC) 3 AES256GCM Serpent 256 CBC (ISO10126 padding) 5 SERPENT256CBC Serpent 256 GCM AEAD (128 bit MAC) 6 SERPENT256GCM Twofish 256 CBC (ISO10126 padding) 7 TWOFISH256CBC Twofish 256 GCM AEAD (128 bit MAC) 8 TWOFISH256GCM Main goals of this extension library are to make wan24-Crypto usable on all platforms and extend its algorithms by PQC algorithms and other non-PQC algorithms, which are not available from .NET, but implemented in the Bouncy Castle library. How to get it This library is available as NuGet package. Usage In case you don't use the wan24-Core bootstrapper logic, you need to initialize the Bouncy Castle extension first, before you can use it: wan24.Crypto.BC.Bootstrap.Boot(); This will register the algorithms to the wan24-Crypto library. wan24-Crypto algorithm replacement Some algorithms of the wan24-Crypto library are not available on some platforms, that's why they need to be replaced in order to be used: wan24-Crypto wan24-Crypto-BC AsymmetricEcDiffieHellmanAlgorithm AsymmetricBcEcDiffieHellmanAlgorithm AsymmetricEcDsaAlgorithm AsymmetricBcEcDsaAlgorithm EncryptionAes256CbcAlgorithm EncryptionBcAes256CbcAlgorithm HashShake128Algorithm HashBcShake128Algorithm HashShake256Algorithm HashBcShake256Algorithm HashSha3_256Algorithm HashBcSha3_256Algorithm HashSha3_384Algorithm HashBcSha3_384Algorithm HashSha3_512Algorithm HashBcSha3_512Algorithm MacHmacSha3_256Algorithm MacBcHmacSha3_256Algorithm MacHmacSha3_384Algorithm MacBcHmacSha3_384Algorithm MacHmacSha3_512Algorithm MacBcHmacSha3_512Algorithm To replace all of them: BouncyCastle.ReplaceNetAlgorithms(); NOTE: The Shake128/256 replacements don't support variable output length and use the default output length of the wan24-Crypto implementations instead. The NetShake128/256HashAlgorithmAdapter can't be replaced for this reason. In order to override the .NET default SHA3 hash and HMAC algorithms, you can call: BouncyCastle.RegisterNetAlgorithms(); This will use Bouncy Castle SHA3 implementations for the .NET implemented SHA3 hash algorithms: Name Type SHA3-256 HashBcSha3_256.SHA3_256 SHA3-384 HashBcSha3_384.SHA3_384 SHA3-512 HashBcSha3_512.SHA3_512 HMACSHA3-256 MacBcHmacSha3_256.HMACSHA3_256 HMACSHA3-384 MacBcHmacSha3_384.HMACSHA3_384 HMACSHA3-512 MacBcHmacSha3_512.HMACSHA3_512 This step is required, if you want to ensure that whenever a .NET crypto type or any 3rd party crypto type requests a SHA3 hash or HMAC instance using the static HashAlgorithm.Create(\"NAME\") or KeyedHashAlgorithm.Create(\"NAME\") methods. Use as default algorithms To set Bouncy Castle defaults as wan24-Crypto defaults: BouncyCastle.SetDefaults(); Per default the current wan24-Crypto default will be set as counter algorithms to HybridAlgorithmHelper. Current Bouncy Castle default algorithms are: Usage Algorithm Key exchange NTRUEncrypt Signature CRYSTALS-Dilithium Encryption Serpent 256 bit CBC PAKE encryption Serpent 256 bit GCM Post quantum safety These asymmetric algorithms are designed for post quantum cryptography: CRYSTALS-Kyber (key exchange) CRYSTALS-Dilithium (signature) FALCON (signature) SPHINCS+ (signature) FrodoKEM (key exchange) NTRUEncrypt (key exchange) Streamlined NTRU Prime (key exchange) BIKE (key exchange) HQC (key exchange) Picnic (signature) Normally you want to use them in hybrid mode and use classical algorithms of the wan24-Crypto package as counter algorithm. To do this per default: // Enable the post quantum algorithms as (counter-)defaults CryptoHelper.ForcePostQuantumSafety(); This will use these algorithms as (counter) algorithms for asymmetric cryptography, in case you didn't define other post quantum algorithms already: NTRUEncrypt (key exchange) CRYSTALS-Dilithium (signature) The counter algorithm will come in effect, if you use asymmetric keys for encryption: // Create options having a counter private key CryptoOptions options = EncryptionHelper.GetDefaultOptions(); options.SetCounterPrivateKey(yourNtruPrivateKey); // Encrypt using the options and your normal private key byte[] cipherData = rawData.Encrypt(yourNormalPrivateKey, options); rawData = cipherData.Decrypt(yourNormalPrivateKey, options); And for signature: // Create options having a counter private key CryptoOptions options = AsymmetricHelper.GetDefaultSignatureOptions(); options.SetCounterPrivateKey(yourDilithiumPrivateKey); // Sign using the options and your normal private key SignatureContainer signature = dataToSign.Sign(yourNormalPrivateKey, options: options); Algorithm parameters used Algorithm Parameters CRYSTALS-Kyber, CRYSTALS-Dilithium non-AES SPHINCS+ Haraka simple* FrodoKEM AES* Picnic Full NOTE: CRYSTALS-Kyber and CRYSTALS-Dilithium AES parameters and SPHINCS+ robust parameters are deprecated! SPHINCS+ Haraka parameters are removed from the FIPS standard, so wan24-Crypto-BC will switch to Shake parameters instead. Also the FrodoKEM Shake parameters will be used in the next major release, which will require to renew existing keys, which use the AES parameters from the current version of this library. WARNING The PQC standards are in development at the moment, so future incompatible changes are very likely and will be handled in a new major release of this library. Random data provider The RandomDataProvider is a RandomDataGenerator which provides added seed data to OnSeed(Async) attached event handlers. It uses the ChaCha20Rng in combination with RND of wan24-Crypto to produce cryptographic secure random data (CSRNG). An instance may be set as RND.Generator singleton random data generator for all consumers (like key generators etc.). RandomDataProvider can be customized by extending the type. Pregnant methods are virtual and can be overridden. Since the type is a HostedServiceBase, it can be used in modern .NET app environments. And since it implements the IRandomGenerator interface of Bouncy Castle, it can be used as secure random data source for all Bouncy Castle algorithms (like key generators) also. By calling the CreateFork(Async) method, you can create an attached instance, which will be initialized with a random seed generated by the parent instance and consumes the provided seeds from the parent automatically. NOTE: Don't forget to dispose an unused RandomDataProvider instance! CAUTION: There is a patent (US10402172B1) which comes into play, if you plan to create a Random or Entropy as a Service (R/EaaS) application, especially when using QRNG entropy. Read that document carefully to avoid disappointments. Stream cipher RNG The StreamCipherRng uses any stream cipher to encrypt the generated random bytes of an underlaying PRNG using a random key. The result is a CSRNG. These stream ciphers are available with wan24-Crypto-BC, but you could use any other stream cipher (but not AEAD implementations!) also: Stream cipher RNG ChaCha20 ChaCha20Rng XSalsa20 XSalsa20Rng If you didn't specify an underlaying PRNG, Bouncy Castle's VmpcRandomGenerator will be used and seeded using 256 bytes from RND. The final CSRNG implements IRandomGenerator for use with Bouncy Castle, and also ISeedableRng for use with RND (as seed consumer, for example). NOTE: A StreamCipherRng needs to be disposed after use! You can use the resulting CSRNG as default RNG for RND: ChaCha20Rng csrng = new(); // Enable automatic seeding RND.SeedConsumer = csrng; // Use as default CSRNG RND.FillBytes = csrng.GetBytes; RND.FillBytesAsync = csrng.GetBytesAsync; NOTE: When setting the RND.FillBytes(Async) callbacks, they may not be used, if /dev/random was preferred. To disable /dev/random, set RND.UseDevRandom and RND.RequireDevRandom to false also. NOTE: Currently only stream ciphers are supported, because the cipher RNG implementation doesn't buffer pre-generated random data. X/Ed448-Goldilocks and X/Ed25519 Just a short note on Curve448: Private and public keys have a different key size: The private key has 456 bit, while the public key has 448 bit. Both key sizes are supported for key generation and result in the same key sizes for the private (456 bit) and the public (448 bit) key. The private key of a key pair will always identify with 456 bit, while the public key will always identify with 448 bit - no matter which key size was chosen for key pair generation. The Ed448 signature is context based, but currently only an empty byte array is being used as context data. Instead of a context you should use the purpose free text, which can be given to the signature methods of wan24-Crypto. XEd25519 and XEd448 convert the private Ed25519/448 key to X25519/448 for key exchange. The private key stores only the Ed25519/448 information, while the public key stores both, the Ed25519/448 and the X25519/448 informations (and therefor require a custom serialization format). You can derive Ed25519/448 private keys from a XEd25519/448 private key, and XEd25519/448 private keys from a Ed25519/448 private key. Using the ToX25519/448PrivateKey extension methods for the Ed25519/448PrivateKeyParameters a conversion to X25519/448 is possible now (if you want to use the Bouncy Castle API directly). WARNING: Different Ed25519/448 keys may convert to equal X25519/448 keys, so be aware of possible collisions!"
  }
}